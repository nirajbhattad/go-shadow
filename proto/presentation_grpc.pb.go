// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: proto/presentation.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Presentation_GetTabs_FullMethodName                 = "/sling.cmw.presentation.Presentation/GetTabs"
	Presentation_GetScreen_FullMethodName               = "/sling.cmw.presentation.Presentation/GetScreen"
	Presentation_GetRibbon_FullMethodName               = "/sling.cmw.presentation.Presentation/GetRibbon"
	Presentation_GetTile_FullMethodName                 = "/sling.cmw.presentation.Presentation/GetTile"
	Presentation_GetGrid_FullMethodName                 = "/sling.cmw.presentation.Presentation/GetGrid"
	Presentation_GetChannelGuide_FullMethodName         = "/sling.cmw.presentation.Presentation/GetChannelGuide"
	Presentation_GetChannelGuideRibbon_FullMethodName   = "/sling.cmw.presentation.Presentation/GetChannelGuideRibbon"
	Presentation_GetChannelGuideTile_FullMethodName     = "/sling.cmw.presentation.Presentation/GetChannelGuideTile"
	Presentation_GetGracenoteChannels_FullMethodName    = "/sling.cmw.presentation.Presentation/GetGracenoteChannels"
	Presentation_ResolveDeeplink_FullMethodName         = "/sling.cmw.presentation.Presentation/ResolveDeeplink"
	Presentation_ResolveDeeplinks_FullMethodName        = "/sling.cmw.presentation.Presentation/ResolveDeeplinks"
	Presentation_ResolveProgramDeeplinks_FullMethodName = "/sling.cmw.presentation.Presentation/ResolveProgramDeeplinks"
	Presentation_LookupRecGuid_FullMethodName           = "/sling.cmw.presentation.Presentation/LookupRecGuid"
	Presentation_LookupRuleGuid_FullMethodName          = "/sling.cmw.presentation.Presentation/LookupRuleGuid"
	Presentation_GetPlainChannelsList_FullMethodName    = "/sling.cmw.presentation.Presentation/GetPlainChannelsList"
)

// PresentationClient is the client API for Presentation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PresentationClient interface {
	GetTabs(ctx context.Context, in *TabQuery, opts ...grpc.CallOption) (*Tabs, error)
	GetScreen(ctx context.Context, in *PgQuery, opts ...grpc.CallOption) (*Screen, error)
	GetRibbon(ctx context.Context, in *PgQuery, opts ...grpc.CallOption) (*Ribbon, error)
	GetTile(ctx context.Context, in *PgQuery, opts ...grpc.CallOption) (*Tile, error)
	GetGrid(ctx context.Context, in *PgQuery, opts ...grpc.CallOption) (*Grid, error)
	GetChannelGuide(ctx context.Context, in *PgQuery, opts ...grpc.CallOption) (*ChannelGuide, error)
	GetChannelGuideRibbon(ctx context.Context, in *PgQuery, opts ...grpc.CallOption) (*Ribbon, error)
	GetChannelGuideTile(ctx context.Context, in *PgQuery, opts ...grpc.CallOption) (*Tile, error)
	GetGracenoteChannels(ctx context.Context, in *GracenoteChannelsQuery, opts ...grpc.CallOption) (*GracenoteChannelsResponse, error)
	ResolveDeeplink(ctx context.Context, in *DeepLinkQuery, opts ...grpc.CallOption) (*DeepLinkResponse, error)
	ResolveDeeplinks(ctx context.Context, in *DeepLinkListQuery, opts ...grpc.CallOption) (*DeepLinkListResponse, error)
	ResolveProgramDeeplinks(ctx context.Context, in *DeepLinkListQuery, opts ...grpc.CallOption) (*DeepLinkListResponse, error)
	LookupRecGuid(ctx context.Context, in *LookupRecGuidRequest, opts ...grpc.CallOption) (*LookupRecGuidResponse, error)
	LookupRuleGuid(ctx context.Context, in *LookupRuleGuidRequest, opts ...grpc.CallOption) (*LookupRuleGuidResponse, error)
	GetPlainChannelsList(ctx context.Context, in *ChannelQuery, opts ...grpc.CallOption) (*PlainChannelList, error)
}

type presentationClient struct {
	cc grpc.ClientConnInterface
}

func NewPresentationClient(cc grpc.ClientConnInterface) PresentationClient {
	return &presentationClient{cc}
}

func (c *presentationClient) GetTabs(ctx context.Context, in *TabQuery, opts ...grpc.CallOption) (*Tabs, error) {
	out := new(Tabs)
	err := c.cc.Invoke(ctx, Presentation_GetTabs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presentationClient) GetScreen(ctx context.Context, in *PgQuery, opts ...grpc.CallOption) (*Screen, error) {
	out := new(Screen)
	err := c.cc.Invoke(ctx, Presentation_GetScreen_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presentationClient) GetRibbon(ctx context.Context, in *PgQuery, opts ...grpc.CallOption) (*Ribbon, error) {
	out := new(Ribbon)
	err := c.cc.Invoke(ctx, Presentation_GetRibbon_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presentationClient) GetTile(ctx context.Context, in *PgQuery, opts ...grpc.CallOption) (*Tile, error) {
	out := new(Tile)
	err := c.cc.Invoke(ctx, Presentation_GetTile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presentationClient) GetGrid(ctx context.Context, in *PgQuery, opts ...grpc.CallOption) (*Grid, error) {
	out := new(Grid)
	err := c.cc.Invoke(ctx, Presentation_GetGrid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presentationClient) GetChannelGuide(ctx context.Context, in *PgQuery, opts ...grpc.CallOption) (*ChannelGuide, error) {
	out := new(ChannelGuide)
	err := c.cc.Invoke(ctx, Presentation_GetChannelGuide_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presentationClient) GetChannelGuideRibbon(ctx context.Context, in *PgQuery, opts ...grpc.CallOption) (*Ribbon, error) {
	out := new(Ribbon)
	err := c.cc.Invoke(ctx, Presentation_GetChannelGuideRibbon_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presentationClient) GetChannelGuideTile(ctx context.Context, in *PgQuery, opts ...grpc.CallOption) (*Tile, error) {
	out := new(Tile)
	err := c.cc.Invoke(ctx, Presentation_GetChannelGuideTile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presentationClient) GetGracenoteChannels(ctx context.Context, in *GracenoteChannelsQuery, opts ...grpc.CallOption) (*GracenoteChannelsResponse, error) {
	out := new(GracenoteChannelsResponse)
	err := c.cc.Invoke(ctx, Presentation_GetGracenoteChannels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presentationClient) ResolveDeeplink(ctx context.Context, in *DeepLinkQuery, opts ...grpc.CallOption) (*DeepLinkResponse, error) {
	out := new(DeepLinkResponse)
	err := c.cc.Invoke(ctx, Presentation_ResolveDeeplink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presentationClient) ResolveDeeplinks(ctx context.Context, in *DeepLinkListQuery, opts ...grpc.CallOption) (*DeepLinkListResponse, error) {
	out := new(DeepLinkListResponse)
	err := c.cc.Invoke(ctx, Presentation_ResolveDeeplinks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presentationClient) ResolveProgramDeeplinks(ctx context.Context, in *DeepLinkListQuery, opts ...grpc.CallOption) (*DeepLinkListResponse, error) {
	out := new(DeepLinkListResponse)
	err := c.cc.Invoke(ctx, Presentation_ResolveProgramDeeplinks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presentationClient) LookupRecGuid(ctx context.Context, in *LookupRecGuidRequest, opts ...grpc.CallOption) (*LookupRecGuidResponse, error) {
	out := new(LookupRecGuidResponse)
	err := c.cc.Invoke(ctx, Presentation_LookupRecGuid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presentationClient) LookupRuleGuid(ctx context.Context, in *LookupRuleGuidRequest, opts ...grpc.CallOption) (*LookupRuleGuidResponse, error) {
	out := new(LookupRuleGuidResponse)
	err := c.cc.Invoke(ctx, Presentation_LookupRuleGuid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presentationClient) GetPlainChannelsList(ctx context.Context, in *ChannelQuery, opts ...grpc.CallOption) (*PlainChannelList, error) {
	out := new(PlainChannelList)
	err := c.cc.Invoke(ctx, Presentation_GetPlainChannelsList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PresentationServer is the server API for Presentation service.
// All implementations must embed UnimplementedPresentationServer
// for forward compatibility
type PresentationServer interface {
	GetTabs(context.Context, *TabQuery) (*Tabs, error)
	GetScreen(context.Context, *PgQuery) (*Screen, error)
	GetRibbon(context.Context, *PgQuery) (*Ribbon, error)
	GetTile(context.Context, *PgQuery) (*Tile, error)
	GetGrid(context.Context, *PgQuery) (*Grid, error)
	GetChannelGuide(context.Context, *PgQuery) (*ChannelGuide, error)
	GetChannelGuideRibbon(context.Context, *PgQuery) (*Ribbon, error)
	GetChannelGuideTile(context.Context, *PgQuery) (*Tile, error)
	GetGracenoteChannels(context.Context, *GracenoteChannelsQuery) (*GracenoteChannelsResponse, error)
	ResolveDeeplink(context.Context, *DeepLinkQuery) (*DeepLinkResponse, error)
	ResolveDeeplinks(context.Context, *DeepLinkListQuery) (*DeepLinkListResponse, error)
	ResolveProgramDeeplinks(context.Context, *DeepLinkListQuery) (*DeepLinkListResponse, error)
	LookupRecGuid(context.Context, *LookupRecGuidRequest) (*LookupRecGuidResponse, error)
	LookupRuleGuid(context.Context, *LookupRuleGuidRequest) (*LookupRuleGuidResponse, error)
	GetPlainChannelsList(context.Context, *ChannelQuery) (*PlainChannelList, error)
	mustEmbedUnimplementedPresentationServer()
}

// UnimplementedPresentationServer must be embedded to have forward compatible implementations.
type UnimplementedPresentationServer struct {
}

func (UnimplementedPresentationServer) GetTabs(context.Context, *TabQuery) (*Tabs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTabs not implemented")
}
func (UnimplementedPresentationServer) GetScreen(context.Context, *PgQuery) (*Screen, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScreen not implemented")
}
func (UnimplementedPresentationServer) GetRibbon(context.Context, *PgQuery) (*Ribbon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRibbon not implemented")
}
func (UnimplementedPresentationServer) GetTile(context.Context, *PgQuery) (*Tile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTile not implemented")
}
func (UnimplementedPresentationServer) GetGrid(context.Context, *PgQuery) (*Grid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGrid not implemented")
}
func (UnimplementedPresentationServer) GetChannelGuide(context.Context, *PgQuery) (*ChannelGuide, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelGuide not implemented")
}
func (UnimplementedPresentationServer) GetChannelGuideRibbon(context.Context, *PgQuery) (*Ribbon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelGuideRibbon not implemented")
}
func (UnimplementedPresentationServer) GetChannelGuideTile(context.Context, *PgQuery) (*Tile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelGuideTile not implemented")
}
func (UnimplementedPresentationServer) GetGracenoteChannels(context.Context, *GracenoteChannelsQuery) (*GracenoteChannelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGracenoteChannels not implemented")
}
func (UnimplementedPresentationServer) ResolveDeeplink(context.Context, *DeepLinkQuery) (*DeepLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveDeeplink not implemented")
}
func (UnimplementedPresentationServer) ResolveDeeplinks(context.Context, *DeepLinkListQuery) (*DeepLinkListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveDeeplinks not implemented")
}
func (UnimplementedPresentationServer) ResolveProgramDeeplinks(context.Context, *DeepLinkListQuery) (*DeepLinkListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveProgramDeeplinks not implemented")
}
func (UnimplementedPresentationServer) LookupRecGuid(context.Context, *LookupRecGuidRequest) (*LookupRecGuidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupRecGuid not implemented")
}
func (UnimplementedPresentationServer) LookupRuleGuid(context.Context, *LookupRuleGuidRequest) (*LookupRuleGuidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupRuleGuid not implemented")
}
func (UnimplementedPresentationServer) GetPlainChannelsList(context.Context, *ChannelQuery) (*PlainChannelList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlainChannelsList not implemented")
}
func (UnimplementedPresentationServer) mustEmbedUnimplementedPresentationServer() {}

// UnsafePresentationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PresentationServer will
// result in compilation errors.
type UnsafePresentationServer interface {
	mustEmbedUnimplementedPresentationServer()
}

func RegisterPresentationServer(s grpc.ServiceRegistrar, srv PresentationServer) {
	s.RegisterService(&Presentation_ServiceDesc, srv)
}

func _Presentation_GetTabs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TabQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresentationServer).GetTabs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Presentation_GetTabs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresentationServer).GetTabs(ctx, req.(*TabQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Presentation_GetScreen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PgQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresentationServer).GetScreen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Presentation_GetScreen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresentationServer).GetScreen(ctx, req.(*PgQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Presentation_GetRibbon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PgQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresentationServer).GetRibbon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Presentation_GetRibbon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresentationServer).GetRibbon(ctx, req.(*PgQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Presentation_GetTile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PgQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresentationServer).GetTile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Presentation_GetTile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresentationServer).GetTile(ctx, req.(*PgQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Presentation_GetGrid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PgQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresentationServer).GetGrid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Presentation_GetGrid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresentationServer).GetGrid(ctx, req.(*PgQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Presentation_GetChannelGuide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PgQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresentationServer).GetChannelGuide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Presentation_GetChannelGuide_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresentationServer).GetChannelGuide(ctx, req.(*PgQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Presentation_GetChannelGuideRibbon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PgQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresentationServer).GetChannelGuideRibbon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Presentation_GetChannelGuideRibbon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresentationServer).GetChannelGuideRibbon(ctx, req.(*PgQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Presentation_GetChannelGuideTile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PgQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresentationServer).GetChannelGuideTile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Presentation_GetChannelGuideTile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresentationServer).GetChannelGuideTile(ctx, req.(*PgQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Presentation_GetGracenoteChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GracenoteChannelsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresentationServer).GetGracenoteChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Presentation_GetGracenoteChannels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresentationServer).GetGracenoteChannels(ctx, req.(*GracenoteChannelsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Presentation_ResolveDeeplink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeepLinkQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresentationServer).ResolveDeeplink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Presentation_ResolveDeeplink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresentationServer).ResolveDeeplink(ctx, req.(*DeepLinkQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Presentation_ResolveDeeplinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeepLinkListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresentationServer).ResolveDeeplinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Presentation_ResolveDeeplinks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresentationServer).ResolveDeeplinks(ctx, req.(*DeepLinkListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Presentation_ResolveProgramDeeplinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeepLinkListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresentationServer).ResolveProgramDeeplinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Presentation_ResolveProgramDeeplinks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresentationServer).ResolveProgramDeeplinks(ctx, req.(*DeepLinkListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Presentation_LookupRecGuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupRecGuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresentationServer).LookupRecGuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Presentation_LookupRecGuid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresentationServer).LookupRecGuid(ctx, req.(*LookupRecGuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Presentation_LookupRuleGuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupRuleGuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresentationServer).LookupRuleGuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Presentation_LookupRuleGuid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresentationServer).LookupRuleGuid(ctx, req.(*LookupRuleGuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Presentation_GetPlainChannelsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresentationServer).GetPlainChannelsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Presentation_GetPlainChannelsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresentationServer).GetPlainChannelsList(ctx, req.(*ChannelQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// Presentation_ServiceDesc is the grpc.ServiceDesc for Presentation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Presentation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sling.cmw.presentation.Presentation",
	HandlerType: (*PresentationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTabs",
			Handler:    _Presentation_GetTabs_Handler,
		},
		{
			MethodName: "GetScreen",
			Handler:    _Presentation_GetScreen_Handler,
		},
		{
			MethodName: "GetRibbon",
			Handler:    _Presentation_GetRibbon_Handler,
		},
		{
			MethodName: "GetTile",
			Handler:    _Presentation_GetTile_Handler,
		},
		{
			MethodName: "GetGrid",
			Handler:    _Presentation_GetGrid_Handler,
		},
		{
			MethodName: "GetChannelGuide",
			Handler:    _Presentation_GetChannelGuide_Handler,
		},
		{
			MethodName: "GetChannelGuideRibbon",
			Handler:    _Presentation_GetChannelGuideRibbon_Handler,
		},
		{
			MethodName: "GetChannelGuideTile",
			Handler:    _Presentation_GetChannelGuideTile_Handler,
		},
		{
			MethodName: "GetGracenoteChannels",
			Handler:    _Presentation_GetGracenoteChannels_Handler,
		},
		{
			MethodName: "ResolveDeeplink",
			Handler:    _Presentation_ResolveDeeplink_Handler,
		},
		{
			MethodName: "ResolveDeeplinks",
			Handler:    _Presentation_ResolveDeeplinks_Handler,
		},
		{
			MethodName: "ResolveProgramDeeplinks",
			Handler:    _Presentation_ResolveProgramDeeplinks_Handler,
		},
		{
			MethodName: "LookupRecGuid",
			Handler:    _Presentation_LookupRecGuid_Handler,
		},
		{
			MethodName: "LookupRuleGuid",
			Handler:    _Presentation_LookupRuleGuid_Handler,
		},
		{
			MethodName: "GetPlainChannelsList",
			Handler:    _Presentation_GetPlainChannelsList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/presentation.proto",
}

const (
	Drm_CheckDrm_FullMethodName = "/sling.cmw.presentation.Drm/CheckDrm"
)

// DrmClient is the client API for Drm service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DrmClient interface {
	CheckDrm(ctx context.Context, in *CheckDrmRequest, opts ...grpc.CallOption) (*CheckDrmResponse, error)
}

type drmClient struct {
	cc grpc.ClientConnInterface
}

func NewDrmClient(cc grpc.ClientConnInterface) DrmClient {
	return &drmClient{cc}
}

func (c *drmClient) CheckDrm(ctx context.Context, in *CheckDrmRequest, opts ...grpc.CallOption) (*CheckDrmResponse, error) {
	out := new(CheckDrmResponse)
	err := c.cc.Invoke(ctx, Drm_CheckDrm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DrmServer is the server API for Drm service.
// All implementations must embed UnimplementedDrmServer
// for forward compatibility
type DrmServer interface {
	CheckDrm(context.Context, *CheckDrmRequest) (*CheckDrmResponse, error)
	mustEmbedUnimplementedDrmServer()
}

// UnimplementedDrmServer must be embedded to have forward compatible implementations.
type UnimplementedDrmServer struct {
}

func (UnimplementedDrmServer) CheckDrm(context.Context, *CheckDrmRequest) (*CheckDrmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckDrm not implemented")
}
func (UnimplementedDrmServer) mustEmbedUnimplementedDrmServer() {}

// UnsafeDrmServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DrmServer will
// result in compilation errors.
type UnsafeDrmServer interface {
	mustEmbedUnimplementedDrmServer()
}

func RegisterDrmServer(s grpc.ServiceRegistrar, srv DrmServer) {
	s.RegisterService(&Drm_ServiceDesc, srv)
}

func _Drm_CheckDrm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckDrmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrmServer).CheckDrm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Drm_CheckDrm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrmServer).CheckDrm(ctx, req.(*CheckDrmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Drm_ServiceDesc is the grpc.ServiceDesc for Drm service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Drm_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sling.cmw.presentation.Drm",
	HandlerType: (*DrmServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckDrm",
			Handler:    _Drm_CheckDrm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/presentation.proto",
}

const (
	FeatureGroup_GetMembers_FullMethodName    = "/sling.cmw.presentation.FeatureGroup/GetMembers"
	FeatureGroup_AddMembers_FullMethodName    = "/sling.cmw.presentation.FeatureGroup/AddMembers"
	FeatureGroup_RemoveMembers_FullMethodName = "/sling.cmw.presentation.FeatureGroup/RemoveMembers"
)

// FeatureGroupClient is the client API for FeatureGroup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeatureGroupClient interface {
	GetMembers(ctx context.Context, in *GetMembersQuery, opts ...grpc.CallOption) (*Members, error)
	AddMembers(ctx context.Context, in *ModifyMembersQuery, opts ...grpc.CallOption) (*Members, error)
	RemoveMembers(ctx context.Context, in *ModifyMembersQuery, opts ...grpc.CallOption) (*Members, error)
}

type featureGroupClient struct {
	cc grpc.ClientConnInterface
}

func NewFeatureGroupClient(cc grpc.ClientConnInterface) FeatureGroupClient {
	return &featureGroupClient{cc}
}

func (c *featureGroupClient) GetMembers(ctx context.Context, in *GetMembersQuery, opts ...grpc.CallOption) (*Members, error) {
	out := new(Members)
	err := c.cc.Invoke(ctx, FeatureGroup_GetMembers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureGroupClient) AddMembers(ctx context.Context, in *ModifyMembersQuery, opts ...grpc.CallOption) (*Members, error) {
	out := new(Members)
	err := c.cc.Invoke(ctx, FeatureGroup_AddMembers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureGroupClient) RemoveMembers(ctx context.Context, in *ModifyMembersQuery, opts ...grpc.CallOption) (*Members, error) {
	out := new(Members)
	err := c.cc.Invoke(ctx, FeatureGroup_RemoveMembers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeatureGroupServer is the server API for FeatureGroup service.
// All implementations must embed UnimplementedFeatureGroupServer
// for forward compatibility
type FeatureGroupServer interface {
	GetMembers(context.Context, *GetMembersQuery) (*Members, error)
	AddMembers(context.Context, *ModifyMembersQuery) (*Members, error)
	RemoveMembers(context.Context, *ModifyMembersQuery) (*Members, error)
	mustEmbedUnimplementedFeatureGroupServer()
}

// UnimplementedFeatureGroupServer must be embedded to have forward compatible implementations.
type UnimplementedFeatureGroupServer struct {
}

func (UnimplementedFeatureGroupServer) GetMembers(context.Context, *GetMembersQuery) (*Members, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMembers not implemented")
}
func (UnimplementedFeatureGroupServer) AddMembers(context.Context, *ModifyMembersQuery) (*Members, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMembers not implemented")
}
func (UnimplementedFeatureGroupServer) RemoveMembers(context.Context, *ModifyMembersQuery) (*Members, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMembers not implemented")
}
func (UnimplementedFeatureGroupServer) mustEmbedUnimplementedFeatureGroupServer() {}

// UnsafeFeatureGroupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeatureGroupServer will
// result in compilation errors.
type UnsafeFeatureGroupServer interface {
	mustEmbedUnimplementedFeatureGroupServer()
}

func RegisterFeatureGroupServer(s grpc.ServiceRegistrar, srv FeatureGroupServer) {
	s.RegisterService(&FeatureGroup_ServiceDesc, srv)
}

func _FeatureGroup_GetMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMembersQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureGroupServer).GetMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeatureGroup_GetMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureGroupServer).GetMembers(ctx, req.(*GetMembersQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureGroup_AddMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyMembersQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureGroupServer).AddMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeatureGroup_AddMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureGroupServer).AddMembers(ctx, req.(*ModifyMembersQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureGroup_RemoveMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyMembersQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureGroupServer).RemoveMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeatureGroup_RemoveMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureGroupServer).RemoveMembers(ctx, req.(*ModifyMembersQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// FeatureGroup_ServiceDesc is the grpc.ServiceDesc for FeatureGroup service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeatureGroup_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sling.cmw.presentation.FeatureGroup",
	HandlerType: (*FeatureGroupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMembers",
			Handler:    _FeatureGroup_GetMembers_Handler,
		},
		{
			MethodName: "AddMembers",
			Handler:    _FeatureGroup_AddMembers_Handler,
		},
		{
			MethodName: "RemoveMembers",
			Handler:    _FeatureGroup_RemoveMembers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/presentation.proto",
}

const (
	Bookmark_GetBookmark_FullMethodName = "/sling.cmw.presentation.Bookmark/GetBookmark"
)

// BookmarkClient is the client API for Bookmark service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookmarkClient interface {
	GetBookmark(ctx context.Context, in *BookmarkRequest, opts ...grpc.CallOption) (*BookmarkResponse, error)
}

type bookmarkClient struct {
	cc grpc.ClientConnInterface
}

func NewBookmarkClient(cc grpc.ClientConnInterface) BookmarkClient {
	return &bookmarkClient{cc}
}

func (c *bookmarkClient) GetBookmark(ctx context.Context, in *BookmarkRequest, opts ...grpc.CallOption) (*BookmarkResponse, error) {
	out := new(BookmarkResponse)
	err := c.cc.Invoke(ctx, Bookmark_GetBookmark_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookmarkServer is the server API for Bookmark service.
// All implementations must embed UnimplementedBookmarkServer
// for forward compatibility
type BookmarkServer interface {
	GetBookmark(context.Context, *BookmarkRequest) (*BookmarkResponse, error)
	mustEmbedUnimplementedBookmarkServer()
}

// UnimplementedBookmarkServer must be embedded to have forward compatible implementations.
type UnimplementedBookmarkServer struct {
}

func (UnimplementedBookmarkServer) GetBookmark(context.Context, *BookmarkRequest) (*BookmarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookmark not implemented")
}
func (UnimplementedBookmarkServer) mustEmbedUnimplementedBookmarkServer() {}

// UnsafeBookmarkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookmarkServer will
// result in compilation errors.
type UnsafeBookmarkServer interface {
	mustEmbedUnimplementedBookmarkServer()
}

func RegisterBookmarkServer(s grpc.ServiceRegistrar, srv BookmarkServer) {
	s.RegisterService(&Bookmark_ServiceDesc, srv)
}

func _Bookmark_GetBookmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookmarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookmarkServer).GetBookmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bookmark_GetBookmark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookmarkServer).GetBookmark(ctx, req.(*BookmarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Bookmark_ServiceDesc is the grpc.ServiceDesc for Bookmark service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bookmark_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sling.cmw.presentation.Bookmark",
	HandlerType: (*BookmarkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBookmark",
			Handler:    _Bookmark_GetBookmark_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/presentation.proto",
}

const (
	DetailView_GetDetailView_FullMethodName    = "/sling.cmw.presentation.DetailView/GetDetailView"
	DetailView_GetDetailContent_FullMethodName = "/sling.cmw.presentation.DetailView/GetDetailContent"
	DetailView_GetDetailActions_FullMethodName = "/sling.cmw.presentation.DetailView/GetDetailActions"
	DetailView_GetDetailScreen_FullMethodName  = "/sling.cmw.presentation.DetailView/GetDetailScreen"
	DetailView_GetDetailRibbons_FullMethodName = "/sling.cmw.presentation.DetailView/GetDetailRibbons"
)

// DetailViewClient is the client API for DetailView service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DetailViewClient interface {
	GetDetailView(ctx context.Context, in *DetailViewRequest, opts ...grpc.CallOption) (*DetailViewResponse, error)
	GetDetailContent(ctx context.Context, in *DetailContentQuery, opts ...grpc.CallOption) (*DetailContent, error)
	GetDetailActions(ctx context.Context, in *DetailActionsQuery, opts ...grpc.CallOption) (*DetailActions, error)
	GetDetailScreen(ctx context.Context, in *DetailScreenQuery, opts ...grpc.CallOption) (*DetailScreenResponse, error)
	GetDetailRibbons(ctx context.Context, in *DetailRibbonsQuery, opts ...grpc.CallOption) (*DetailRibbons, error)
}

type detailViewClient struct {
	cc grpc.ClientConnInterface
}

func NewDetailViewClient(cc grpc.ClientConnInterface) DetailViewClient {
	return &detailViewClient{cc}
}

func (c *detailViewClient) GetDetailView(ctx context.Context, in *DetailViewRequest, opts ...grpc.CallOption) (*DetailViewResponse, error) {
	out := new(DetailViewResponse)
	err := c.cc.Invoke(ctx, DetailView_GetDetailView_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *detailViewClient) GetDetailContent(ctx context.Context, in *DetailContentQuery, opts ...grpc.CallOption) (*DetailContent, error) {
	out := new(DetailContent)
	err := c.cc.Invoke(ctx, DetailView_GetDetailContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *detailViewClient) GetDetailActions(ctx context.Context, in *DetailActionsQuery, opts ...grpc.CallOption) (*DetailActions, error) {
	out := new(DetailActions)
	err := c.cc.Invoke(ctx, DetailView_GetDetailActions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *detailViewClient) GetDetailScreen(ctx context.Context, in *DetailScreenQuery, opts ...grpc.CallOption) (*DetailScreenResponse, error) {
	out := new(DetailScreenResponse)
	err := c.cc.Invoke(ctx, DetailView_GetDetailScreen_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *detailViewClient) GetDetailRibbons(ctx context.Context, in *DetailRibbonsQuery, opts ...grpc.CallOption) (*DetailRibbons, error) {
	out := new(DetailRibbons)
	err := c.cc.Invoke(ctx, DetailView_GetDetailRibbons_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DetailViewServer is the server API for DetailView service.
// All implementations must embed UnimplementedDetailViewServer
// for forward compatibility
type DetailViewServer interface {
	GetDetailView(context.Context, *DetailViewRequest) (*DetailViewResponse, error)
	GetDetailContent(context.Context, *DetailContentQuery) (*DetailContent, error)
	GetDetailActions(context.Context, *DetailActionsQuery) (*DetailActions, error)
	GetDetailScreen(context.Context, *DetailScreenQuery) (*DetailScreenResponse, error)
	GetDetailRibbons(context.Context, *DetailRibbonsQuery) (*DetailRibbons, error)
	mustEmbedUnimplementedDetailViewServer()
}

// UnimplementedDetailViewServer must be embedded to have forward compatible implementations.
type UnimplementedDetailViewServer struct {
}

func (UnimplementedDetailViewServer) GetDetailView(context.Context, *DetailViewRequest) (*DetailViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetailView not implemented")
}
func (UnimplementedDetailViewServer) GetDetailContent(context.Context, *DetailContentQuery) (*DetailContent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetailContent not implemented")
}
func (UnimplementedDetailViewServer) GetDetailActions(context.Context, *DetailActionsQuery) (*DetailActions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetailActions not implemented")
}
func (UnimplementedDetailViewServer) GetDetailScreen(context.Context, *DetailScreenQuery) (*DetailScreenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetailScreen not implemented")
}
func (UnimplementedDetailViewServer) GetDetailRibbons(context.Context, *DetailRibbonsQuery) (*DetailRibbons, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetailRibbons not implemented")
}
func (UnimplementedDetailViewServer) mustEmbedUnimplementedDetailViewServer() {}

// UnsafeDetailViewServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DetailViewServer will
// result in compilation errors.
type UnsafeDetailViewServer interface {
	mustEmbedUnimplementedDetailViewServer()
}

func RegisterDetailViewServer(s grpc.ServiceRegistrar, srv DetailViewServer) {
	s.RegisterService(&DetailView_ServiceDesc, srv)
}

func _DetailView_GetDetailView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetailViewServer).GetDetailView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DetailView_GetDetailView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetailViewServer).GetDetailView(ctx, req.(*DetailViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DetailView_GetDetailContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailContentQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetailViewServer).GetDetailContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DetailView_GetDetailContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetailViewServer).GetDetailContent(ctx, req.(*DetailContentQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _DetailView_GetDetailActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailActionsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetailViewServer).GetDetailActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DetailView_GetDetailActions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetailViewServer).GetDetailActions(ctx, req.(*DetailActionsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _DetailView_GetDetailScreen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailScreenQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetailViewServer).GetDetailScreen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DetailView_GetDetailScreen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetailViewServer).GetDetailScreen(ctx, req.(*DetailScreenQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _DetailView_GetDetailRibbons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailRibbonsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DetailViewServer).GetDetailRibbons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DetailView_GetDetailRibbons_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DetailViewServer).GetDetailRibbons(ctx, req.(*DetailRibbonsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// DetailView_ServiceDesc is the grpc.ServiceDesc for DetailView service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DetailView_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sling.cmw.presentation.DetailView",
	HandlerType: (*DetailViewServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDetailView",
			Handler:    _DetailView_GetDetailView_Handler,
		},
		{
			MethodName: "GetDetailContent",
			Handler:    _DetailView_GetDetailContent_Handler,
		},
		{
			MethodName: "GetDetailActions",
			Handler:    _DetailView_GetDetailActions_Handler,
		},
		{
			MethodName: "GetDetailScreen",
			Handler:    _DetailView_GetDetailScreen_Handler,
		},
		{
			MethodName: "GetDetailRibbons",
			Handler:    _DetailView_GetDetailRibbons_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/presentation.proto",
}
