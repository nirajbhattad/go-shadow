// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.2
// source: proto/shadow.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Transaction is the primary financial and network transaction type. This is used by the NeMo network as a generic
// transaction type but will typically be used for financial messages.
type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// message is the raw incoming or outgoing message.
	Message []byte `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// message_source_name is the original source system of the transaction.
	MessageSourceName string `protobuf:"bytes,2,opt,name=message_source_name,json=messageSourceName,proto3" json:"message_source_name,omitempty"`
	// uutid is a list of applicable unique transaction ids.
	Uutid []string `protobuf:"bytes,3,rep,name=uutid,proto3" json:"uutid,omitempty"`
	// source_service_name is name of the sending service.
	SourceServiceName string `protobuf:"bytes,4,opt,name=source_service_name,json=sourceServiceName,proto3" json:"source_service_name,omitempty"`
	// client_profile_identifier is used to attach a client id with the transaction.
	ClientProfileIdentifier string `protobuf:"bytes,5,opt,name=client_profile_identifier,json=clientProfileIdentifier,proto3" json:"client_profile_identifier,omitempty"`
	// port_number is the originating port this transaction arrived on, used for TCP based transactions.
	PortNumber uint32 `protobuf:"varint,6,opt,name=port_number,json=portNumber,proto3" json:"port_number,omitempty"`
	// session_identifier is used to specify the arriving session id for either TCP or HTTP transactions.
	SessionIdentifier string `protobuf:"bytes,7,opt,name=session_identifier,json=sessionIdentifier,proto3" json:"session_identifier,omitempty"`
	// message_specification_format_name will specify the expected message format for this transaction.
	MessageSpecificationFormatName string `protobuf:"bytes,8,opt,name=message_specification_format_name,json=messageSpecificationFormatName,proto3" json:"message_specification_format_name,omitempty"`
	// proxy_availability_zone will include the originating proxy's availability zone.
	ProxyAvailabilityZone string `protobuf:"bytes,9,opt,name=proxy_availability_zone,json=proxyAvailabilityZone,proto3" json:"proxy_availability_zone,omitempty"`
	// event_timestamp will be the originating transaction arrival timestamp. This value is overwritten with request time
	// when processing responses.
	EventTimestamp uint64 `protobuf:"varint,10,opt,name=event_timestamp,json=eventTimestamp,proto3" json:"event_timestamp,omitempty"`
	// embedded_header_length is the length of the embedded header within the raw transaction (if included).
	EmbeddedHeaderLength uint32 `protobuf:"varint,11,opt,name=embedded_header_length,json=embeddedHeaderLength,proto3" json:"embedded_header_length,omitempty"`
	// http_header_text is a map of HTTP headers and their values.
	HttpHeaderText map[string]string `protobuf:"bytes,12,rep,name=http_header_text,json=httpHeaderText,proto3" json:"http_header_text,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// proxy_fqdn_text is the full host and domain name for the originating proxy.
	ProxyFqdnText string `protobuf:"bytes,13,opt,name=proxy_fqdn_text,json=proxyFqdnText,proto3" json:"proxy_fqdn_text,omitempty"`
	// flight_key is a unique key that is used to lookup saved in-flight transactions upon reply.
	FlightKey string `protobuf:"bytes,14,opt,name=flight_key,json=flightKey,proto3" json:"flight_key,omitempty"`
	// bounce_count is a counter that is increased every time the message is bounced back. This is used to prevent
	// messages with no route from continuously being bounced from network instance to network instance.
	BounceCount uint32 `protobuf:"varint,15,opt,name=bounce_count,json=bounceCount,proto3" json:"bounce_count,omitempty"`
	// target is the routing target service to route this transaction to.
	Target string `protobuf:"bytes,16,opt,name=target,proto3" json:"target,omitempty"`
	// status is a message status field used to communicate system status from service to service.
	Status string `protobuf:"bytes,17,opt,name=status,proto3" json:"status,omitempty"`
	// message_type is a convenience field which specifies the message type. This may not always be populated.
	MessageType string `protobuf:"bytes,18,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	// breadcrumbs is a map of service names/steps and timestamps. This is used for metrics and troubleshooting, as it
	// contains timestamps of the transaction life-cycle.
	Breadcrumbs map[string]uint64 `protobuf:"bytes,19,rep,name=breadcrumbs,proto3" json:"breadcrumbs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// processing_availability_zone will specify the availability zone used to process this transaction. This may or may
	// not be different than the proxy availability zone.
	ProcessingAvailabilityZone string `protobuf:"bytes,20,opt,name=processing_availability_zone,json=processingAvailabilityZone,proto3" json:"processing_availability_zone,omitempty"`
	// source_client_profile_identifier is the original source client id.
	SourceClientProfileIdentifier string `protobuf:"bytes,21,opt,name=source_client_profile_identifier,json=sourceClientProfileIdentifier,proto3" json:"source_client_profile_identifier,omitempty"`
	// port_unique_prefix_text is the unique client id prefix based on port information
	PortUniquePrefixText string `protobuf:"bytes,22,opt,name=port_unique_prefix_text,json=portUniquePrefixText,proto3" json:"port_unique_prefix_text,omitempty"`
	// target_profile_unique_prefix is the unique prefix of the target client based on port information
	TargetProfileUniquePrefix string `protobuf:"bytes,23,opt,name=target_profile_unique_prefix,json=targetProfileUniquePrefix,proto3" json:"target_profile_unique_prefix,omitempty"`
	// workflow_indicator will specify the old/new workflow to be used for processing an issuer response
	WorkflowIndicator string `protobuf:"bytes,24,opt,name=workflow_indicator,json=workflowIndicator,proto3" json:"workflow_indicator,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_shadow_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_shadow_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_proto_shadow_proto_rawDescGZIP(), []int{0}
}

func (x *Transaction) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *Transaction) GetMessageSourceName() string {
	if x != nil {
		return x.MessageSourceName
	}
	return ""
}

func (x *Transaction) GetUutid() []string {
	if x != nil {
		return x.Uutid
	}
	return nil
}

func (x *Transaction) GetSourceServiceName() string {
	if x != nil {
		return x.SourceServiceName
	}
	return ""
}

func (x *Transaction) GetClientProfileIdentifier() string {
	if x != nil {
		return x.ClientProfileIdentifier
	}
	return ""
}

func (x *Transaction) GetPortNumber() uint32 {
	if x != nil {
		return x.PortNumber
	}
	return 0
}

func (x *Transaction) GetSessionIdentifier() string {
	if x != nil {
		return x.SessionIdentifier
	}
	return ""
}

func (x *Transaction) GetMessageSpecificationFormatName() string {
	if x != nil {
		return x.MessageSpecificationFormatName
	}
	return ""
}

func (x *Transaction) GetProxyAvailabilityZone() string {
	if x != nil {
		return x.ProxyAvailabilityZone
	}
	return ""
}

func (x *Transaction) GetEventTimestamp() uint64 {
	if x != nil {
		return x.EventTimestamp
	}
	return 0
}

func (x *Transaction) GetEmbeddedHeaderLength() uint32 {
	if x != nil {
		return x.EmbeddedHeaderLength
	}
	return 0
}

func (x *Transaction) GetHttpHeaderText() map[string]string {
	if x != nil {
		return x.HttpHeaderText
	}
	return nil
}

func (x *Transaction) GetProxyFqdnText() string {
	if x != nil {
		return x.ProxyFqdnText
	}
	return ""
}

func (x *Transaction) GetFlightKey() string {
	if x != nil {
		return x.FlightKey
	}
	return ""
}

func (x *Transaction) GetBounceCount() uint32 {
	if x != nil {
		return x.BounceCount
	}
	return 0
}

func (x *Transaction) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *Transaction) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Transaction) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *Transaction) GetBreadcrumbs() map[string]uint64 {
	if x != nil {
		return x.Breadcrumbs
	}
	return nil
}

func (x *Transaction) GetProcessingAvailabilityZone() string {
	if x != nil {
		return x.ProcessingAvailabilityZone
	}
	return ""
}

func (x *Transaction) GetSourceClientProfileIdentifier() string {
	if x != nil {
		return x.SourceClientProfileIdentifier
	}
	return ""
}

func (x *Transaction) GetPortUniquePrefixText() string {
	if x != nil {
		return x.PortUniquePrefixText
	}
	return ""
}

func (x *Transaction) GetTargetProfileUniquePrefix() string {
	if x != nil {
		return x.TargetProfileUniquePrefix
	}
	return ""
}

func (x *Transaction) GetWorkflowIndicator() string {
	if x != nil {
		return x.WorkflowIndicator
	}
	return ""
}

type Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code       int32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	MappedData map[string]string `protobuf:"bytes,2,rep,name=mapped_data,json=mappedData,proto3" json:"mapped_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Data) Reset() {
	*x = Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_shadow_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_proto_shadow_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_proto_shadow_proto_rawDescGZIP(), []int{1}
}

func (x *Data) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Data) GetMappedData() map[string]string {
	if x != nil {
		return x.MappedData
	}
	return nil
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode        int32  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	StatusDescription string `protobuf:"bytes,2,opt,name=status_description,json=statusDescription,proto3" json:"status_description,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_shadow_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_proto_shadow_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_proto_shadow_proto_rawDescGZIP(), []int{2}
}

func (x *Status) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *Status) GetStatusDescription() string {
	if x != nil {
		return x.StatusDescription
	}
	return ""
}

type CSMEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event string       `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	Txn   *Transaction `protobuf:"bytes,2,opt,name=txn,proto3" json:"txn,omitempty"`
}

func (x *CSMEvent) Reset() {
	*x = CSMEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_shadow_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSMEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSMEvent) ProtoMessage() {}

func (x *CSMEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_shadow_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSMEvent.ProtoReflect.Descriptor instead.
func (*CSMEvent) Descriptor() ([]byte, []int) {
	return file_proto_shadow_proto_rawDescGZIP(), []int{3}
}

func (x *CSMEvent) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *CSMEvent) GetTxn() *Transaction {
	if x != nil {
		return x.Txn
	}
	return nil
}

var File_proto_shadow_proto protoreflect.FileDescriptor

var file_proto_shadow_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x6d, 0x73, 0x67, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x92, 0x0a, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x75, 0x75, 0x74, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x49, 0x0a, 0x21, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a,
	0x17, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x34,
	0x0a, 0x16, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14,
	0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x4e, 0x0a, 0x10, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x48, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x68, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x66, 0x71,
	0x64, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x46, 0x71, 0x64, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x62,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x43, 0x0a, 0x0b, 0x62, 0x72, 0x65, 0x61, 0x64, 0x63, 0x72, 0x75, 0x6d, 0x62, 0x73,
	0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x72, 0x65, 0x61, 0x64, 0x63, 0x72,
	0x75, 0x6d, 0x62, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x62, 0x72, 0x65, 0x61, 0x64,
	0x63, 0x72, 0x75, 0x6d, 0x62, 0x73, 0x12, 0x40, 0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x47, 0x0a, 0x20, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x54, 0x65, 0x78, 0x74, 0x12, 0x3f, 0x0a, 0x1c, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x2d, 0x0a, 0x12, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x41, 0x0a, 0x13, 0x48, 0x74, 0x74, 0x70,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x42,
	0x72, 0x65, 0x61, 0x64, 0x63, 0x72, 0x75, 0x6d, 0x62, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x95, 0x01, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x1a, 0x3d, 0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x58, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2d,
	0x0a, 0x12, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x44, 0x0a,
	0x08, 0x43, 0x53, 0x4d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x22, 0x0a, 0x03, 0x74, 0x78, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d,
	0x73, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03,
	0x74, 0x78, 0x6e, 0x32, 0x80, 0x01, 0x0a, 0x06, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x33,
	0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x28, 0x01, 0x12, 0x21, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x09,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x0b, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x06, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x12, 0x09, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x09, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x32, 0x3b, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f,
	0x31, 0x12, 0x30, 0x0a, 0x04, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x32, 0x3b, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x32, 0x12, 0x30,
	0x0a, 0x04, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x32, 0x3b, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x33, 0x12, 0x30, 0x0a, 0x04, 0x53,
	0x65, 0x6e, 0x64, 0x12, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x3b, 0x0a,
	0x07, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x34, 0x12, 0x30, 0x0a, 0x04, 0x53, 0x65, 0x6e, 0x64,
	0x12, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x3b, 0x0a, 0x07, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x5f, 0x35, 0x12, 0x30, 0x0a, 0x04, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x10, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x3b, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x5f, 0x36, 0x12, 0x30, 0x0a, 0x04, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x10, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x32, 0x3b, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x37, 0x12,
	0x30, 0x0a, 0x04, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x32, 0x3b, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x38, 0x12, 0x30, 0x0a, 0x04,
	0x53, 0x65, 0x6e, 0x64, 0x12, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x3b,
	0x0a, 0x07, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x39, 0x12, 0x30, 0x0a, 0x04, 0x53, 0x65, 0x6e,
	0x64, 0x12, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x3c, 0x0a, 0x08, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x5f, 0x31, 0x30, 0x12, 0x30, 0x0a, 0x04, 0x53, 0x65, 0x6e, 0x64, 0x12,
	0x10, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x3c, 0x0a, 0x08, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x5f, 0x31, 0x31, 0x12, 0x30, 0x0a, 0x04, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x10, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x3c, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x5f, 0x31, 0x32, 0x12, 0x30, 0x0a, 0x04, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x10, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x3c, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x31,
	0x33, 0x12, 0x30, 0x0a, 0x04, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x32, 0x3c, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x31, 0x34, 0x12,
	0x30, 0x0a, 0x04, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x32, 0x3c, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x31, 0x35, 0x12, 0x30, 0x0a,
	0x04, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32,
	0x3c, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x31, 0x36, 0x12, 0x30, 0x0a, 0x04, 0x53,
	0x65, 0x6e, 0x64, 0x12, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x36, 0x0a,
	0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x2d, 0x0a, 0x0e, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x09, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x32, 0x3b, 0x0a, 0x07, 0x49, 0x50, 0x43, 0x31, 0x4e, 0x4f, 0x53,
	0x12, 0x30, 0x0a, 0x04, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x32, 0x3b, 0x0a, 0x07, 0x49, 0x50, 0x43, 0x32, 0x4e, 0x4f, 0x53, 0x12, 0x30, 0x0a,
	0x04, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32,
	0x3d, 0x0a, 0x09, 0x57, 0x65, 0x62, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x04,
	0x53, 0x65, 0x6e, 0x64, 0x12, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x3c,
	0x0a, 0x08, 0x57, 0x65, 0x62, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x30, 0x0a, 0x04, 0x53, 0x65,
	0x6e, 0x64, 0x12, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x3e, 0x0a, 0x0a,
	0x57, 0x65, 0x62, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x31, 0x12, 0x30, 0x0a, 0x04, 0x53, 0x65,
	0x6e, 0x64, 0x12, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x3e, 0x0a, 0x0a,
	0x57, 0x65, 0x62, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x32, 0x12, 0x30, 0x0a, 0x04, 0x53, 0x65,
	0x6e, 0x64, 0x12, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x3e, 0x0a, 0x0a,
	0x57, 0x65, 0x62, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x33, 0x12, 0x30, 0x0a, 0x04, 0x53, 0x65,
	0x6e, 0x64, 0x12, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x3e, 0x0a, 0x0a,
	0x57, 0x65, 0x62, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x34, 0x12, 0x30, 0x0a, 0x04, 0x53, 0x65,
	0x6e, 0x64, 0x12, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x3e, 0x0a, 0x0a,
	0x57, 0x65, 0x62, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x35, 0x12, 0x30, 0x0a, 0x04, 0x53, 0x65,
	0x6e, 0x64, 0x12, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x3e, 0x0a, 0x0a,
	0x57, 0x65, 0x62, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x36, 0x12, 0x30, 0x0a, 0x04, 0x53, 0x65,
	0x6e, 0x64, 0x12, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x3e, 0x0a, 0x0a,
	0x57, 0x65, 0x62, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x37, 0x12, 0x30, 0x0a, 0x04, 0x53, 0x65,
	0x6e, 0x64, 0x12, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x3e, 0x0a, 0x0a,
	0x57, 0x65, 0x62, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x38, 0x12, 0x30, 0x0a, 0x04, 0x53, 0x65,
	0x6e, 0x64, 0x12, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x3e, 0x0a, 0x0a,
	0x57, 0x65, 0x62, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x39, 0x12, 0x30, 0x0a, 0x04, 0x53, 0x65,
	0x6e, 0x64, 0x12, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x3f, 0x0a, 0x0b,
	0x57, 0x65, 0x62, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x31, 0x30, 0x12, 0x30, 0x0a, 0x04, 0x53,
	0x65, 0x6e, 0x64, 0x12, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0xac, 0x02,
	0x0a, 0x0a, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x04,
	0x53, 0x65, 0x6e, 0x64, 0x12, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x33,
	0x0a, 0x07, 0x4e, 0x6f, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x65, 0x6e, 0x64,
	0x12, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x14, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x73, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x12, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x15,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x53, 0x4d,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0d, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x53, 0x4d, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x09, 0x5a, 0x07,
	0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_shadow_proto_rawDescOnce sync.Once
	file_proto_shadow_proto_rawDescData = file_proto_shadow_proto_rawDesc
)

func file_proto_shadow_proto_rawDescGZIP() []byte {
	file_proto_shadow_proto_rawDescOnce.Do(func() {
		file_proto_shadow_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_shadow_proto_rawDescData)
	})
	return file_proto_shadow_proto_rawDescData
}

var file_proto_shadow_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_proto_shadow_proto_goTypes = []interface{}{
	(*Transaction)(nil),   // 0: msg.Transaction
	(*Data)(nil),          // 1: msg.Data
	(*Status)(nil),        // 2: msg.Status
	(*CSMEvent)(nil),      // 3: msg.CSMEvent
	nil,                   // 4: msg.Transaction.HttpHeaderTextEntry
	nil,                   // 5: msg.Transaction.BreadcrumbsEntry
	nil,                   // 6: msg.Data.MappedDataEntry
	(*emptypb.Empty)(nil), // 7: google.protobuf.Empty
}
var file_proto_shadow_proto_depIdxs = []int32{
	4,  // 0: msg.Transaction.http_header_text:type_name -> msg.Transaction.HttpHeaderTextEntry
	5,  // 1: msg.Transaction.breadcrumbs:type_name -> msg.Transaction.BreadcrumbsEntry
	6,  // 2: msg.Data.mapped_data:type_name -> msg.Data.MappedDataEntry
	0,  // 3: msg.CSMEvent.txn:type_name -> msg.Transaction
	0,  // 4: msg.Switch.Route:input_type -> msg.Transaction
	1,  // 5: msg.Switch.Command:input_type -> msg.Data
	1,  // 6: msg.Switch.Lookup:input_type -> msg.Data
	0,  // 7: msg.Proxy_1.Send:input_type -> msg.Transaction
	0,  // 8: msg.Proxy_2.Send:input_type -> msg.Transaction
	0,  // 9: msg.Proxy_3.Send:input_type -> msg.Transaction
	0,  // 10: msg.Proxy_4.Send:input_type -> msg.Transaction
	0,  // 11: msg.Proxy_5.Send:input_type -> msg.Transaction
	0,  // 12: msg.Proxy_6.Send:input_type -> msg.Transaction
	0,  // 13: msg.Proxy_7.Send:input_type -> msg.Transaction
	0,  // 14: msg.Proxy_8.Send:input_type -> msg.Transaction
	0,  // 15: msg.Proxy_9.Send:input_type -> msg.Transaction
	0,  // 16: msg.Proxy_10.Send:input_type -> msg.Transaction
	0,  // 17: msg.Proxy_11.Send:input_type -> msg.Transaction
	0,  // 18: msg.Proxy_12.Send:input_type -> msg.Transaction
	0,  // 19: msg.Proxy_13.Send:input_type -> msg.Transaction
	0,  // 20: msg.Proxy_14.Send:input_type -> msg.Transaction
	0,  // 21: msg.Proxy_15.Send:input_type -> msg.Transaction
	0,  // 22: msg.Proxy_16.Send:input_type -> msg.Transaction
	0,  // 23: msg.Proxy.CoreRouterSend:input_type -> msg.Transaction
	0,  // 24: msg.IPC1NOS.Send:input_type -> msg.Transaction
	0,  // 25: msg.IPC2NOS.Send:input_type -> msg.Transaction
	0,  // 26: msg.WebClient.Send:input_type -> msg.Transaction
	0,  // 27: msg.WebProxy.Send:input_type -> msg.Transaction
	0,  // 28: msg.WebProxy_1.Send:input_type -> msg.Transaction
	0,  // 29: msg.WebProxy_2.Send:input_type -> msg.Transaction
	0,  // 30: msg.WebProxy_3.Send:input_type -> msg.Transaction
	0,  // 31: msg.WebProxy_4.Send:input_type -> msg.Transaction
	0,  // 32: msg.WebProxy_5.Send:input_type -> msg.Transaction
	0,  // 33: msg.WebProxy_6.Send:input_type -> msg.Transaction
	0,  // 34: msg.WebProxy_7.Send:input_type -> msg.Transaction
	0,  // 35: msg.WebProxy_8.Send:input_type -> msg.Transaction
	0,  // 36: msg.WebProxy_9.Send:input_type -> msg.Transaction
	0,  // 37: msg.WebProxy_10.Send:input_type -> msg.Transaction
	0,  // 38: msg.CoreRouter.Send:input_type -> msg.Transaction
	0,  // 39: msg.CoreRouter.NosSend:input_type -> msg.Transaction
	0,  // 40: msg.CoreRouter.ProxySend:input_type -> msg.Transaction
	0,  // 41: msg.CoreRouter.ProcessMsgFromRemote:input_type -> msg.Transaction
	3,  // 42: msg.CoreRouter.ProcessRemoteCSMEvent:input_type -> msg.CSMEvent
	7,  // 43: msg.Switch.Route:output_type -> google.protobuf.Empty
	2,  // 44: msg.Switch.Command:output_type -> msg.Status
	1,  // 45: msg.Switch.Lookup:output_type -> msg.Data
	7,  // 46: msg.Proxy_1.Send:output_type -> google.protobuf.Empty
	7,  // 47: msg.Proxy_2.Send:output_type -> google.protobuf.Empty
	7,  // 48: msg.Proxy_3.Send:output_type -> google.protobuf.Empty
	7,  // 49: msg.Proxy_4.Send:output_type -> google.protobuf.Empty
	7,  // 50: msg.Proxy_5.Send:output_type -> google.protobuf.Empty
	7,  // 51: msg.Proxy_6.Send:output_type -> google.protobuf.Empty
	7,  // 52: msg.Proxy_7.Send:output_type -> google.protobuf.Empty
	7,  // 53: msg.Proxy_8.Send:output_type -> google.protobuf.Empty
	7,  // 54: msg.Proxy_9.Send:output_type -> google.protobuf.Empty
	7,  // 55: msg.Proxy_10.Send:output_type -> google.protobuf.Empty
	7,  // 56: msg.Proxy_11.Send:output_type -> google.protobuf.Empty
	7,  // 57: msg.Proxy_12.Send:output_type -> google.protobuf.Empty
	7,  // 58: msg.Proxy_13.Send:output_type -> google.protobuf.Empty
	7,  // 59: msg.Proxy_14.Send:output_type -> google.protobuf.Empty
	7,  // 60: msg.Proxy_15.Send:output_type -> google.protobuf.Empty
	7,  // 61: msg.Proxy_16.Send:output_type -> google.protobuf.Empty
	1,  // 62: msg.Proxy.CoreRouterSend:output_type -> msg.Data
	7,  // 63: msg.IPC1NOS.Send:output_type -> google.protobuf.Empty
	7,  // 64: msg.IPC2NOS.Send:output_type -> google.protobuf.Empty
	7,  // 65: msg.WebClient.Send:output_type -> google.protobuf.Empty
	7,  // 66: msg.WebProxy.Send:output_type -> google.protobuf.Empty
	7,  // 67: msg.WebProxy_1.Send:output_type -> google.protobuf.Empty
	7,  // 68: msg.WebProxy_2.Send:output_type -> google.protobuf.Empty
	7,  // 69: msg.WebProxy_3.Send:output_type -> google.protobuf.Empty
	7,  // 70: msg.WebProxy_4.Send:output_type -> google.protobuf.Empty
	7,  // 71: msg.WebProxy_5.Send:output_type -> google.protobuf.Empty
	7,  // 72: msg.WebProxy_6.Send:output_type -> google.protobuf.Empty
	7,  // 73: msg.WebProxy_7.Send:output_type -> google.protobuf.Empty
	7,  // 74: msg.WebProxy_8.Send:output_type -> google.protobuf.Empty
	7,  // 75: msg.WebProxy_9.Send:output_type -> google.protobuf.Empty
	7,  // 76: msg.WebProxy_10.Send:output_type -> google.protobuf.Empty
	7,  // 77: msg.CoreRouter.Send:output_type -> google.protobuf.Empty
	7,  // 78: msg.CoreRouter.NosSend:output_type -> google.protobuf.Empty
	7,  // 79: msg.CoreRouter.ProxySend:output_type -> google.protobuf.Empty
	7,  // 80: msg.CoreRouter.ProcessMsgFromRemote:output_type -> google.protobuf.Empty
	7,  // 81: msg.CoreRouter.ProcessRemoteCSMEvent:output_type -> google.protobuf.Empty
	43, // [43:82] is the sub-list for method output_type
	4,  // [4:43] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_proto_shadow_proto_init() }
func file_proto_shadow_proto_init() {
	if File_proto_shadow_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_shadow_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_shadow_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_shadow_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_shadow_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSMEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_shadow_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   33,
		},
		GoTypes:           file_proto_shadow_proto_goTypes,
		DependencyIndexes: file_proto_shadow_proto_depIdxs,
		MessageInfos:      file_proto_shadow_proto_msgTypes,
	}.Build()
	File_proto_shadow_proto = out.File
	file_proto_shadow_proto_rawDesc = nil
	file_proto_shadow_proto_goTypes = nil
	file_proto_shadow_proto_depIdxs = nil
}
