// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.2
// source: proto/presentation.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DetailScreenType int32

const (
	DetailScreenType_DETAIL_CHANNEL  DetailScreenType = 0
	DetailScreenType_DETAIL_OFFERING DetailScreenType = 1
	DetailScreenType_DETAIL_SERIES   DetailScreenType = 2
)

// Enum value maps for DetailScreenType.
var (
	DetailScreenType_name = map[int32]string{
		0: "DETAIL_CHANNEL",
		1: "DETAIL_OFFERING",
		2: "DETAIL_SERIES",
	}
	DetailScreenType_value = map[string]int32{
		"DETAIL_CHANNEL":  0,
		"DETAIL_OFFERING": 1,
		"DETAIL_SERIES":   2,
	}
)

func (x DetailScreenType) Enum() *DetailScreenType {
	p := new(DetailScreenType)
	*p = x
	return p
}

func (x DetailScreenType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DetailScreenType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_presentation_proto_enumTypes[0].Descriptor()
}

func (DetailScreenType) Type() protoreflect.EnumType {
	return &file_proto_presentation_proto_enumTypes[0]
}

func (x DetailScreenType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DetailScreenType.Descriptor instead.
func (DetailScreenType) EnumDescriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{0}
}

type ContextType int32

const (
	ContextType_ALL     ContextType = 0
	ContextType_DVR     ContextType = 1
	ContextType_CHANNEL ContextType = 2
)

// Enum value maps for ContextType.
var (
	ContextType_name = map[int32]string{
		0: "ALL",
		1: "DVR",
		2: "CHANNEL",
	}
	ContextType_value = map[string]int32{
		"ALL":     0,
		"DVR":     1,
		"CHANNEL": 2,
	}
)

func (x ContextType) Enum() *ContextType {
	p := new(ContextType)
	*p = x
	return p
}

func (x ContextType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContextType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_presentation_proto_enumTypes[1].Descriptor()
}

func (ContextType) Type() protoreflect.EnumType {
	return &file_proto_presentation_proto_enumTypes[1]
}

func (x ContextType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContextType.Descriptor instead.
func (ContextType) EnumDescriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{1}
}

type Position int32

const (
	Position_BOTTOM_LEFT       Position = 0
	Position_BOTTOM_RIGHT      Position = 1
	Position_TOP_LEFT          Position = 2
	Position_TOP_RIGHT         Position = 3
	Position_BOTTOM_CENTER     Position = 4
	Position_CLIENT_CONTROLLED Position = 5
)

// Enum value maps for Position.
var (
	Position_name = map[int32]string{
		0: "BOTTOM_LEFT",
		1: "BOTTOM_RIGHT",
		2: "TOP_LEFT",
		3: "TOP_RIGHT",
		4: "BOTTOM_CENTER",
		5: "CLIENT_CONTROLLED",
	}
	Position_value = map[string]int32{
		"BOTTOM_LEFT":       0,
		"BOTTOM_RIGHT":      1,
		"TOP_LEFT":          2,
		"TOP_RIGHT":         3,
		"BOTTOM_CENTER":     4,
		"CLIENT_CONTROLLED": 5,
	}
)

func (x Position) Enum() *Position {
	p := new(Position)
	*p = x
	return p
}

func (x Position) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Position) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_presentation_proto_enumTypes[2].Descriptor()
}

func (Position) Type() protoreflect.EnumType {
	return &file_proto_presentation_proto_enumTypes[2]
}

func (x Position) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Position.Descriptor instead.
func (Position) EnumDescriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{2}
}

type LookupRecGuidRequest_RecType int32

const (
	LookupRecGuidRequest_BOTH LookupRecGuidRequest_RecType = 0
	LookupRecGuidRequest_RS   LookupRecGuidRequest_RecType = 1
	LookupRecGuidRequest_LS   LookupRecGuidRequest_RecType = 2
)

// Enum value maps for LookupRecGuidRequest_RecType.
var (
	LookupRecGuidRequest_RecType_name = map[int32]string{
		0: "BOTH",
		1: "RS",
		2: "LS",
	}
	LookupRecGuidRequest_RecType_value = map[string]int32{
		"BOTH": 0,
		"RS":   1,
		"LS":   2,
	}
)

func (x LookupRecGuidRequest_RecType) Enum() *LookupRecGuidRequest_RecType {
	p := new(LookupRecGuidRequest_RecType)
	*p = x
	return p
}

func (x LookupRecGuidRequest_RecType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LookupRecGuidRequest_RecType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_presentation_proto_enumTypes[3].Descriptor()
}

func (LookupRecGuidRequest_RecType) Type() protoreflect.EnumType {
	return &file_proto_presentation_proto_enumTypes[3]
}

func (x LookupRecGuidRequest_RecType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LookupRecGuidRequest_RecType.Descriptor instead.
func (LookupRecGuidRequest_RecType) EnumDescriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{2, 0}
}

type LookupRuleGuidRequest_RuleType int32

const (
	LookupRuleGuidRequest_BOTH LookupRuleGuidRequest_RuleType = 0
	LookupRuleGuidRequest_RS   LookupRuleGuidRequest_RuleType = 1
	LookupRuleGuidRequest_LS   LookupRuleGuidRequest_RuleType = 2
)

// Enum value maps for LookupRuleGuidRequest_RuleType.
var (
	LookupRuleGuidRequest_RuleType_name = map[int32]string{
		0: "BOTH",
		1: "RS",
		2: "LS",
	}
	LookupRuleGuidRequest_RuleType_value = map[string]int32{
		"BOTH": 0,
		"RS":   1,
		"LS":   2,
	}
)

func (x LookupRuleGuidRequest_RuleType) Enum() *LookupRuleGuidRequest_RuleType {
	p := new(LookupRuleGuidRequest_RuleType)
	*p = x
	return p
}

func (x LookupRuleGuidRequest_RuleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LookupRuleGuidRequest_RuleType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_presentation_proto_enumTypes[4].Descriptor()
}

func (LookupRuleGuidRequest_RuleType) Type() protoreflect.EnumType {
	return &file_proto_presentation_proto_enumTypes[4]
}

func (x LookupRuleGuidRequest_RuleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LookupRuleGuidRequest_RuleType.Descriptor instead.
func (LookupRuleGuidRequest_RuleType) EnumDescriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{4, 0}
}

type DeepLinkListQuery_TileType int32

const (
	DeepLinkListQuery_TILE_TYPE_PROGRAM DeepLinkListQuery_TileType = 0
	DeepLinkListQuery_TILE_TYPE_ASSET   DeepLinkListQuery_TileType = 1
)

// Enum value maps for DeepLinkListQuery_TileType.
var (
	DeepLinkListQuery_TileType_name = map[int32]string{
		0: "TILE_TYPE_PROGRAM",
		1: "TILE_TYPE_ASSET",
	}
	DeepLinkListQuery_TileType_value = map[string]int32{
		"TILE_TYPE_PROGRAM": 0,
		"TILE_TYPE_ASSET":   1,
	}
)

func (x DeepLinkListQuery_TileType) Enum() *DeepLinkListQuery_TileType {
	p := new(DeepLinkListQuery_TileType)
	*p = x
	return p
}

func (x DeepLinkListQuery_TileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeepLinkListQuery_TileType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_presentation_proto_enumTypes[5].Descriptor()
}

func (DeepLinkListQuery_TileType) Type() protoreflect.EnumType {
	return &file_proto_presentation_proto_enumTypes[5]
}

func (x DeepLinkListQuery_TileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeepLinkListQuery_TileType.Descriptor instead.
func (DeepLinkListQuery_TileType) EnumDescriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{12, 0}
}

type DetailContent_DetailContentType int32

const (
	DetailContent_TILE   DetailContent_DetailContentType = 0
	DetailContent_RIBBON DetailContent_DetailContentType = 1
)

// Enum value maps for DetailContent_DetailContentType.
var (
	DetailContent_DetailContentType_name = map[int32]string{
		0: "TILE",
		1: "RIBBON",
	}
	DetailContent_DetailContentType_value = map[string]int32{
		"TILE":   0,
		"RIBBON": 1,
	}
)

func (x DetailContent_DetailContentType) Enum() *DetailContent_DetailContentType {
	p := new(DetailContent_DetailContentType)
	*p = x
	return p
}

func (x DetailContent_DetailContentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DetailContent_DetailContentType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_presentation_proto_enumTypes[6].Descriptor()
}

func (DetailContent_DetailContentType) Type() protoreflect.EnumType {
	return &file_proto_presentation_proto_enumTypes[6]
}

func (x DetailContent_DetailContentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DetailContent_DetailContentType.Descriptor instead.
func (DetailContent_DetailContentType) EnumDescriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{16, 0}
}

type DetailActions_DetailActionsType int32

const (
	DetailActions_CHANNEL  DetailActions_DetailActionsType = 0
	DetailActions_STANDARD DetailActions_DetailActionsType = 1
)

// Enum value maps for DetailActions_DetailActionsType.
var (
	DetailActions_DetailActionsType_name = map[int32]string{
		0: "CHANNEL",
		1: "STANDARD",
	}
	DetailActions_DetailActionsType_value = map[string]int32{
		"CHANNEL":  0,
		"STANDARD": 1,
	}
)

func (x DetailActions_DetailActionsType) Enum() *DetailActions_DetailActionsType {
	p := new(DetailActions_DetailActionsType)
	*p = x
	return p
}

func (x DetailActions_DetailActionsType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DetailActions_DetailActionsType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_presentation_proto_enumTypes[7].Descriptor()
}

func (DetailActions_DetailActionsType) Type() protoreflect.EnumType {
	return &file_proto_presentation_proto_enumTypes[7]
}

func (x DetailActions_DetailActionsType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DetailActions_DetailActionsType.Descriptor instead.
func (DetailActions_DetailActionsType) EnumDescriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{19, 0}
}

type Screen_Format int32

const (
	Screen_STACKED                  Screen_Format = 0
	Screen_TABBED                   Screen_Format = 1
	Screen_SEARCH                   Screen_Format = 2
	Screen_MANAGE_HISTORY           Screen_Format = 3
	Screen_GRID_GUIDE               Screen_Format = 4
	Screen_CHANNEL_GUIDE            Screen_Format = 5
	Screen_MANAGE_FAVORITE_CHANNELS Screen_Format = 6
	Screen_DVR                      Screen_Format = 7
	Screen_LSDVR_SETTINGS           Screen_Format = 8
	Screen_RSDVR_SETTINGS           Screen_Format = 9
	Screen_PROMOTION                Screen_Format = 10
	Screen_GUIDE                    Screen_Format = 11
	Screen_MINI_GUIDE_CHANNELS      Screen_Format = 12
	Screen_LG_LAUNCHER              Screen_Format = 13
)

// Enum value maps for Screen_Format.
var (
	Screen_Format_name = map[int32]string{
		0:  "STACKED",
		1:  "TABBED",
		2:  "SEARCH",
		3:  "MANAGE_HISTORY",
		4:  "GRID_GUIDE",
		5:  "CHANNEL_GUIDE",
		6:  "MANAGE_FAVORITE_CHANNELS",
		7:  "DVR",
		8:  "LSDVR_SETTINGS",
		9:  "RSDVR_SETTINGS",
		10: "PROMOTION",
		11: "GUIDE",
		12: "MINI_GUIDE_CHANNELS",
		13: "LG_LAUNCHER",
	}
	Screen_Format_value = map[string]int32{
		"STACKED":                  0,
		"TABBED":                   1,
		"SEARCH":                   2,
		"MANAGE_HISTORY":           3,
		"GRID_GUIDE":               4,
		"CHANNEL_GUIDE":            5,
		"MANAGE_FAVORITE_CHANNELS": 6,
		"DVR":                      7,
		"LSDVR_SETTINGS":           8,
		"RSDVR_SETTINGS":           9,
		"PROMOTION":                10,
		"GUIDE":                    11,
		"MINI_GUIDE_CHANNELS":      12,
		"LG_LAUNCHER":              13,
	}
)

func (x Screen_Format) Enum() *Screen_Format {
	p := new(Screen_Format)
	*p = x
	return p
}

func (x Screen_Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Screen_Format) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_presentation_proto_enumTypes[8].Descriptor()
}

func (Screen_Format) Type() protoreflect.EnumType {
	return &file_proto_presentation_proto_enumTypes[8]
}

func (x Screen_Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Screen_Format.Descriptor instead.
func (Screen_Format) EnumDescriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{23, 0}
}

type Tab_Format int32

const (
	Tab_TAB           Tab_Format = 0
	Tab_SUB_TAB       Tab_Format = 1
	Tab_PROFILE_TAB   Tab_Format = 2
	Tab_COMPOSITE_TAB Tab_Format = 3
)

// Enum value maps for Tab_Format.
var (
	Tab_Format_name = map[int32]string{
		0: "TAB",
		1: "SUB_TAB",
		2: "PROFILE_TAB",
		3: "COMPOSITE_TAB",
	}
	Tab_Format_value = map[string]int32{
		"TAB":           0,
		"SUB_TAB":       1,
		"PROFILE_TAB":   2,
		"COMPOSITE_TAB": 3,
	}
)

func (x Tab_Format) Enum() *Tab_Format {
	p := new(Tab_Format)
	*p = x
	return p
}

func (x Tab_Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Tab_Format) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_presentation_proto_enumTypes[9].Descriptor()
}

func (Tab_Format) Type() protoreflect.EnumType {
	return &file_proto_presentation_proto_enumTypes[9]
}

func (x Tab_Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Tab_Format.Descriptor instead.
func (Tab_Format) EnumDescriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{26, 0}
}

type Tab_State int32

const (
	Tab_DISABLED Tab_State = 0
	Tab_ENABLED  Tab_State = 1
)

// Enum value maps for Tab_State.
var (
	Tab_State_name = map[int32]string{
		0: "DISABLED",
		1: "ENABLED",
	}
	Tab_State_value = map[string]int32{
		"DISABLED": 0,
		"ENABLED":  1,
	}
)

func (x Tab_State) Enum() *Tab_State {
	p := new(Tab_State)
	*p = x
	return p
}

func (x Tab_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Tab_State) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_presentation_proto_enumTypes[10].Descriptor()
}

func (Tab_State) Type() protoreflect.EnumType {
	return &file_proto_presentation_proto_enumTypes[10]
}

func (x Tab_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Tab_State.Descriptor instead.
func (Tab_State) EnumDescriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{26, 1}
}

type Ribbon_Format int32

const (
	Ribbon_RIBBON                         Ribbon_Format = 0
	Ribbon_GRID                           Ribbon_Format = 1
	Ribbon_MY_CHANNELS                    Ribbon_Format = 2
	Ribbon_SPOTLIGHT_STANDARD             Ribbon_Format = 3
	Ribbon_SPOTLIGHT_MIRRORED             Ribbon_Format = 4
	Ribbon_SEASON                         Ribbon_Format = 5
	Ribbon_VERTICAL                       Ribbon_Format = 6
	Ribbon_SPOTLIGHT                      Ribbon_Format = 7
	Ribbon_VERTICAL_CLOSABLE              Ribbon_Format = 8
	Ribbon_GRID_GUIDE_VERTICAL_CHANNELS   Ribbon_Format = 9
	Ribbon_GRID_GUIDE_SCHEDULE            Ribbon_Format = 10
	Ribbon_MARQUEE                        Ribbon_Format = 11
	Ribbon_MINI_GUIDE_VERTICAL_CHANNELS   Ribbon_Format = 12
	Ribbon_MINI_VERTICAL_CHANNEL_SCHEDULE Ribbon_Format = 13
	Ribbon_PLAIN_CHANNELS                 Ribbon_Format = 14
	Ribbon_LG_LAUNCHER                    Ribbon_Format = 15
)

// Enum value maps for Ribbon_Format.
var (
	Ribbon_Format_name = map[int32]string{
		0:  "RIBBON",
		1:  "GRID",
		2:  "MY_CHANNELS",
		3:  "SPOTLIGHT_STANDARD",
		4:  "SPOTLIGHT_MIRRORED",
		5:  "SEASON",
		6:  "VERTICAL",
		7:  "SPOTLIGHT",
		8:  "VERTICAL_CLOSABLE",
		9:  "GRID_GUIDE_VERTICAL_CHANNELS",
		10: "GRID_GUIDE_SCHEDULE",
		11: "MARQUEE",
		12: "MINI_GUIDE_VERTICAL_CHANNELS",
		13: "MINI_VERTICAL_CHANNEL_SCHEDULE",
		14: "PLAIN_CHANNELS",
		15: "LG_LAUNCHER",
	}
	Ribbon_Format_value = map[string]int32{
		"RIBBON":                         0,
		"GRID":                           1,
		"MY_CHANNELS":                    2,
		"SPOTLIGHT_STANDARD":             3,
		"SPOTLIGHT_MIRRORED":             4,
		"SEASON":                         5,
		"VERTICAL":                       6,
		"SPOTLIGHT":                      7,
		"VERTICAL_CLOSABLE":              8,
		"GRID_GUIDE_VERTICAL_CHANNELS":   9,
		"GRID_GUIDE_SCHEDULE":            10,
		"MARQUEE":                        11,
		"MINI_GUIDE_VERTICAL_CHANNELS":   12,
		"MINI_VERTICAL_CHANNEL_SCHEDULE": 13,
		"PLAIN_CHANNELS":                 14,
		"LG_LAUNCHER":                    15,
	}
)

func (x Ribbon_Format) Enum() *Ribbon_Format {
	p := new(Ribbon_Format)
	*p = x
	return p
}

func (x Ribbon_Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ribbon_Format) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_presentation_proto_enumTypes[11].Descriptor()
}

func (Ribbon_Format) Type() protoreflect.EnumType {
	return &file_proto_presentation_proto_enumTypes[11]
}

func (x Ribbon_Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ribbon_Format.Descriptor instead.
func (Ribbon_Format) EnumDescriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{29, 0}
}

type RibbonOrLoadable_Type int32

const (
	RibbonOrLoadable_RIBBON   RibbonOrLoadable_Type = 0
	RibbonOrLoadable_LOADABLE RibbonOrLoadable_Type = 1
)

// Enum value maps for RibbonOrLoadable_Type.
var (
	RibbonOrLoadable_Type_name = map[int32]string{
		0: "RIBBON",
		1: "LOADABLE",
	}
	RibbonOrLoadable_Type_value = map[string]int32{
		"RIBBON":   0,
		"LOADABLE": 1,
	}
)

func (x RibbonOrLoadable_Type) Enum() *RibbonOrLoadable_Type {
	p := new(RibbonOrLoadable_Type)
	*p = x
	return p
}

func (x RibbonOrLoadable_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RibbonOrLoadable_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_presentation_proto_enumTypes[12].Descriptor()
}

func (RibbonOrLoadable_Type) Type() protoreflect.EnumType {
	return &file_proto_presentation_proto_enumTypes[12]
}

func (x RibbonOrLoadable_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RibbonOrLoadable_Type.Descriptor instead.
func (RibbonOrLoadable_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{33, 0}
}

type Tile_Format int32

const (
	Tile_STANDARD                   Tile_Format = 0
	Tile_MICRO_GUIDE                Tile_Format = 1
	Tile_BUTTON                     Tile_Format = 2
	Tile_STANDARD_V4                Tile_Format = 3
	Tile_MICRO_GUIDE_V4             Tile_Format = 4
	Tile_RELOAD                     Tile_Format = 5
	Tile_GRID_GUIDE_V4              Tile_Format = 6
	Tile_GRID_GUIDE_CHANNEL_V4      Tile_Format = 7
	Tile_SPOTLIGHT                  Tile_Format = 8
	Tile_SPOTLIGHT_V4               Tile_Format = 9
	Tile_CHANNEL                    Tile_Format = 10
	Tile_VERTICAL                   Tile_Format = 11
	Tile_CIRCULAR                   Tile_Format = 12
	Tile_EXTRA_LARGE                Tile_Format = 13
	Tile_GRADIENT_ELONGATED         Tile_Format = 14
	Tile_LARGE                      Tile_Format = 15
	Tile_MEDIUM                     Tile_Format = 16
	Tile_SMALL                      Tile_Format = 17
	Tile_GRID_R20_CHANNEL           Tile_Format = 18
	Tile_GRID_R20_PROGRAM           Tile_Format = 19
	Tile_GRID_GUIDE_CHANNEL         Tile_Format = 20
	Tile_GRID_GUIDE_PROGRAM         Tile_Format = 21
	Tile_TEXT                       Tile_Format = 22
	Tile_ANDROID_LAUNCHER           Tile_Format = 23
	Tile_SAMSUNG_LAUNCHER           Tile_Format = 24
	Tile_APPLE_LAUNCHER             Tile_Format = 25
	Tile_GAME_CARD                  Tile_Format = 26
	Tile_MINI_GUIDE_CHANNEL         Tile_Format = 27
	Tile_BANNER                     Tile_Format = 28
	Tile_MINI_GUIDE_CHANNEL_PROGRAM Tile_Format = 29
	Tile_LG_LAUNCHER                Tile_Format = 30
)

// Enum value maps for Tile_Format.
var (
	Tile_Format_name = map[int32]string{
		0:  "STANDARD",
		1:  "MICRO_GUIDE",
		2:  "BUTTON",
		3:  "STANDARD_V4",
		4:  "MICRO_GUIDE_V4",
		5:  "RELOAD",
		6:  "GRID_GUIDE_V4",
		7:  "GRID_GUIDE_CHANNEL_V4",
		8:  "SPOTLIGHT",
		9:  "SPOTLIGHT_V4",
		10: "CHANNEL",
		11: "VERTICAL",
		12: "CIRCULAR",
		13: "EXTRA_LARGE",
		14: "GRADIENT_ELONGATED",
		15: "LARGE",
		16: "MEDIUM",
		17: "SMALL",
		18: "GRID_R20_CHANNEL",
		19: "GRID_R20_PROGRAM",
		20: "GRID_GUIDE_CHANNEL",
		21: "GRID_GUIDE_PROGRAM",
		22: "TEXT",
		23: "ANDROID_LAUNCHER",
		24: "SAMSUNG_LAUNCHER",
		25: "APPLE_LAUNCHER",
		26: "GAME_CARD",
		27: "MINI_GUIDE_CHANNEL",
		28: "BANNER",
		29: "MINI_GUIDE_CHANNEL_PROGRAM",
		30: "LG_LAUNCHER",
	}
	Tile_Format_value = map[string]int32{
		"STANDARD":                   0,
		"MICRO_GUIDE":                1,
		"BUTTON":                     2,
		"STANDARD_V4":                3,
		"MICRO_GUIDE_V4":             4,
		"RELOAD":                     5,
		"GRID_GUIDE_V4":              6,
		"GRID_GUIDE_CHANNEL_V4":      7,
		"SPOTLIGHT":                  8,
		"SPOTLIGHT_V4":               9,
		"CHANNEL":                    10,
		"VERTICAL":                   11,
		"CIRCULAR":                   12,
		"EXTRA_LARGE":                13,
		"GRADIENT_ELONGATED":         14,
		"LARGE":                      15,
		"MEDIUM":                     16,
		"SMALL":                      17,
		"GRID_R20_CHANNEL":           18,
		"GRID_R20_PROGRAM":           19,
		"GRID_GUIDE_CHANNEL":         20,
		"GRID_GUIDE_PROGRAM":         21,
		"TEXT":                       22,
		"ANDROID_LAUNCHER":           23,
		"SAMSUNG_LAUNCHER":           24,
		"APPLE_LAUNCHER":             25,
		"GAME_CARD":                  26,
		"MINI_GUIDE_CHANNEL":         27,
		"BANNER":                     28,
		"MINI_GUIDE_CHANNEL_PROGRAM": 29,
		"LG_LAUNCHER":                30,
	}
)

func (x Tile_Format) Enum() *Tile_Format {
	p := new(Tile_Format)
	*p = x
	return p
}

func (x Tile_Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Tile_Format) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_presentation_proto_enumTypes[13].Descriptor()
}

func (Tile_Format) Type() protoreflect.EnumType {
	return &file_proto_presentation_proto_enumTypes[13]
}

func (x Tile_Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Tile_Format.Descriptor instead.
func (Tile_Format) EnumDescriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{41, 0}
}

type DetailViewResponse_Format int32

const (
	DetailViewResponse_STANDARD_V4 DetailViewResponse_Format = 0
)

// Enum value maps for DetailViewResponse_Format.
var (
	DetailViewResponse_Format_name = map[int32]string{
		0: "STANDARD_V4",
	}
	DetailViewResponse_Format_value = map[string]int32{
		"STANDARD_V4": 0,
	}
)

func (x DetailViewResponse_Format) Enum() *DetailViewResponse_Format {
	p := new(DetailViewResponse_Format)
	*p = x
	return p
}

func (x DetailViewResponse_Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DetailViewResponse_Format) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_presentation_proto_enumTypes[14].Descriptor()
}

func (DetailViewResponse_Format) Type() protoreflect.EnumType {
	return &file_proto_presentation_proto_enumTypes[14]
}

func (x DetailViewResponse_Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DetailViewResponse_Format.Descriptor instead.
func (DetailViewResponse_Format) EnumDescriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{44, 0}
}

type Attribute_Type int32

const (
	Attribute_STRING    Attribute_Type = 0
	Attribute_TIME      Attribute_Type = 1
	Attribute_DURATION  Attribute_Type = 2
	Attribute_COUNTDOWN Attribute_Type = 3
	Attribute_ICON      Attribute_Type = 4
)

// Enum value maps for Attribute_Type.
var (
	Attribute_Type_name = map[int32]string{
		0: "STRING",
		1: "TIME",
		2: "DURATION",
		3: "COUNTDOWN",
		4: "ICON",
	}
	Attribute_Type_value = map[string]int32{
		"STRING":    0,
		"TIME":      1,
		"DURATION":  2,
		"COUNTDOWN": 3,
		"ICON":      4,
	}
)

func (x Attribute_Type) Enum() *Attribute_Type {
	p := new(Attribute_Type)
	*p = x
	return p
}

func (x Attribute_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Attribute_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_presentation_proto_enumTypes[15].Descriptor()
}

func (Attribute_Type) Type() protoreflect.EnumType {
	return &file_proto_presentation_proto_enumTypes[15]
}

func (x Attribute_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Attribute_Type.Descriptor instead.
func (Attribute_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{50, 0}
}

type Bar_Type int32

const (
	Bar_STATIC  Bar_Type = 0
	Bar_DYNAMIC Bar_Type = 1
)

// Enum value maps for Bar_Type.
var (
	Bar_Type_name = map[int32]string{
		0: "STATIC",
		1: "DYNAMIC",
	}
	Bar_Type_value = map[string]int32{
		"STATIC":  0,
		"DYNAMIC": 1,
	}
)

func (x Bar_Type) Enum() *Bar_Type {
	p := new(Bar_Type)
	*p = x
	return p
}

func (x Bar_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Bar_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_presentation_proto_enumTypes[16].Descriptor()
}

func (Bar_Type) Type() protoreflect.EnumType {
	return &file_proto_presentation_proto_enumTypes[16]
}

func (x Bar_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Bar_Type.Descriptor instead.
func (Bar_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{51, 0}
}

type ScreenAction_Type int32

const (
	ScreenAction_DELETE_SEARCH_HISTORY     ScreenAction_Type = 0
	ScreenAction_ADD_TO_SEARCH_HISTORY     ScreenAction_Type = 1
	ScreenAction_DELETE_ALL                ScreenAction_Type = 2
	ScreenAction_SORT_LAST_WATCHED         ScreenAction_Type = 3
	ScreenAction_SORT_ALPHABETICAL         ScreenAction_Type = 4
	ScreenAction_EJECT_HARD_DRIVE          ScreenAction_Type = 5
	ScreenAction_BASE_PACK_SELECTION_IVIEW ScreenAction_Type = 6
	ScreenAction_PRESENTABLE_ERROR         ScreenAction_Type = 7
)

// Enum value maps for ScreenAction_Type.
var (
	ScreenAction_Type_name = map[int32]string{
		0: "DELETE_SEARCH_HISTORY",
		1: "ADD_TO_SEARCH_HISTORY",
		2: "DELETE_ALL",
		3: "SORT_LAST_WATCHED",
		4: "SORT_ALPHABETICAL",
		5: "EJECT_HARD_DRIVE",
		6: "BASE_PACK_SELECTION_IVIEW",
		7: "PRESENTABLE_ERROR",
	}
	ScreenAction_Type_value = map[string]int32{
		"DELETE_SEARCH_HISTORY":     0,
		"ADD_TO_SEARCH_HISTORY":     1,
		"DELETE_ALL":                2,
		"SORT_LAST_WATCHED":         3,
		"SORT_ALPHABETICAL":         4,
		"EJECT_HARD_DRIVE":          5,
		"BASE_PACK_SELECTION_IVIEW": 6,
		"PRESENTABLE_ERROR":         7,
	}
)

func (x ScreenAction_Type) Enum() *ScreenAction_Type {
	p := new(ScreenAction_Type)
	*p = x
	return p
}

func (x ScreenAction_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScreenAction_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_presentation_proto_enumTypes[17].Descriptor()
}

func (ScreenAction_Type) Type() protoreflect.EnumType {
	return &file_proto_presentation_proto_enumTypes[17]
}

func (x ScreenAction_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScreenAction_Type.Descriptor instead.
func (ScreenAction_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{52, 0}
}

type Action_Type int32

const (
	Action_ASSET_IVIEW                   Action_Type = 0
	Action_FRANCHISE_IVIEW               Action_Type = 1
	Action_PLAY_CONTENT                  Action_Type = 2
	Action_CHANNEL_GUIDE_VIEW            Action_Type = 3
	Action_MANAGE_RESUMES                Action_Type = 4
	Action_MANAGE_FAVORITE_CHANNELS      Action_Type = 5
	Action_VIEW_MORE                     Action_Type = 6
	Action_ASSET_RECORDING_IVIEW         Action_Type = 7
	Action_FRANCHISE_RECORDING_IVIEW     Action_Type = 8
	Action_MANAGE_RECORDINGS             Action_Type = 9
	Action_SUBPACK_IVIEW                 Action_Type = 10
	Action_UNENTITLED_CONTENT_IVIEW      Action_Type = 11
	Action_RELOAD                        Action_Type = 12
	Action_PERFORM_RECENT_SEARCH         Action_Type = 13
	Action_DELETE_PROGRESS_POINT         Action_Type = 14
	Action_MANAGE_HISTORY                Action_Type = 15
	Action_SIGN_UP                       Action_Type = 16
	Action_FAVORITE                      Action_Type = 17
	Action_UNFAVORITE                    Action_Type = 18
	Action_RECORD_THIS                   Action_Type = 19
	Action_RECORD_ALL                    Action_Type = 20
	Action_RECORD_NEW                    Action_Type = 21
	Action_RESTART_SUBSCRIPTION          Action_Type = 22
	Action_PACK_SWITCH_IVIEW             Action_Type = 23
	Action_WATCH_PASS_IVIEW              Action_Type = 24
	Action_FAVORITE_WITH_INVALIDATION    Action_Type = 25
	Action_UNFAVORITE_WITH_INVALIDATION  Action_Type = 26
	Action_MANAGE_FAVORITE_CHANNELS_PAGE Action_Type = 27
	Action_GET_SCREEN                    Action_Type = 28
	Action_GET_CLIENT_SCREEN             Action_Type = 29
	Action_CLIENT_RENT_4K                Action_Type = 30
	Action_CLIENT_RENT_HD                Action_Type = 31
	Action_CLIENT_RENT_SD                Action_Type = 32
	Action_PLAY_TRAILER                  Action_Type = 33
	Action_RECORD_OPTIONS_SCREEN         Action_Type = 34
	Action_CANCEL_RECORDING              Action_Type = 35
	Action_DETAIL_VIEW                   Action_Type = 36
	Action_GET_SUB_TAB                   Action_Type = 37
	Action_EXPAND                        Action_Type = 38
	Action_RECORD_PROTECT                Action_Type = 39
	Action_RECORD_UNPROTECT              Action_Type = 40
	Action_DELETE_RECORDING              Action_Type = 41
	Action_RESTORE_RECORDING             Action_Type = 42
	Action_CANCEL_RECORDINGS             Action_Type = 43
	Action_DELETE_RECORDINGS             Action_Type = 44
	Action_RESTORE_RECORDINGS            Action_Type = 45
	Action_OTA_RECORD_THIS               Action_Type = 46
	Action_OTA_RECORD_ALL                Action_Type = 47
	Action_OTA_RECORD_NEW                Action_Type = 48
	Action_OTA_DELETE_RECORDING          Action_Type = 49
	Action_OTA_RESTORE_RECORDING         Action_Type = 50
	Action_OTA_CANCEL_RECORDING          Action_Type = 51
	Action_OTA_CANCEL_RECORDINGS         Action_Type = 52
	Action_OTA_DELETE_RECORDINGS         Action_Type = 53
	Action_OTA_RESTORE_RECORDINGS        Action_Type = 54
	Action_OTA_RECORD_PROTECT            Action_Type = 55
	Action_OTA_RECORD_UNPROTECT          Action_Type = 56
	Action_PLAYER_SCREEN                 Action_Type = 57
	Action_NO_OP                         Action_Type = 58
	Action_PLAY_AIRING                   Action_Type = 59
	Action_PLAY_DVR                      Action_Type = 60
	Action_PLAYBACK_OPTIONS_SCREEN       Action_Type = 61
	Action_GET_TAB_FOCUS_RIBBON          Action_Type = 62
	Action_WATCH_PARTY                   Action_Type = 63
	Action_MORE_ACTIONS_SCREEN           Action_Type = 64
	Action_CHANNEL_VIEW                  Action_Type = 65
	Action_PERSIST_TAB                   Action_Type = 66
	Action_VALIDATE_PARENTAL_PIN         Action_Type = 67
	Action_HUB_VIEW                      Action_Type = 68
	Action_GET_FULL_SCREEN               Action_Type = 69
	Action_GET_HALF_SCREEN               Action_Type = 70
	Action_FETCH_CHANNELS_MINI_GUIDE     Action_Type = 71
	Action_PLAY_CHANNEL                  Action_Type = 72
	Action_SIGN_UP_OR_SIGN_IN_FOR_FAV    Action_Type = 73
)

// Enum value maps for Action_Type.
var (
	Action_Type_name = map[int32]string{
		0:  "ASSET_IVIEW",
		1:  "FRANCHISE_IVIEW",
		2:  "PLAY_CONTENT",
		3:  "CHANNEL_GUIDE_VIEW",
		4:  "MANAGE_RESUMES",
		5:  "MANAGE_FAVORITE_CHANNELS",
		6:  "VIEW_MORE",
		7:  "ASSET_RECORDING_IVIEW",
		8:  "FRANCHISE_RECORDING_IVIEW",
		9:  "MANAGE_RECORDINGS",
		10: "SUBPACK_IVIEW",
		11: "UNENTITLED_CONTENT_IVIEW",
		12: "RELOAD",
		13: "PERFORM_RECENT_SEARCH",
		14: "DELETE_PROGRESS_POINT",
		15: "MANAGE_HISTORY",
		16: "SIGN_UP",
		17: "FAVORITE",
		18: "UNFAVORITE",
		19: "RECORD_THIS",
		20: "RECORD_ALL",
		21: "RECORD_NEW",
		22: "RESTART_SUBSCRIPTION",
		23: "PACK_SWITCH_IVIEW",
		24: "WATCH_PASS_IVIEW",
		25: "FAVORITE_WITH_INVALIDATION",
		26: "UNFAVORITE_WITH_INVALIDATION",
		27: "MANAGE_FAVORITE_CHANNELS_PAGE",
		28: "GET_SCREEN",
		29: "GET_CLIENT_SCREEN",
		30: "CLIENT_RENT_4K",
		31: "CLIENT_RENT_HD",
		32: "CLIENT_RENT_SD",
		33: "PLAY_TRAILER",
		34: "RECORD_OPTIONS_SCREEN",
		35: "CANCEL_RECORDING",
		36: "DETAIL_VIEW",
		37: "GET_SUB_TAB",
		38: "EXPAND",
		39: "RECORD_PROTECT",
		40: "RECORD_UNPROTECT",
		41: "DELETE_RECORDING",
		42: "RESTORE_RECORDING",
		43: "CANCEL_RECORDINGS",
		44: "DELETE_RECORDINGS",
		45: "RESTORE_RECORDINGS",
		46: "OTA_RECORD_THIS",
		47: "OTA_RECORD_ALL",
		48: "OTA_RECORD_NEW",
		49: "OTA_DELETE_RECORDING",
		50: "OTA_RESTORE_RECORDING",
		51: "OTA_CANCEL_RECORDING",
		52: "OTA_CANCEL_RECORDINGS",
		53: "OTA_DELETE_RECORDINGS",
		54: "OTA_RESTORE_RECORDINGS",
		55: "OTA_RECORD_PROTECT",
		56: "OTA_RECORD_UNPROTECT",
		57: "PLAYER_SCREEN",
		58: "NO_OP",
		59: "PLAY_AIRING",
		60: "PLAY_DVR",
		61: "PLAYBACK_OPTIONS_SCREEN",
		62: "GET_TAB_FOCUS_RIBBON",
		63: "WATCH_PARTY",
		64: "MORE_ACTIONS_SCREEN",
		65: "CHANNEL_VIEW",
		66: "PERSIST_TAB",
		67: "VALIDATE_PARENTAL_PIN",
		68: "HUB_VIEW",
		69: "GET_FULL_SCREEN",
		70: "GET_HALF_SCREEN",
		71: "FETCH_CHANNELS_MINI_GUIDE",
		72: "PLAY_CHANNEL",
		73: "SIGN_UP_OR_SIGN_IN_FOR_FAV",
	}
	Action_Type_value = map[string]int32{
		"ASSET_IVIEW":                   0,
		"FRANCHISE_IVIEW":               1,
		"PLAY_CONTENT":                  2,
		"CHANNEL_GUIDE_VIEW":            3,
		"MANAGE_RESUMES":                4,
		"MANAGE_FAVORITE_CHANNELS":      5,
		"VIEW_MORE":                     6,
		"ASSET_RECORDING_IVIEW":         7,
		"FRANCHISE_RECORDING_IVIEW":     8,
		"MANAGE_RECORDINGS":             9,
		"SUBPACK_IVIEW":                 10,
		"UNENTITLED_CONTENT_IVIEW":      11,
		"RELOAD":                        12,
		"PERFORM_RECENT_SEARCH":         13,
		"DELETE_PROGRESS_POINT":         14,
		"MANAGE_HISTORY":                15,
		"SIGN_UP":                       16,
		"FAVORITE":                      17,
		"UNFAVORITE":                    18,
		"RECORD_THIS":                   19,
		"RECORD_ALL":                    20,
		"RECORD_NEW":                    21,
		"RESTART_SUBSCRIPTION":          22,
		"PACK_SWITCH_IVIEW":             23,
		"WATCH_PASS_IVIEW":              24,
		"FAVORITE_WITH_INVALIDATION":    25,
		"UNFAVORITE_WITH_INVALIDATION":  26,
		"MANAGE_FAVORITE_CHANNELS_PAGE": 27,
		"GET_SCREEN":                    28,
		"GET_CLIENT_SCREEN":             29,
		"CLIENT_RENT_4K":                30,
		"CLIENT_RENT_HD":                31,
		"CLIENT_RENT_SD":                32,
		"PLAY_TRAILER":                  33,
		"RECORD_OPTIONS_SCREEN":         34,
		"CANCEL_RECORDING":              35,
		"DETAIL_VIEW":                   36,
		"GET_SUB_TAB":                   37,
		"EXPAND":                        38,
		"RECORD_PROTECT":                39,
		"RECORD_UNPROTECT":              40,
		"DELETE_RECORDING":              41,
		"RESTORE_RECORDING":             42,
		"CANCEL_RECORDINGS":             43,
		"DELETE_RECORDINGS":             44,
		"RESTORE_RECORDINGS":            45,
		"OTA_RECORD_THIS":               46,
		"OTA_RECORD_ALL":                47,
		"OTA_RECORD_NEW":                48,
		"OTA_DELETE_RECORDING":          49,
		"OTA_RESTORE_RECORDING":         50,
		"OTA_CANCEL_RECORDING":          51,
		"OTA_CANCEL_RECORDINGS":         52,
		"OTA_DELETE_RECORDINGS":         53,
		"OTA_RESTORE_RECORDINGS":        54,
		"OTA_RECORD_PROTECT":            55,
		"OTA_RECORD_UNPROTECT":          56,
		"PLAYER_SCREEN":                 57,
		"NO_OP":                         58,
		"PLAY_AIRING":                   59,
		"PLAY_DVR":                      60,
		"PLAYBACK_OPTIONS_SCREEN":       61,
		"GET_TAB_FOCUS_RIBBON":          62,
		"WATCH_PARTY":                   63,
		"MORE_ACTIONS_SCREEN":           64,
		"CHANNEL_VIEW":                  65,
		"PERSIST_TAB":                   66,
		"VALIDATE_PARENTAL_PIN":         67,
		"HUB_VIEW":                      68,
		"GET_FULL_SCREEN":               69,
		"GET_HALF_SCREEN":               70,
		"FETCH_CHANNELS_MINI_GUIDE":     71,
		"PLAY_CHANNEL":                  72,
		"SIGN_UP_OR_SIGN_IN_FOR_FAV":    73,
	}
)

func (x Action_Type) Enum() *Action_Type {
	p := new(Action_Type)
	*p = x
	return p
}

func (x Action_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_presentation_proto_enumTypes[18].Descriptor()
}

func (Action_Type) Type() protoreflect.EnumType {
	return &file_proto_presentation_proto_enumTypes[18]
}

func (x Action_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action_Type.Descriptor instead.
func (Action_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{53, 0}
}

type PackSwitchData_TargetPackColor int32

const (
	PackSwitchData_ORANGE PackSwitchData_TargetPackColor = 0
	PackSwitchData_BLUE   PackSwitchData_TargetPackColor = 1
)

// Enum value maps for PackSwitchData_TargetPackColor.
var (
	PackSwitchData_TargetPackColor_name = map[int32]string{
		0: "ORANGE",
		1: "BLUE",
	}
	PackSwitchData_TargetPackColor_value = map[string]int32{
		"ORANGE": 0,
		"BLUE":   1,
	}
)

func (x PackSwitchData_TargetPackColor) Enum() *PackSwitchData_TargetPackColor {
	p := new(PackSwitchData_TargetPackColor)
	*p = x
	return p
}

func (x PackSwitchData_TargetPackColor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PackSwitchData_TargetPackColor) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_presentation_proto_enumTypes[19].Descriptor()
}

func (PackSwitchData_TargetPackColor) Type() protoreflect.EnumType {
	return &file_proto_presentation_proto_enumTypes[19]
}

func (x PackSwitchData_TargetPackColor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PackSwitchData_TargetPackColor.Descriptor instead.
func (PackSwitchData_TargetPackColor) EnumDescriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{55, 0}
}

type PlaybackInfo_Type int32

const (
	PlaybackInfo_OTT   PlaybackInfo_Type = 0
	PlaybackInfo_OTA   PlaybackInfo_Type = 1
	PlaybackInfo_LSDVR PlaybackInfo_Type = 2
)

// Enum value maps for PlaybackInfo_Type.
var (
	PlaybackInfo_Type_name = map[int32]string{
		0: "OTT",
		1: "OTA",
		2: "LSDVR",
	}
	PlaybackInfo_Type_value = map[string]int32{
		"OTT":   0,
		"OTA":   1,
		"LSDVR": 2,
	}
)

func (x PlaybackInfo_Type) Enum() *PlaybackInfo_Type {
	p := new(PlaybackInfo_Type)
	*p = x
	return p
}

func (x PlaybackInfo_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlaybackInfo_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_presentation_proto_enumTypes[20].Descriptor()
}

func (PlaybackInfo_Type) Type() protoreflect.EnumType {
	return &file_proto_presentation_proto_enumTypes[20]
}

func (x PlaybackInfo_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlaybackInfo_Type.Descriptor instead.
func (PlaybackInfo_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{56, 0}
}

type Adobe_AssetType int32

const (
	Adobe_Show            Adobe_AssetType = 0
	Adobe_Movie           Adobe_AssetType = 1
	Adobe_Trailer         Adobe_AssetType = 2
	Adobe_Episode         Adobe_AssetType = 3
	Adobe_Franchise       Adobe_AssetType = 4
	Adobe_Channel         Adobe_AssetType = 5
	Adobe_AssetTypeHybrid Adobe_AssetType = 6
	Adobe_AssetTypeNone   Adobe_AssetType = 7
)

// Enum value maps for Adobe_AssetType.
var (
	Adobe_AssetType_name = map[int32]string{
		0: "Show",
		1: "Movie",
		2: "Trailer",
		3: "Episode",
		4: "Franchise",
		5: "Channel",
		6: "AssetTypeHybrid",
		7: "AssetTypeNone",
	}
	Adobe_AssetType_value = map[string]int32{
		"Show":            0,
		"Movie":           1,
		"Trailer":         2,
		"Episode":         3,
		"Franchise":       4,
		"Channel":         5,
		"AssetTypeHybrid": 6,
		"AssetTypeNone":   7,
	}
)

func (x Adobe_AssetType) Enum() *Adobe_AssetType {
	p := new(Adobe_AssetType)
	*p = x
	return p
}

func (x Adobe_AssetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Adobe_AssetType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_presentation_proto_enumTypes[21].Descriptor()
}

func (Adobe_AssetType) Type() protoreflect.EnumType {
	return &file_proto_presentation_proto_enumTypes[21]
}

func (x Adobe_AssetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Adobe_AssetType.Descriptor instead.
func (Adobe_AssetType) EnumDescriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{59, 0}
}

type Adobe_ButtonType int32

const (
	Adobe_Asset              Adobe_ButtonType = 0
	Adobe_Channel_ButtonType Adobe_ButtonType = 1
	Adobe_Package            Adobe_ButtonType = 2
	Adobe_ButtonTypeUnknown  Adobe_ButtonType = 3
)

// Enum value maps for Adobe_ButtonType.
var (
	Adobe_ButtonType_name = map[int32]string{
		0: "Asset",
		1: "Channel_ButtonType",
		2: "Package",
		3: "ButtonTypeUnknown",
	}
	Adobe_ButtonType_value = map[string]int32{
		"Asset":              0,
		"Channel_ButtonType": 1,
		"Package":            2,
		"ButtonTypeUnknown":  3,
	}
)

func (x Adobe_ButtonType) Enum() *Adobe_ButtonType {
	p := new(Adobe_ButtonType)
	*p = x
	return p
}

func (x Adobe_ButtonType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Adobe_ButtonType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_presentation_proto_enumTypes[22].Descriptor()
}

func (Adobe_ButtonType) Type() protoreflect.EnumType {
	return &file_proto_presentation_proto_enumTypes[22]
}

func (x Adobe_ButtonType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Adobe_ButtonType.Descriptor instead.
func (Adobe_ButtonType) EnumDescriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{59, 1}
}

type Adobe_ButtonTypeView int32

const (
	Adobe_Tile                  Adobe_ButtonTypeView = 0
	Adobe_Grid                  Adobe_ButtonTypeView = 1
	Adobe_ButtonTypeViewUnknown Adobe_ButtonTypeView = 2
)

// Enum value maps for Adobe_ButtonTypeView.
var (
	Adobe_ButtonTypeView_name = map[int32]string{
		0: "Tile",
		1: "Grid",
		2: "ButtonTypeViewUnknown",
	}
	Adobe_ButtonTypeView_value = map[string]int32{
		"Tile":                  0,
		"Grid":                  1,
		"ButtonTypeViewUnknown": 2,
	}
)

func (x Adobe_ButtonTypeView) Enum() *Adobe_ButtonTypeView {
	p := new(Adobe_ButtonTypeView)
	*p = x
	return p
}

func (x Adobe_ButtonTypeView) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Adobe_ButtonTypeView) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_presentation_proto_enumTypes[23].Descriptor()
}

func (Adobe_ButtonTypeView) Type() protoreflect.EnumType {
	return &file_proto_presentation_proto_enumTypes[23]
}

func (x Adobe_ButtonTypeView) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Adobe_ButtonTypeView.Descriptor instead.
func (Adobe_ButtonTypeView) EnumDescriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{59, 2}
}

type Adobe_ContentType int32

const (
	Adobe_Unknown             Adobe_ContentType = 0
	Adobe_Live                Adobe_ContentType = 1
	Adobe_LookBack            Adobe_ContentType = 2
	Adobe_SVOD                Adobe_ContentType = 3
	Adobe_TVOD                Adobe_ContentType = 4
	Adobe_DVR                 Adobe_ContentType = 5
	Adobe_PPV                 Adobe_ContentType = 6
	Adobe_Upcoming            Adobe_ContentType = 7
	Adobe_Expired             Adobe_ContentType = 8
	Adobe_Unentitled          Adobe_ContentType = 9
	Adobe_Previously_Entitled Adobe_ContentType = 10
)

// Enum value maps for Adobe_ContentType.
var (
	Adobe_ContentType_name = map[int32]string{
		0:  "Unknown",
		1:  "Live",
		2:  "LookBack",
		3:  "SVOD",
		4:  "TVOD",
		5:  "DVR",
		6:  "PPV",
		7:  "Upcoming",
		8:  "Expired",
		9:  "Unentitled",
		10: "Previously_Entitled",
	}
	Adobe_ContentType_value = map[string]int32{
		"Unknown":             0,
		"Live":                1,
		"LookBack":            2,
		"SVOD":                3,
		"TVOD":                4,
		"DVR":                 5,
		"PPV":                 6,
		"Upcoming":            7,
		"Expired":             8,
		"Unentitled":          9,
		"Previously_Entitled": 10,
	}
)

func (x Adobe_ContentType) Enum() *Adobe_ContentType {
	p := new(Adobe_ContentType)
	*p = x
	return p
}

func (x Adobe_ContentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Adobe_ContentType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_presentation_proto_enumTypes[24].Descriptor()
}

func (Adobe_ContentType) Type() protoreflect.EnumType {
	return &file_proto_presentation_proto_enumTypes[24]
}

func (x Adobe_ContentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Adobe_ContentType.Descriptor instead.
func (Adobe_ContentType) EnumDescriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{59, 3}
}

type Adobe_AccountStatus int32

const (
	Adobe_AccountStatusUnknown Adobe_AccountStatus = 0
	Adobe_Unavailable          Adobe_AccountStatus = 1
	Adobe_Paid                 Adobe_AccountStatus = 2
	Adobe_Prospect             Adobe_AccountStatus = 3
	Adobe_Freemium             Adobe_AccountStatus = 4
	Adobe_Lead                 Adobe_AccountStatus = 5
	Adobe_Free_Preview         Adobe_AccountStatus = 6
	Adobe_ExpiredAccount       Adobe_AccountStatus = 7
)

// Enum value maps for Adobe_AccountStatus.
var (
	Adobe_AccountStatus_name = map[int32]string{
		0: "AccountStatusUnknown",
		1: "Unavailable",
		2: "Paid",
		3: "Prospect",
		4: "Freemium",
		5: "Lead",
		6: "Free_Preview",
		7: "ExpiredAccount",
	}
	Adobe_AccountStatus_value = map[string]int32{
		"AccountStatusUnknown": 0,
		"Unavailable":          1,
		"Paid":                 2,
		"Prospect":             3,
		"Freemium":             4,
		"Lead":                 5,
		"Free_Preview":         6,
		"ExpiredAccount":       7,
	}
)

func (x Adobe_AccountStatus) Enum() *Adobe_AccountStatus {
	p := new(Adobe_AccountStatus)
	*p = x
	return p
}

func (x Adobe_AccountStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Adobe_AccountStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_presentation_proto_enumTypes[25].Descriptor()
}

func (Adobe_AccountStatus) Type() protoreflect.EnumType {
	return &file_proto_presentation_proto_enumTypes[25]
}

func (x Adobe_AccountStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Adobe_AccountStatus.Descriptor instead.
func (Adobe_AccountStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{59, 4}
}

type Adobe_AdobeFieldFormat int32

const (
	Adobe_Legacy    Adobe_AdobeFieldFormat = 0
	Adobe_r20Format Adobe_AdobeFieldFormat = 1
)

// Enum value maps for Adobe_AdobeFieldFormat.
var (
	Adobe_AdobeFieldFormat_name = map[int32]string{
		0: "Legacy",
		1: "r20Format",
	}
	Adobe_AdobeFieldFormat_value = map[string]int32{
		"Legacy":    0,
		"r20Format": 1,
	}
)

func (x Adobe_AdobeFieldFormat) Enum() *Adobe_AdobeFieldFormat {
	p := new(Adobe_AdobeFieldFormat)
	*p = x
	return p
}

func (x Adobe_AdobeFieldFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Adobe_AdobeFieldFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_presentation_proto_enumTypes[26].Descriptor()
}

func (Adobe_AdobeFieldFormat) Type() protoreflect.EnumType {
	return &file_proto_presentation_proto_enumTypes[26]
}

func (x Adobe_AdobeFieldFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Adobe_AdobeFieldFormat.Descriptor instead.
func (Adobe_AdobeFieldFormat) EnumDescriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{59, 5}
}

type Adobe_Hubtype int32

const (
	Adobe_SingleChannel Adobe_Hubtype = 0
	Adobe_MultiChannel  Adobe_Hubtype = 1
	Adobe_HubtypeNone   Adobe_Hubtype = 2
	Adobe_BaseService   Adobe_Hubtype = 3
)

// Enum value maps for Adobe_Hubtype.
var (
	Adobe_Hubtype_name = map[int32]string{
		0: "SingleChannel",
		1: "MultiChannel",
		2: "HubtypeNone",
		3: "BaseService",
	}
	Adobe_Hubtype_value = map[string]int32{
		"SingleChannel": 0,
		"MultiChannel":  1,
		"HubtypeNone":   2,
		"BaseService":   3,
	}
)

func (x Adobe_Hubtype) Enum() *Adobe_Hubtype {
	p := new(Adobe_Hubtype)
	*p = x
	return p
}

func (x Adobe_Hubtype) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Adobe_Hubtype) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_presentation_proto_enumTypes[27].Descriptor()
}

func (Adobe_Hubtype) Type() protoreflect.EnumType {
	return &file_proto_presentation_proto_enumTypes[27]
}

func (x Adobe_Hubtype) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Adobe_Hubtype.Descriptor instead.
func (Adobe_Hubtype) EnumDescriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{59, 6}
}

type Icon_Type int32

const (
	Icon_STATIC  Icon_Type = 0
	Icon_DYNAMIC Icon_Type = 1
)

// Enum value maps for Icon_Type.
var (
	Icon_Type_name = map[int32]string{
		0: "STATIC",
		1: "DYNAMIC",
	}
	Icon_Type_value = map[string]int32{
		"STATIC":  0,
		"DYNAMIC": 1,
	}
)

func (x Icon_Type) Enum() *Icon_Type {
	p := new(Icon_Type)
	*p = x
	return p
}

func (x Icon_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Icon_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_presentation_proto_enumTypes[28].Descriptor()
}

func (Icon_Type) Type() protoreflect.EnumType {
	return &file_proto_presentation_proto_enumTypes[28]
}

func (x Icon_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Icon_Type.Descriptor instead.
func (Icon_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{60, 0}
}

type Icon_Key int32

const (
	Icon_FAVORITE_HEART_FILLED Icon_Key = 0
	Icon_FAVORITE_HEART_EMPTY  Icon_Key = 1
	Icon_PARENTAL_LOCKED       Icon_Key = 2
	Icon_DVR_RED_DOT           Icon_Key = 3
	Icon_DVR_GRAY_DOT          Icon_Key = 4
	Icon_ROTTEN_TOMATOES       Icon_Key = 5
	Icon_CHANNEL_FAVORITED     Icon_Key = 6
	Icon_RECORD_ACTION         Icon_Key = 7
	Icon_RATING_UNKNOWN        Icon_Key = 8
	Icon_RATING_TV_Y           Icon_Key = 9
	Icon_RATING_TV_G           Icon_Key = 10
	Icon_RATING_G              Icon_Key = 11
	Icon_RATING_TV_PG          Icon_Key = 12
	Icon_RATING_TV_Y7          Icon_Key = 13
	Icon_RATING_PG             Icon_Key = 14
	Icon_RATING_PG_13          Icon_Key = 15
	Icon_RATING_TV_14          Icon_Key = 16
	Icon_RATING_TV_MA          Icon_Key = 17
	Icon_RATING_R              Icon_Key = 18
	Icon_RATING_NC_17          Icon_Key = 19
	Icon_CONTINUE_WATCHING     Icon_Key = 20
	Icon_LAST_WATCHED_CHANNEL  Icon_Key = 21
	Icon_PICKED_FOR_YOU        Icon_Key = 22
	Icon_PLAY_CONTENT          Icon_Key = 23
	Icon_POPULAR_NOW           Icon_Key = 24
	Icon_RECENTLY_RECORDED     Icon_Key = 25
	Icon_NEW                   Icon_Key = 26
	Icon_RECOMMENDED_WATCHLIST Icon_Key = 27
	Icon_RECENT_RECORDING      Icon_Key = 28
	Icon_RECOMMENDED_PREVIOUS  Icon_Key = 29
	Icon_RECOMMENDED_PICKED    Icon_Key = 30
	Icon_FEATURED              Icon_Key = 31
	Icon_RECOMMENDED_SIMILAR   Icon_Key = 32
	Icon_RECOMMENDED_RECENT    Icon_Key = 33
	Icon_OTA                   Icon_Key = 34
	Icon_RECORD_RULE           Icon_Key = 35
	Icon_PLAYER_SCREEN         Icon_Key = 36
	Icon_TOP_CHANNEL_PICK      Icon_Key = 37
	Icon_BULLET_POINT          Icon_Key = 38
	Icon_MULTIPLE_RECORDINGS   Icon_Key = 39
	Icon_SINGLE_RECORDING      Icon_Key = 40
	Icon_REPLAY                Icon_Key = 41
)

// Enum value maps for Icon_Key.
var (
	Icon_Key_name = map[int32]string{
		0:  "FAVORITE_HEART_FILLED",
		1:  "FAVORITE_HEART_EMPTY",
		2:  "PARENTAL_LOCKED",
		3:  "DVR_RED_DOT",
		4:  "DVR_GRAY_DOT",
		5:  "ROTTEN_TOMATOES",
		6:  "CHANNEL_FAVORITED",
		7:  "RECORD_ACTION",
		8:  "RATING_UNKNOWN",
		9:  "RATING_TV_Y",
		10: "RATING_TV_G",
		11: "RATING_G",
		12: "RATING_TV_PG",
		13: "RATING_TV_Y7",
		14: "RATING_PG",
		15: "RATING_PG_13",
		16: "RATING_TV_14",
		17: "RATING_TV_MA",
		18: "RATING_R",
		19: "RATING_NC_17",
		20: "CONTINUE_WATCHING",
		21: "LAST_WATCHED_CHANNEL",
		22: "PICKED_FOR_YOU",
		23: "PLAY_CONTENT",
		24: "POPULAR_NOW",
		25: "RECENTLY_RECORDED",
		26: "NEW",
		27: "RECOMMENDED_WATCHLIST",
		28: "RECENT_RECORDING",
		29: "RECOMMENDED_PREVIOUS",
		30: "RECOMMENDED_PICKED",
		31: "FEATURED",
		32: "RECOMMENDED_SIMILAR",
		33: "RECOMMENDED_RECENT",
		34: "OTA",
		35: "RECORD_RULE",
		36: "PLAYER_SCREEN",
		37: "TOP_CHANNEL_PICK",
		38: "BULLET_POINT",
		39: "MULTIPLE_RECORDINGS",
		40: "SINGLE_RECORDING",
		41: "REPLAY",
	}
	Icon_Key_value = map[string]int32{
		"FAVORITE_HEART_FILLED": 0,
		"FAVORITE_HEART_EMPTY":  1,
		"PARENTAL_LOCKED":       2,
		"DVR_RED_DOT":           3,
		"DVR_GRAY_DOT":          4,
		"ROTTEN_TOMATOES":       5,
		"CHANNEL_FAVORITED":     6,
		"RECORD_ACTION":         7,
		"RATING_UNKNOWN":        8,
		"RATING_TV_Y":           9,
		"RATING_TV_G":           10,
		"RATING_G":              11,
		"RATING_TV_PG":          12,
		"RATING_TV_Y7":          13,
		"RATING_PG":             14,
		"RATING_PG_13":          15,
		"RATING_TV_14":          16,
		"RATING_TV_MA":          17,
		"RATING_R":              18,
		"RATING_NC_17":          19,
		"CONTINUE_WATCHING":     20,
		"LAST_WATCHED_CHANNEL":  21,
		"PICKED_FOR_YOU":        22,
		"PLAY_CONTENT":          23,
		"POPULAR_NOW":           24,
		"RECENTLY_RECORDED":     25,
		"NEW":                   26,
		"RECOMMENDED_WATCHLIST": 27,
		"RECENT_RECORDING":      28,
		"RECOMMENDED_PREVIOUS":  29,
		"RECOMMENDED_PICKED":    30,
		"FEATURED":              31,
		"RECOMMENDED_SIMILAR":   32,
		"RECOMMENDED_RECENT":    33,
		"OTA":                   34,
		"RECORD_RULE":           35,
		"PLAYER_SCREEN":         36,
		"TOP_CHANNEL_PICK":      37,
		"BULLET_POINT":          38,
		"MULTIPLE_RECORDINGS":   39,
		"SINGLE_RECORDING":      40,
		"REPLAY":                41,
	}
)

func (x Icon_Key) Enum() *Icon_Key {
	p := new(Icon_Key)
	*p = x
	return p
}

func (x Icon_Key) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Icon_Key) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_presentation_proto_enumTypes[29].Descriptor()
}

func (Icon_Key) Type() protoreflect.EnumType {
	return &file_proto_presentation_proto_enumTypes[29]
}

func (x Icon_Key) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Icon_Key.Descriptor instead.
func (Icon_Key) EnumDescriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{60, 1}
}

type Label_Type int32

const (
	Label_THUUZ_LOGO Label_Type = 0
)

// Enum value maps for Label_Type.
var (
	Label_Type_name = map[int32]string{
		0: "THUUZ_LOGO",
	}
	Label_Type_value = map[string]int32{
		"THUUZ_LOGO": 0,
	}
)

func (x Label_Type) Enum() *Label_Type {
	p := new(Label_Type)
	*p = x
	return p
}

func (x Label_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Label_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_presentation_proto_enumTypes[30].Descriptor()
}

func (Label_Type) Type() protoreflect.EnumType {
	return &file_proto_presentation_proto_enumTypes[30]
}

func (x Label_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Label_Type.Descriptor instead.
func (Label_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{61, 0}
}

type BadgeLabel_Type int32

const (
	BadgeLabel_COUNTDOWN BadgeLabel_Type = 0
	BadgeLabel_STRING    BadgeLabel_Type = 1
)

// Enum value maps for BadgeLabel_Type.
var (
	BadgeLabel_Type_name = map[int32]string{
		0: "COUNTDOWN",
		1: "STRING",
	}
	BadgeLabel_Type_value = map[string]int32{
		"COUNTDOWN": 0,
		"STRING":    1,
	}
)

func (x BadgeLabel_Type) Enum() *BadgeLabel_Type {
	p := new(BadgeLabel_Type)
	*p = x
	return p
}

func (x BadgeLabel_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BadgeLabel_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_presentation_proto_enumTypes[31].Descriptor()
}

func (BadgeLabel_Type) Type() protoreflect.EnumType {
	return &file_proto_presentation_proto_enumTypes[31]
}

func (x BadgeLabel_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BadgeLabel_Type.Descriptor instead.
func (BadgeLabel_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{73, 0}
}

type Badge_Type int32

const (
	Badge_SPECIFIC Badge_Type = 0
	Badge_GENERIC  Badge_Type = 1
)

// Enum value maps for Badge_Type.
var (
	Badge_Type_name = map[int32]string{
		0: "SPECIFIC",
		1: "GENERIC",
	}
	Badge_Type_value = map[string]int32{
		"SPECIFIC": 0,
		"GENERIC":  1,
	}
)

func (x Badge_Type) Enum() *Badge_Type {
	p := new(Badge_Type)
	*p = x
	return p
}

func (x Badge_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Badge_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_presentation_proto_enumTypes[32].Descriptor()
}

func (Badge_Type) Type() protoreflect.EnumType {
	return &file_proto_presentation_proto_enumTypes[32]
}

func (x Badge_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Badge_Type.Descriptor instead.
func (Badge_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{74, 0}
}

type Badge_Key int32

const (
	Badge_LIVE              Badge_Key = 0
	Badge_PURCHASE_REQUIRED Badge_Key = 1
	Badge_RECORDING         Badge_Key = 2
	Badge_SLING_BLUE        Badge_Key = 3
	Badge_SLING_ORANGE      Badge_Key = 4
	Badge_SCHEDULED         Badge_Key = 5
	Badge_LOCKED            Badge_Key = 6
	Badge_AD_FREE           Badge_Key = 7
	Badge_SCHEDULED_SPORTS  Badge_Key = 8
)

// Enum value maps for Badge_Key.
var (
	Badge_Key_name = map[int32]string{
		0: "LIVE",
		1: "PURCHASE_REQUIRED",
		2: "RECORDING",
		3: "SLING_BLUE",
		4: "SLING_ORANGE",
		5: "SCHEDULED",
		6: "LOCKED",
		7: "AD_FREE",
		8: "SCHEDULED_SPORTS",
	}
	Badge_Key_value = map[string]int32{
		"LIVE":              0,
		"PURCHASE_REQUIRED": 1,
		"RECORDING":         2,
		"SLING_BLUE":        3,
		"SLING_ORANGE":      4,
		"SCHEDULED":         5,
		"LOCKED":            6,
		"AD_FREE":           7,
		"SCHEDULED_SPORTS":  8,
	}
)

func (x Badge_Key) Enum() *Badge_Key {
	p := new(Badge_Key)
	*p = x
	return p
}

func (x Badge_Key) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Badge_Key) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_presentation_proto_enumTypes[33].Descriptor()
}

func (Badge_Key) Type() protoreflect.EnumType {
	return &file_proto_presentation_proto_enumTypes[33]
}

func (x Badge_Key) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Badge_Key.Descriptor instead.
func (Badge_Key) EnumDescriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{74, 1}
}

type Badge_Color int32

const (
	Badge_DARK_BLUE   Badge_Color = 0
	Badge_DARK_COAL   Badge_Color = 1
	Badge_LIGHT_BLUE  Badge_Color = 2
	Badge_LIGHT_COAL  Badge_Color = 3
	Badge_BLACK       Badge_Color = 4
	Badge_TRANSPARENT Badge_Color = 5
	Badge_LIGHT_GREEN Badge_Color = 6
)

// Enum value maps for Badge_Color.
var (
	Badge_Color_name = map[int32]string{
		0: "DARK_BLUE",
		1: "DARK_COAL",
		2: "LIGHT_BLUE",
		3: "LIGHT_COAL",
		4: "BLACK",
		5: "TRANSPARENT",
		6: "LIGHT_GREEN",
	}
	Badge_Color_value = map[string]int32{
		"DARK_BLUE":   0,
		"DARK_COAL":   1,
		"LIGHT_BLUE":  2,
		"LIGHT_COAL":  3,
		"BLACK":       4,
		"TRANSPARENT": 5,
		"LIGHT_GREEN": 6,
	}
)

func (x Badge_Color) Enum() *Badge_Color {
	p := new(Badge_Color)
	*p = x
	return p
}

func (x Badge_Color) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Badge_Color) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_presentation_proto_enumTypes[34].Descriptor()
}

func (Badge_Color) Type() protoreflect.EnumType {
	return &file_proto_presentation_proto_enumTypes[34]
}

func (x Badge_Color) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Badge_Color.Descriptor instead.
func (Badge_Color) EnumDescriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{74, 2}
}

type DvrStatus_Format int32

const (
	DvrStatus_DVR_STATUS DvrStatus_Format = 0
)

// Enum value maps for DvrStatus_Format.
var (
	DvrStatus_Format_name = map[int32]string{
		0: "DVR_STATUS",
	}
	DvrStatus_Format_value = map[string]int32{
		"DVR_STATUS": 0,
	}
)

func (x DvrStatus_Format) Enum() *DvrStatus_Format {
	p := new(DvrStatus_Format)
	*p = x
	return p
}

func (x DvrStatus_Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DvrStatus_Format) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_presentation_proto_enumTypes[35].Descriptor()
}

func (DvrStatus_Format) Type() protoreflect.EnumType {
	return &file_proto_presentation_proto_enumTypes[35]
}

func (x DvrStatus_Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DvrStatus_Format.Descriptor instead.
func (DvrStatus_Format) EnumDescriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{79, 0}
}

type SubscriptionInfo_Format int32

const (
	SubscriptionInfo_SUBSCRIPTION SubscriptionInfo_Format = 0
)

// Enum value maps for SubscriptionInfo_Format.
var (
	SubscriptionInfo_Format_name = map[int32]string{
		0: "SUBSCRIPTION",
	}
	SubscriptionInfo_Format_value = map[string]int32{
		"SUBSCRIPTION": 0,
	}
)

func (x SubscriptionInfo_Format) Enum() *SubscriptionInfo_Format {
	p := new(SubscriptionInfo_Format)
	*p = x
	return p
}

func (x SubscriptionInfo_Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubscriptionInfo_Format) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_presentation_proto_enumTypes[36].Descriptor()
}

func (SubscriptionInfo_Format) Type() protoreflect.EnumType {
	return &file_proto_presentation_proto_enumTypes[36]
}

func (x SubscriptionInfo_Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubscriptionInfo_Format.Descriptor instead.
func (SubscriptionInfo_Format) EnumDescriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{80, 0}
}

type DeviceInfo_Format int32

const (
	DeviceInfo_DEVICE DeviceInfo_Format = 0
)

// Enum value maps for DeviceInfo_Format.
var (
	DeviceInfo_Format_name = map[int32]string{
		0: "DEVICE",
	}
	DeviceInfo_Format_value = map[string]int32{
		"DEVICE": 0,
	}
)

func (x DeviceInfo_Format) Enum() *DeviceInfo_Format {
	p := new(DeviceInfo_Format)
	*p = x
	return p
}

func (x DeviceInfo_Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceInfo_Format) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_presentation_proto_enumTypes[37].Descriptor()
}

func (DeviceInfo_Format) Type() protoreflect.EnumType {
	return &file_proto_presentation_proto_enumTypes[37]
}

func (x DeviceInfo_Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceInfo_Format.Descriptor instead.
func (DeviceInfo_Format) EnumDescriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{81, 0}
}

type Storage_Format int32

const (
	Storage_LSDVR Storage_Format = 0
	Storage_RSDVR Storage_Format = 1
)

// Enum value maps for Storage_Format.
var (
	Storage_Format_name = map[int32]string{
		0: "LSDVR",
		1: "RSDVR",
	}
	Storage_Format_value = map[string]int32{
		"LSDVR": 0,
		"RSDVR": 1,
	}
)

func (x Storage_Format) Enum() *Storage_Format {
	p := new(Storage_Format)
	*p = x
	return p
}

func (x Storage_Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Storage_Format) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_presentation_proto_enumTypes[38].Descriptor()
}

func (Storage_Format) Type() protoreflect.EnumType {
	return &file_proto_presentation_proto_enumTypes[38]
}

func (x Storage_Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Storage_Format.Descriptor instead.
func (Storage_Format) EnumDescriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{82, 0}
}

type LsdvrVolumeState_Format int32

const (
	LsdvrVolumeState_DVR_STATUS   LsdvrVolumeState_Format = 0
	LsdvrVolumeState_DISCONNECTED LsdvrVolumeState_Format = 1
)

// Enum value maps for LsdvrVolumeState_Format.
var (
	LsdvrVolumeState_Format_name = map[int32]string{
		0: "DVR_STATUS",
		1: "DISCONNECTED",
	}
	LsdvrVolumeState_Format_value = map[string]int32{
		"DVR_STATUS":   0,
		"DISCONNECTED": 1,
	}
)

func (x LsdvrVolumeState_Format) Enum() *LsdvrVolumeState_Format {
	p := new(LsdvrVolumeState_Format)
	*p = x
	return p
}

func (x LsdvrVolumeState_Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LsdvrVolumeState_Format) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_presentation_proto_enumTypes[39].Descriptor()
}

func (LsdvrVolumeState_Format) Type() protoreflect.EnumType {
	return &file_proto_presentation_proto_enumTypes[39]
}

func (x LsdvrVolumeState_Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LsdvrVolumeState_Format.Descriptor instead.
func (LsdvrVolumeState_Format) EnumDescriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{84, 0}
}

type MoreActionsScreen_Position int32

const (
	MoreActionsScreen_Overlay MoreActionsScreen_Position = 0
	MoreActionsScreen_Regular MoreActionsScreen_Position = 1
)

// Enum value maps for MoreActionsScreen_Position.
var (
	MoreActionsScreen_Position_name = map[int32]string{
		0: "Overlay",
		1: "Regular",
	}
	MoreActionsScreen_Position_value = map[string]int32{
		"Overlay": 0,
		"Regular": 1,
	}
)

func (x MoreActionsScreen_Position) Enum() *MoreActionsScreen_Position {
	p := new(MoreActionsScreen_Position)
	*p = x
	return p
}

func (x MoreActionsScreen_Position) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MoreActionsScreen_Position) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_presentation_proto_enumTypes[40].Descriptor()
}

func (MoreActionsScreen_Position) Type() protoreflect.EnumType {
	return &file_proto_presentation_proto_enumTypes[40]
}

func (x MoreActionsScreen_Position) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MoreActionsScreen_Position.Descriptor instead.
func (MoreActionsScreen_Position) EnumDescriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{88, 0}
}

type SpecialHrefList_Type int32

const (
	SpecialHrefList_FILTERS SpecialHrefList_Type = 0
)

// Enum value maps for SpecialHrefList_Type.
var (
	SpecialHrefList_Type_name = map[int32]string{
		0: "FILTERS",
	}
	SpecialHrefList_Type_value = map[string]int32{
		"FILTERS": 0,
	}
)

func (x SpecialHrefList_Type) Enum() *SpecialHrefList_Type {
	p := new(SpecialHrefList_Type)
	*p = x
	return p
}

func (x SpecialHrefList_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpecialHrefList_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_presentation_proto_enumTypes[41].Descriptor()
}

func (SpecialHrefList_Type) Type() protoreflect.EnumType {
	return &file_proto_presentation_proto_enumTypes[41]
}

func (x SpecialHrefList_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpecialHrefList_Type.Descriptor instead.
func (SpecialHrefList_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{92, 0}
}

type CheckDrmRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserGuid    string `protobuf:"bytes,1,opt,name=user_guid,json=userGuid,proto3" json:"user_guid,omitempty"`
	ChannelGuid string `protobuf:"bytes,2,opt,name=channel_guid,json=channelGuid,proto3" json:"channel_guid,omitempty"`
	AssetGuid   string `protobuf:"bytes,3,opt,name=asset_guid,json=assetGuid,proto3" json:"asset_guid,omitempty"`
	ProfileGuid string `protobuf:"bytes,4,opt,name=profile_guid,json=profileGuid,proto3" json:"profile_guid,omitempty"`
}

func (x *CheckDrmRequest) Reset() {
	*x = CheckDrmRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckDrmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckDrmRequest) ProtoMessage() {}

func (x *CheckDrmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckDrmRequest.ProtoReflect.Descriptor instead.
func (*CheckDrmRequest) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{0}
}

func (x *CheckDrmRequest) GetUserGuid() string {
	if x != nil {
		return x.UserGuid
	}
	return ""
}

func (x *CheckDrmRequest) GetChannelGuid() string {
	if x != nil {
		return x.ChannelGuid
	}
	return ""
}

func (x *CheckDrmRequest) GetAssetGuid() string {
	if x != nil {
		return x.AssetGuid
	}
	return ""
}

func (x *CheckDrmRequest) GetProfileGuid() string {
	if x != nil {
		return x.ProfileGuid
	}
	return ""
}

type CheckDrmResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entitled bool `protobuf:"varint,1,opt,name=entitled,proto3" json:"entitled,omitempty"`
}

func (x *CheckDrmResponse) Reset() {
	*x = CheckDrmResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckDrmResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckDrmResponse) ProtoMessage() {}

func (x *CheckDrmResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckDrmResponse.ProtoReflect.Descriptor instead.
func (*CheckDrmResponse) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{1}
}

func (x *CheckDrmResponse) GetEntitled() bool {
	if x != nil {
		return x.Entitled
	}
	return false
}

type LookupRecGuidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserGuid      string                       `protobuf:"bytes,1,opt,name=user_guid,json=userGuid,proto3" json:"user_guid,omitempty"`
	RecGuid       string                       `protobuf:"bytes,2,opt,name=rec_guid,json=recGuid,proto3" json:"rec_guid,omitempty"`
	RecType       LookupRecGuidRequest_RecType `protobuf:"varint,3,opt,name=rec_type,json=recType,proto3,enum=sling.cmw.presentation.LookupRecGuidRequest_RecType" json:"rec_type,omitempty"`
	LsdvrVolumeId string                       `protobuf:"bytes,4,opt,name=lsdvr_volume_id,json=lsdvrVolumeId,proto3" json:"lsdvr_volume_id,omitempty"`
}

func (x *LookupRecGuidRequest) Reset() {
	*x = LookupRecGuidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookupRecGuidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupRecGuidRequest) ProtoMessage() {}

func (x *LookupRecGuidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupRecGuidRequest.ProtoReflect.Descriptor instead.
func (*LookupRecGuidRequest) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{2}
}

func (x *LookupRecGuidRequest) GetUserGuid() string {
	if x != nil {
		return x.UserGuid
	}
	return ""
}

func (x *LookupRecGuidRequest) GetRecGuid() string {
	if x != nil {
		return x.RecGuid
	}
	return ""
}

func (x *LookupRecGuidRequest) GetRecType() LookupRecGuidRequest_RecType {
	if x != nil {
		return x.RecType
	}
	return LookupRecGuidRequest_BOTH
}

func (x *LookupRecGuidRequest) GetLsdvrVolumeId() string {
	if x != nil {
		return x.LsdvrVolumeId
	}
	return ""
}

type LookupRecGuidResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetGuid string `protobuf:"bytes,1,opt,name=asset_guid,json=assetGuid,proto3" json:"asset_guid,omitempty"`
}

func (x *LookupRecGuidResponse) Reset() {
	*x = LookupRecGuidResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookupRecGuidResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupRecGuidResponse) ProtoMessage() {}

func (x *LookupRecGuidResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupRecGuidResponse.ProtoReflect.Descriptor instead.
func (*LookupRecGuidResponse) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{3}
}

func (x *LookupRecGuidResponse) GetAssetGuid() string {
	if x != nil {
		return x.AssetGuid
	}
	return ""
}

type LookupRuleGuidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserGuid      string                         `protobuf:"bytes,1,opt,name=user_guid,json=userGuid,proto3" json:"user_guid,omitempty"`
	RuleGuid      string                         `protobuf:"bytes,2,opt,name=rule_guid,json=ruleGuid,proto3" json:"rule_guid,omitempty"`
	RuleType      LookupRuleGuidRequest_RuleType `protobuf:"varint,3,opt,name=rule_type,json=ruleType,proto3,enum=sling.cmw.presentation.LookupRuleGuidRequest_RuleType" json:"rule_type,omitempty"`
	LsdvrVolumeId string                         `protobuf:"bytes,4,opt,name=lsdvr_volume_id,json=lsdvrVolumeId,proto3" json:"lsdvr_volume_id,omitempty"`
}

func (x *LookupRuleGuidRequest) Reset() {
	*x = LookupRuleGuidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookupRuleGuidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupRuleGuidRequest) ProtoMessage() {}

func (x *LookupRuleGuidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupRuleGuidRequest.ProtoReflect.Descriptor instead.
func (*LookupRuleGuidRequest) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{4}
}

func (x *LookupRuleGuidRequest) GetUserGuid() string {
	if x != nil {
		return x.UserGuid
	}
	return ""
}

func (x *LookupRuleGuidRequest) GetRuleGuid() string {
	if x != nil {
		return x.RuleGuid
	}
	return ""
}

func (x *LookupRuleGuidRequest) GetRuleType() LookupRuleGuidRequest_RuleType {
	if x != nil {
		return x.RuleType
	}
	return LookupRuleGuidRequest_BOTH
}

func (x *LookupRuleGuidRequest) GetLsdvrVolumeId() string {
	if x != nil {
		return x.LsdvrVolumeId
	}
	return ""
}

type LookupRuleGuidResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FranchiseGuid string `protobuf:"bytes,1,opt,name=franchise_guid,json=franchiseGuid,proto3" json:"franchise_guid,omitempty"`
}

func (x *LookupRuleGuidResponse) Reset() {
	*x = LookupRuleGuidResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookupRuleGuidResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupRuleGuidResponse) ProtoMessage() {}

func (x *LookupRuleGuidResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupRuleGuidResponse.ProtoReflect.Descriptor instead.
func (*LookupRuleGuidResponse) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{5}
}

func (x *LookupRuleGuidResponse) GetFranchiseGuid() string {
	if x != nil {
		return x.FranchiseGuid
	}
	return ""
}

type PgQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqState       *RequestState          `protobuf:"bytes,1,opt,name=req_state,json=reqState,proto3" json:"req_state,omitempty"`
	ChannelId      string                 `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Time           *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	Page           int32                  `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	PageSize       string                 `protobuf:"bytes,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Screen         string                 `protobuf:"bytes,6,opt,name=screen,proto3" json:"screen,omitempty"`
	Ribbon         string                 `protobuf:"bytes,7,opt,name=ribbon,proto3" json:"ribbon,omitempty"`
	Tile           string                 `protobuf:"bytes,8,opt,name=tile,proto3" json:"tile,omitempty"`
	MockGuidSource bool                   `protobuf:"varint,9,opt,name=mock_guid_source,json=mockGuidSource,proto3" json:"mock_guid_source,omitempty"`
	SearchTerm     string                 `protobuf:"bytes,10,opt,name=search_term,json=searchTerm,proto3" json:"search_term,omitempty"`
	Sort           string                 `protobuf:"bytes,11,opt,name=sort,proto3" json:"sort,omitempty"`
	IsRecentSearch bool                   `protobuf:"varint,12,opt,name=is_recent_search,json=isRecentSearch,proto3" json:"is_recent_search,omitempty"`
	VerticalScroll bool                   `protobuf:"varint,13,opt,name=vertical_scroll,json=verticalScroll,proto3" json:"vertical_scroll,omitempty"`
	Filter         string                 `protobuf:"bytes,14,opt,name=filter,proto3" json:"filter,omitempty"`
	QueryParams    map[string]string      `protobuf:"bytes,15,rep,name=query_params,json=queryParams,proto3" json:"query_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Payload        []byte                 `protobuf:"bytes,16,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *PgQuery) Reset() {
	*x = PgQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PgQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PgQuery) ProtoMessage() {}

func (x *PgQuery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PgQuery.ProtoReflect.Descriptor instead.
func (*PgQuery) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{6}
}

func (x *PgQuery) GetReqState() *RequestState {
	if x != nil {
		return x.ReqState
	}
	return nil
}

func (x *PgQuery) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *PgQuery) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *PgQuery) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PgQuery) GetPageSize() string {
	if x != nil {
		return x.PageSize
	}
	return ""
}

func (x *PgQuery) GetScreen() string {
	if x != nil {
		return x.Screen
	}
	return ""
}

func (x *PgQuery) GetRibbon() string {
	if x != nil {
		return x.Ribbon
	}
	return ""
}

func (x *PgQuery) GetTile() string {
	if x != nil {
		return x.Tile
	}
	return ""
}

func (x *PgQuery) GetMockGuidSource() bool {
	if x != nil {
		return x.MockGuidSource
	}
	return false
}

func (x *PgQuery) GetSearchTerm() string {
	if x != nil {
		return x.SearchTerm
	}
	return ""
}

func (x *PgQuery) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *PgQuery) GetIsRecentSearch() bool {
	if x != nil {
		return x.IsRecentSearch
	}
	return false
}

func (x *PgQuery) GetVerticalScroll() bool {
	if x != nil {
		return x.VerticalScroll
	}
	return false
}

func (x *PgQuery) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *PgQuery) GetQueryParams() map[string]string {
	if x != nil {
		return x.QueryParams
	}
	return nil
}

func (x *PgQuery) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type GracenoteChannelsQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqState *RequestState `protobuf:"bytes,1,opt,name=req_state,json=reqState,proto3" json:"req_state,omitempty"`
}

func (x *GracenoteChannelsQuery) Reset() {
	*x = GracenoteChannelsQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GracenoteChannelsQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GracenoteChannelsQuery) ProtoMessage() {}

func (x *GracenoteChannelsQuery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GracenoteChannelsQuery.ProtoReflect.Descriptor instead.
func (*GracenoteChannelsQuery) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{7}
}

func (x *GracenoteChannelsQuery) GetReqState() *RequestState {
	if x != nil {
		return x.ReqState
	}
	return nil
}

type GracenoteChannelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GracenoteChannels []*GracenoteChannel `protobuf:"bytes,1,rep,name=gracenote_channels,json=gracenoteChannels,proto3" json:"gracenote_channels,omitempty"`
}

func (x *GracenoteChannelsResponse) Reset() {
	*x = GracenoteChannelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GracenoteChannelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GracenoteChannelsResponse) ProtoMessage() {}

func (x *GracenoteChannelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GracenoteChannelsResponse.ProtoReflect.Descriptor instead.
func (*GracenoteChannelsResponse) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{8}
}

func (x *GracenoteChannelsResponse) GetGracenoteChannels() []*GracenoteChannel {
	if x != nil {
		return x.GracenoteChannels
	}
	return nil
}

type GracenoteChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelGuid string `protobuf:"bytes,1,opt,name=channel_guid,json=channelGuid,proto3" json:"channel_guid,omitempty"`
	GracenoteId string `protobuf:"bytes,2,opt,name=gracenote_id,json=gracenoteId,proto3" json:"gracenote_id,omitempty"`
	DeepLink    string `protobuf:"bytes,3,opt,name=deep_link,json=deepLink,proto3" json:"deep_link,omitempty"`
}

func (x *GracenoteChannel) Reset() {
	*x = GracenoteChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GracenoteChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GracenoteChannel) ProtoMessage() {}

func (x *GracenoteChannel) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GracenoteChannel.ProtoReflect.Descriptor instead.
func (*GracenoteChannel) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{9}
}

func (x *GracenoteChannel) GetChannelGuid() string {
	if x != nil {
		return x.ChannelGuid
	}
	return ""
}

func (x *GracenoteChannel) GetGracenoteId() string {
	if x != nil {
		return x.GracenoteId
	}
	return ""
}

func (x *GracenoteChannel) GetDeepLink() string {
	if x != nil {
		return x.DeepLink
	}
	return ""
}

type TabQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqState    *RequestState     `protobuf:"bytes,1,opt,name=req_state,json=reqState,proto3" json:"req_state,omitempty"`
	TabId       string            `protobuf:"bytes,2,opt,name=tab_id,json=tabId,proto3" json:"tab_id,omitempty"`
	QueryParams map[string]string `protobuf:"bytes,3,rep,name=query_params,json=queryParams,proto3" json:"query_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TabQuery) Reset() {
	*x = TabQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TabQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabQuery) ProtoMessage() {}

func (x *TabQuery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabQuery.ProtoReflect.Descriptor instead.
func (*TabQuery) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{10}
}

func (x *TabQuery) GetReqState() *RequestState {
	if x != nil {
		return x.ReqState
	}
	return nil
}

func (x *TabQuery) GetTabId() string {
	if x != nil {
		return x.TabId
	}
	return ""
}

func (x *TabQuery) GetQueryParams() map[string]string {
	if x != nil {
		return x.QueryParams
	}
	return nil
}

type DeepLinkQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqState          *RequestState           `protobuf:"bytes,1,opt,name=req_state,json=reqState,proto3" json:"req_state,omitempty"`
	Type              string                  `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Identifier        string                  `protobuf:"bytes,3,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Action            string                  `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
	StartMs           int32                   `protobuf:"varint,5,opt,name=start_ms,json=startMs,proto3" json:"start_ms,omitempty"`
	TrackingId        string                  `protobuf:"bytes,6,opt,name=tracking_id,json=trackingId,proto3" json:"tracking_id,omitempty"`
	WatchPartyHostKey *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=watch_party_host_key,json=watchPartyHostKey,proto3" json:"watch_party_host_key,omitempty"`
	Source            string                  `protobuf:"bytes,8,opt,name=source,proto3" json:"source,omitempty"`
	LinkContext       string                  `protobuf:"bytes,9,opt,name=link_context,json=linkContext,proto3" json:"link_context,omitempty"`
}

func (x *DeepLinkQuery) Reset() {
	*x = DeepLinkQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeepLinkQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeepLinkQuery) ProtoMessage() {}

func (x *DeepLinkQuery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeepLinkQuery.ProtoReflect.Descriptor instead.
func (*DeepLinkQuery) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{11}
}

func (x *DeepLinkQuery) GetReqState() *RequestState {
	if x != nil {
		return x.ReqState
	}
	return nil
}

func (x *DeepLinkQuery) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DeepLinkQuery) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *DeepLinkQuery) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *DeepLinkQuery) GetStartMs() int32 {
	if x != nil {
		return x.StartMs
	}
	return 0
}

func (x *DeepLinkQuery) GetTrackingId() string {
	if x != nil {
		return x.TrackingId
	}
	return ""
}

func (x *DeepLinkQuery) GetWatchPartyHostKey() *wrapperspb.StringValue {
	if x != nil {
		return x.WatchPartyHostKey
	}
	return nil
}

func (x *DeepLinkQuery) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *DeepLinkQuery) GetLinkContext() string {
	if x != nil {
		return x.LinkContext
	}
	return ""
}

type DeepLinkListQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqState *RequestState              `protobuf:"bytes,1,opt,name=req_state,json=reqState,proto3" json:"req_state,omitempty"`
	Queries  []*DeeplinkElementQuery    `protobuf:"bytes,2,rep,name=queries,proto3" json:"queries,omitempty"`
	Source   string                     `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	TileType DeepLinkListQuery_TileType `protobuf:"varint,4,opt,name=tile_type,json=tileType,proto3,enum=sling.cmw.presentation.DeepLinkListQuery_TileType" json:"tile_type,omitempty"`
}

func (x *DeepLinkListQuery) Reset() {
	*x = DeepLinkListQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeepLinkListQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeepLinkListQuery) ProtoMessage() {}

func (x *DeepLinkListQuery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeepLinkListQuery.ProtoReflect.Descriptor instead.
func (*DeepLinkListQuery) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{12}
}

func (x *DeepLinkListQuery) GetReqState() *RequestState {
	if x != nil {
		return x.ReqState
	}
	return nil
}

func (x *DeepLinkListQuery) GetQueries() []*DeeplinkElementQuery {
	if x != nil {
		return x.Queries
	}
	return nil
}

func (x *DeepLinkListQuery) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *DeepLinkListQuery) GetTileType() DeepLinkListQuery_TileType {
	if x != nil {
		return x.TileType
	}
	return DeepLinkListQuery_TILE_TYPE_PROGRAM
}

type DeeplinkElementQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	TrackingId string `protobuf:"bytes,2,opt,name=tracking_id,json=trackingId,proto3" json:"tracking_id,omitempty"`
}

func (x *DeeplinkElementQuery) Reset() {
	*x = DeeplinkElementQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeeplinkElementQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeeplinkElementQuery) ProtoMessage() {}

func (x *DeeplinkElementQuery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeeplinkElementQuery.ProtoReflect.Descriptor instead.
func (*DeeplinkElementQuery) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{13}
}

func (x *DeeplinkElementQuery) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *DeeplinkElementQuery) GetTrackingId() string {
	if x != nil {
		return x.TrackingId
	}
	return ""
}

type DeepLinkListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deeplinks map[string]*DeepLinkResponse `protobuf:"bytes,1,rep,name=deeplinks,proto3" json:"deeplinks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DeepLinkListResponse) Reset() {
	*x = DeepLinkListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeepLinkListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeepLinkListResponse) ProtoMessage() {}

func (x *DeepLinkListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeepLinkListResponse.ProtoReflect.Descriptor instead.
func (*DeepLinkListResponse) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{14}
}

func (x *DeepLinkListResponse) GetDeeplinks() map[string]*DeepLinkResponse {
	if x != nil {
		return x.Deeplinks
	}
	return nil
}

type DetailContentQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqState  *RequestState    `protobuf:"bytes,1,opt,name=req_state,json=reqState,proto3" json:"req_state,omitempty"`
	Type      DetailScreenType `protobuf:"varint,2,opt,name=type,proto3,enum=sling.cmw.presentation.DetailScreenType" json:"type,omitempty"`
	Id        string           `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	ProgramId string           `protobuf:"bytes,4,opt,name=programId,proto3" json:"programId,omitempty"`
}

func (x *DetailContentQuery) Reset() {
	*x = DetailContentQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailContentQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailContentQuery) ProtoMessage() {}

func (x *DetailContentQuery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailContentQuery.ProtoReflect.Descriptor instead.
func (*DetailContentQuery) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{15}
}

func (x *DetailContentQuery) GetReqState() *RequestState {
	if x != nil {
		return x.ReqState
	}
	return nil
}

func (x *DetailContentQuery) GetType() DetailScreenType {
	if x != nil {
		return x.Type
	}
	return DetailScreenType_DETAIL_CHANNEL
}

func (x *DetailContentQuery) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DetailContentQuery) GetProgramId() string {
	if x != nil {
		return x.ProgramId
	}
	return ""
}

type DetailContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type             DetailContent_DetailContentType `protobuf:"varint,1,opt,name=type,proto3,enum=sling.cmw.presentation.DetailContent_DetailContentType" json:"type,omitempty"`
	ActiveTile       *Tile                           `protobuf:"bytes,2,opt,name=active_tile,json=activeTile,proto3" json:"active_tile,omitempty"`
	Ribbon           *Ribbon                         `protobuf:"bytes,3,opt,name=ribbon,proto3" json:"ribbon,omitempty"`
	ExpiresAt        *timestamppb.Timestamp          `protobuf:"bytes,4,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	InvalidationKeys []string                        `protobuf:"bytes,5,rep,name=invalidation_keys,json=invalidationKeys,proto3" json:"invalidation_keys,omitempty"`
}

func (x *DetailContent) Reset() {
	*x = DetailContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailContent) ProtoMessage() {}

func (x *DetailContent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailContent.ProtoReflect.Descriptor instead.
func (*DetailContent) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{16}
}

func (x *DetailContent) GetType() DetailContent_DetailContentType {
	if x != nil {
		return x.Type
	}
	return DetailContent_TILE
}

func (x *DetailContent) GetActiveTile() *Tile {
	if x != nil {
		return x.ActiveTile
	}
	return nil
}

func (x *DetailContent) GetRibbon() *Ribbon {
	if x != nil {
		return x.Ribbon
	}
	return nil
}

func (x *DetailContent) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *DetailContent) GetInvalidationKeys() []string {
	if x != nil {
		return x.InvalidationKeys
	}
	return nil
}

type DetailActionsQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqState *RequestState    `protobuf:"bytes,1,opt,name=req_state,json=reqState,proto3" json:"req_state,omitempty"`
	Type     DetailScreenType `protobuf:"varint,2,opt,name=type,proto3,enum=sling.cmw.presentation.DetailScreenType" json:"type,omitempty"`
	Id       string           `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DetailActionsQuery) Reset() {
	*x = DetailActionsQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailActionsQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailActionsQuery) ProtoMessage() {}

func (x *DetailActionsQuery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailActionsQuery.ProtoReflect.Descriptor instead.
func (*DetailActionsQuery) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{17}
}

func (x *DetailActionsQuery) GetReqState() *RequestState {
	if x != nil {
		return x.ReqState
	}
	return nil
}

func (x *DetailActionsQuery) GetType() DetailScreenType {
	if x != nil {
		return x.Type
	}
	return DetailScreenType_DETAIL_CHANNEL
}

func (x *DetailActionsQuery) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ChannelQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqState *RequestState `protobuf:"bytes,1,opt,name=req_state,json=reqState,proto3" json:"req_state,omitempty"`
}

func (x *ChannelQuery) Reset() {
	*x = ChannelQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelQuery) ProtoMessage() {}

func (x *ChannelQuery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelQuery.ProtoReflect.Descriptor instead.
func (*ChannelQuery) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{18}
}

func (x *ChannelQuery) GetReqState() *RequestState {
	if x != nil {
		return x.ReqState
	}
	return nil
}

type DetailActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type             DetailActions_DetailActionsType `protobuf:"varint,1,opt,name=type,proto3,enum=sling.cmw.presentation.DetailActions_DetailActionsType" json:"type,omitempty"`
	Actions          map[string]*Action              `protobuf:"bytes,2,rep,name=actions,proto3" json:"actions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ActionSequence   []Action_Type                   `protobuf:"varint,3,rep,packed,name=action_sequence,json=actionSequence,proto3,enum=sling.cmw.presentation.Action_Type" json:"action_sequence,omitempty"`
	InvalidationKeys []string                        `protobuf:"bytes,4,rep,name=invalidation_keys,json=invalidationKeys,proto3" json:"invalidation_keys,omitempty"`
}

func (x *DetailActions) Reset() {
	*x = DetailActions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailActions) ProtoMessage() {}

func (x *DetailActions) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailActions.ProtoReflect.Descriptor instead.
func (*DetailActions) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{19}
}

func (x *DetailActions) GetType() DetailActions_DetailActionsType {
	if x != nil {
		return x.Type
	}
	return DetailActions_CHANNEL
}

func (x *DetailActions) GetActions() map[string]*Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *DetailActions) GetActionSequence() []Action_Type {
	if x != nil {
		return x.ActionSequence
	}
	return nil
}

func (x *DetailActions) GetInvalidationKeys() []string {
	if x != nil {
		return x.InvalidationKeys
	}
	return nil
}

type DeepLinkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actions          map[string]*Action `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PrimaryAction    *ActionTypeValue   `protobuf:"bytes,2,opt,name=primary_action,json=primaryAction,proto3" json:"primary_action,omitempty"`
	TrackingId       string             `protobuf:"bytes,4,opt,name=tracking_id,json=trackingId,proto3" json:"tracking_id,omitempty"`
	IsParentalLocked bool               `protobuf:"varint,5,opt,name=is_parental_locked,json=isParentalLocked,proto3" json:"is_parental_locked,omitempty"`
	Image            *Image             `protobuf:"bytes,6,opt,name=image,proto3" json:"image,omitempty"`
	Errors           []*Error           `protobuf:"bytes,7,rep,name=errors,proto3" json:"errors,omitempty"`
	Title            string             `protobuf:"bytes,8,opt,name=title,proto3" json:"title,omitempty"`
	SecondaryAction  *ActionTypeValue   `protobuf:"bytes,9,opt,name=secondary_action,json=secondaryAction,proto3" json:"secondary_action,omitempty"`
	ChannelGuid      string             `protobuf:"bytes,10,opt,name=channel_guid,json=channelGuid,proto3" json:"channel_guid,omitempty"`
}

func (x *DeepLinkResponse) Reset() {
	*x = DeepLinkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeepLinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeepLinkResponse) ProtoMessage() {}

func (x *DeepLinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeepLinkResponse.ProtoReflect.Descriptor instead.
func (*DeepLinkResponse) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{20}
}

func (x *DeepLinkResponse) GetActions() map[string]*Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *DeepLinkResponse) GetPrimaryAction() *ActionTypeValue {
	if x != nil {
		return x.PrimaryAction
	}
	return nil
}

func (x *DeepLinkResponse) GetTrackingId() string {
	if x != nil {
		return x.TrackingId
	}
	return ""
}

func (x *DeepLinkResponse) GetIsParentalLocked() bool {
	if x != nil {
		return x.IsParentalLocked
	}
	return false
}

func (x *DeepLinkResponse) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *DeepLinkResponse) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *DeepLinkResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DeepLinkResponse) GetSecondaryAction() *ActionTypeValue {
	if x != nil {
		return x.SecondaryAction
	}
	return nil
}

func (x *DeepLinkResponse) GetChannelGuid() string {
	if x != nil {
		return x.ChannelGuid
	}
	return ""
}

type RecentSearch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Term          string             `protobuf:"bytes,1,opt,name=term,proto3" json:"term,omitempty"`
	Actions       map[string]*Action `protobuf:"bytes,2,rep,name=actions,proto3" json:"actions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PrimaryAction *ActionTypeValue   `protobuf:"bytes,3,opt,name=primary_action,json=primaryAction,proto3" json:"primary_action,omitempty"`
}

func (x *RecentSearch) Reset() {
	*x = RecentSearch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecentSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecentSearch) ProtoMessage() {}

func (x *RecentSearch) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecentSearch.ProtoReflect.Descriptor instead.
func (*RecentSearch) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{21}
}

func (x *RecentSearch) GetTerm() string {
	if x != nil {
		return x.Term
	}
	return ""
}

func (x *RecentSearch) GetActions() map[string]*Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *RecentSearch) GetPrimaryAction() *ActionTypeValue {
	if x != nil {
		return x.PrimaryAction
	}
	return nil
}

type RecentSearches struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title    string          `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Searches []*RecentSearch `protobuf:"bytes,2,rep,name=searches,proto3" json:"searches,omitempty"`
}

func (x *RecentSearches) Reset() {
	*x = RecentSearches{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecentSearches) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecentSearches) ProtoMessage() {}

func (x *RecentSearches) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecentSearches.ProtoReflect.Descriptor instead.
func (*RecentSearches) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{22}
}

func (x *RecentSearches) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *RecentSearches) GetSearches() []*RecentSearch {
	if x != nil {
		return x.Searches
	}
	return nil
}

type Screen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ribbons                   []*Ribbon                `protobuf:"bytes,1,rep,name=ribbons,proto3" json:"ribbons,omitempty"`
	Title                     string                   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	HideRibbonTitles          bool                     `protobuf:"varint,3,opt,name=hide_ribbon_titles,json=hideRibbonTitles,proto3" json:"hide_ribbon_titles,omitempty"`
	VerticalScroll            bool                     `protobuf:"varint,4,opt,name=vertical_scroll,json=verticalScroll,proto3" json:"vertical_scroll,omitempty"`
	Format                    Screen_Format            `protobuf:"varint,5,opt,name=format,proto3,enum=sling.cmw.presentation.Screen_Format" json:"format,omitempty"`
	Errors                    []*Error                 `protobuf:"bytes,6,rep,name=errors,proto3" json:"errors,omitempty"`
	Actions                   map[string]*ScreenAction `protobuf:"bytes,7,rep,name=actions,proto3" json:"actions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RecentSearches            *RecentSearches          `protobuf:"bytes,8,opt,name=recent_searches,json=recentSearches,proto3" json:"recent_searches,omitempty"`
	Banner                    *Banner                  `protobuf:"bytes,9,opt,name=banner,proto3" json:"banner,omitempty"`
	Channels                  []*Channel               `protobuf:"bytes,10,rep,name=channels,proto3" json:"channels,omitempty"`
	Grid                      *Grid                    `protobuf:"bytes,11,opt,name=grid,proto3" json:"grid,omitempty"`
	GridSortActions           []*GridGuideAction       `protobuf:"bytes,12,rep,name=grid_sort_actions,json=gridSortActions,proto3" json:"grid_sort_actions,omitempty"`
	GridFilterActions         []*GridGuideAction       `protobuf:"bytes,13,rep,name=grid_filter_actions,json=gridFilterActions,proto3" json:"grid_filter_actions,omitempty"`
	LanguagePrompt            string                   `protobuf:"bytes,14,opt,name=language_prompt,json=languagePrompt,proto3" json:"language_prompt,omitempty"`
	NextPage                  *wrapperspb.Int32Value   `protobuf:"bytes,15,opt,name=next_page,json=nextPage,proto3" json:"next_page,omitempty"`
	PrevPage                  *wrapperspb.Int32Value   `protobuf:"bytes,16,opt,name=prev_page,json=prevPage,proto3" json:"prev_page,omitempty"`
	ChannelGuide              *ChannelGuide            `protobuf:"bytes,17,opt,name=channel_guide,json=channelGuide,proto3" json:"channel_guide,omitempty"`
	ChannelGuideSortActions   []*GridGuideAction       `protobuf:"bytes,18,rep,name=channel_guide_sort_actions,json=channelGuideSortActions,proto3" json:"channel_guide_sort_actions,omitempty"`
	ChannelGuideFilterActions []*GridGuideAction       `protobuf:"bytes,19,rep,name=channel_guide_filter_actions,json=channelGuideFilterActions,proto3" json:"channel_guide_filter_actions,omitempty"`
	BackgroundImage           *Image                   `protobuf:"bytes,20,opt,name=background_image,json=backgroundImage,proto3" json:"background_image,omitempty"`
	RecStatus                 *RecordingStatus         `protobuf:"bytes,21,opt,name=rec_status,json=recStatus,proto3" json:"rec_status,omitempty"`
	DvrStatus                 *DvrStatus               `protobuf:"bytes,22,opt,name=dvr_status,json=dvrStatus,proto3" json:"dvr_status,omitempty"`
	SubscriptionInfo          *SubscriptionInfo        `protobuf:"bytes,23,opt,name=subscription_info,json=subscriptionInfo,proto3" json:"subscription_info,omitempty"`
	DeviceInfo                *DeviceInfo              `protobuf:"bytes,24,opt,name=device_info,json=deviceInfo,proto3" json:"device_info,omitempty"`
	DvrStateInfo              *LsdvrVolumeState        `protobuf:"bytes,25,opt,name=dvr_state_info,json=dvrStateInfo,proto3" json:"dvr_state_info,omitempty"`
	Heading                   *wrapperspb.StringValue  `protobuf:"bytes,26,opt,name=heading,proto3" json:"heading,omitempty"`
	StackedAttributeList      []*AttributeList         `protobuf:"bytes,27,rep,name=stacked_attribute_list,json=stackedAttributeList,proto3" json:"stacked_attribute_list,omitempty"`
	R20GuideActions           []*GridGuideAction       `protobuf:"bytes,28,rep,name=r20_guide_actions,json=r20GuideActions,proto3" json:"r20_guide_actions,omitempty"`
	GuideFilters              []*GuideFilter           `protobuf:"bytes,29,rep,name=guide_filters,json=guideFilters,proto3" json:"guide_filters,omitempty"`
	QueryParams               map[string]string        `protobuf:"bytes,30,rep,name=query_params,json=queryParams,proto3" json:"query_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ExpiresAt                 *timestamppb.Timestamp   `protobuf:"bytes,31,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	HorizontalNextPage        *wrapperspb.Int32Value   `protobuf:"bytes,32,opt,name=horizontal_next_page,json=horizontalNextPage,proto3" json:"horizontal_next_page,omitempty"`
	HorizontalPrevPage        *wrapperspb.Int32Value   `protobuf:"bytes,33,opt,name=horizontal_prev_page,json=horizontalPrevPage,proto3" json:"horizontal_prev_page,omitempty"`
	VerticalNextPage          *wrapperspb.Int32Value   `protobuf:"bytes,34,opt,name=vertical_next_page,json=verticalNextPage,proto3" json:"vertical_next_page,omitempty"`
	VerticalPrevPage          *wrapperspb.Int32Value   `protobuf:"bytes,35,opt,name=vertical_prev_page,json=verticalPrevPage,proto3" json:"vertical_prev_page,omitempty"`
	StartTime                 *timestamppb.Timestamp   `protobuf:"bytes,36,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime                   *timestamppb.Timestamp   `protobuf:"bytes,37,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	SpecialRibbons            []*Ribbon                `protobuf:"bytes,38,rep,name=special_ribbons,json=specialRibbons,proto3" json:"special_ribbons,omitempty"`
	SpecialHrefs              []*SpecialHrefList       `protobuf:"bytes,39,rep,name=special_hrefs,json=specialHrefs,proto3" json:"special_hrefs,omitempty"`
	TotalVerticalPages        int32                    `protobuf:"varint,40,opt,name=total_vertical_pages,json=totalVerticalPages,proto3" json:"total_vertical_pages,omitempty"`
	Adobe                     *Adobe                   `protobuf:"bytes,41,opt,name=adobe,proto3" json:"adobe,omitempty"`
	SkipInterval              int32                    `protobuf:"varint,42,opt,name=skip_interval,json=skipInterval,proto3" json:"skip_interval,omitempty"`
}

func (x *Screen) Reset() {
	*x = Screen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Screen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Screen) ProtoMessage() {}

func (x *Screen) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Screen.ProtoReflect.Descriptor instead.
func (*Screen) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{23}
}

func (x *Screen) GetRibbons() []*Ribbon {
	if x != nil {
		return x.Ribbons
	}
	return nil
}

func (x *Screen) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Screen) GetHideRibbonTitles() bool {
	if x != nil {
		return x.HideRibbonTitles
	}
	return false
}

func (x *Screen) GetVerticalScroll() bool {
	if x != nil {
		return x.VerticalScroll
	}
	return false
}

func (x *Screen) GetFormat() Screen_Format {
	if x != nil {
		return x.Format
	}
	return Screen_STACKED
}

func (x *Screen) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *Screen) GetActions() map[string]*ScreenAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *Screen) GetRecentSearches() *RecentSearches {
	if x != nil {
		return x.RecentSearches
	}
	return nil
}

func (x *Screen) GetBanner() *Banner {
	if x != nil {
		return x.Banner
	}
	return nil
}

func (x *Screen) GetChannels() []*Channel {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *Screen) GetGrid() *Grid {
	if x != nil {
		return x.Grid
	}
	return nil
}

func (x *Screen) GetGridSortActions() []*GridGuideAction {
	if x != nil {
		return x.GridSortActions
	}
	return nil
}

func (x *Screen) GetGridFilterActions() []*GridGuideAction {
	if x != nil {
		return x.GridFilterActions
	}
	return nil
}

func (x *Screen) GetLanguagePrompt() string {
	if x != nil {
		return x.LanguagePrompt
	}
	return ""
}

func (x *Screen) GetNextPage() *wrapperspb.Int32Value {
	if x != nil {
		return x.NextPage
	}
	return nil
}

func (x *Screen) GetPrevPage() *wrapperspb.Int32Value {
	if x != nil {
		return x.PrevPage
	}
	return nil
}

func (x *Screen) GetChannelGuide() *ChannelGuide {
	if x != nil {
		return x.ChannelGuide
	}
	return nil
}

func (x *Screen) GetChannelGuideSortActions() []*GridGuideAction {
	if x != nil {
		return x.ChannelGuideSortActions
	}
	return nil
}

func (x *Screen) GetChannelGuideFilterActions() []*GridGuideAction {
	if x != nil {
		return x.ChannelGuideFilterActions
	}
	return nil
}

func (x *Screen) GetBackgroundImage() *Image {
	if x != nil {
		return x.BackgroundImage
	}
	return nil
}

func (x *Screen) GetRecStatus() *RecordingStatus {
	if x != nil {
		return x.RecStatus
	}
	return nil
}

func (x *Screen) GetDvrStatus() *DvrStatus {
	if x != nil {
		return x.DvrStatus
	}
	return nil
}

func (x *Screen) GetSubscriptionInfo() *SubscriptionInfo {
	if x != nil {
		return x.SubscriptionInfo
	}
	return nil
}

func (x *Screen) GetDeviceInfo() *DeviceInfo {
	if x != nil {
		return x.DeviceInfo
	}
	return nil
}

func (x *Screen) GetDvrStateInfo() *LsdvrVolumeState {
	if x != nil {
		return x.DvrStateInfo
	}
	return nil
}

func (x *Screen) GetHeading() *wrapperspb.StringValue {
	if x != nil {
		return x.Heading
	}
	return nil
}

func (x *Screen) GetStackedAttributeList() []*AttributeList {
	if x != nil {
		return x.StackedAttributeList
	}
	return nil
}

func (x *Screen) GetR20GuideActions() []*GridGuideAction {
	if x != nil {
		return x.R20GuideActions
	}
	return nil
}

func (x *Screen) GetGuideFilters() []*GuideFilter {
	if x != nil {
		return x.GuideFilters
	}
	return nil
}

func (x *Screen) GetQueryParams() map[string]string {
	if x != nil {
		return x.QueryParams
	}
	return nil
}

func (x *Screen) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *Screen) GetHorizontalNextPage() *wrapperspb.Int32Value {
	if x != nil {
		return x.HorizontalNextPage
	}
	return nil
}

func (x *Screen) GetHorizontalPrevPage() *wrapperspb.Int32Value {
	if x != nil {
		return x.HorizontalPrevPage
	}
	return nil
}

func (x *Screen) GetVerticalNextPage() *wrapperspb.Int32Value {
	if x != nil {
		return x.VerticalNextPage
	}
	return nil
}

func (x *Screen) GetVerticalPrevPage() *wrapperspb.Int32Value {
	if x != nil {
		return x.VerticalPrevPage
	}
	return nil
}

func (x *Screen) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Screen) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *Screen) GetSpecialRibbons() []*Ribbon {
	if x != nil {
		return x.SpecialRibbons
	}
	return nil
}

func (x *Screen) GetSpecialHrefs() []*SpecialHrefList {
	if x != nil {
		return x.SpecialHrefs
	}
	return nil
}

func (x *Screen) GetTotalVerticalPages() int32 {
	if x != nil {
		return x.TotalVerticalPages
	}
	return 0
}

func (x *Screen) GetAdobe() *Adobe {
	if x != nil {
		return x.Adobe
	}
	return nil
}

func (x *Screen) GetSkipInterval() int32 {
	if x != nil {
		return x.SkipInterval
	}
	return 0
}

type AttributeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttributeList []*Attribute `protobuf:"bytes,1,rep,name=attribute_list,json=attributeList,proto3" json:"attribute_list,omitempty"`
}

func (x *AttributeList) Reset() {
	*x = AttributeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeList) ProtoMessage() {}

func (x *AttributeList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributeList.ProtoReflect.Descriptor instead.
func (*AttributeList) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{24}
}

func (x *AttributeList) GetAttributeList() []*Attribute {
	if x != nil {
		return x.AttributeList
	}
	return nil
}

type Tabs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Href            string `protobuf:"bytes,1,opt,name=href,proto3" json:"href,omitempty"`
	UserTabs        []*Tab `protobuf:"bytes,2,rep,name=user_tabs,json=userTabs,proto3" json:"user_tabs,omitempty"`
	FocusedTab      int64  `protobuf:"varint,3,opt,name=focused_tab,json=focusedTab,proto3" json:"focused_tab,omitempty"`
	InvalidationKey string `protobuf:"bytes,4,opt,name=invalidation_key,json=invalidationKey,proto3" json:"invalidation_key,omitempty"`
}

func (x *Tabs) Reset() {
	*x = Tabs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tabs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tabs) ProtoMessage() {}

func (x *Tabs) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tabs.ProtoReflect.Descriptor instead.
func (*Tabs) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{25}
}

func (x *Tabs) GetHref() string {
	if x != nil {
		return x.Href
	}
	return ""
}

func (x *Tabs) GetUserTabs() []*Tab {
	if x != nil {
		return x.UserTabs
	}
	return nil
}

func (x *Tabs) GetFocusedTab() int64 {
	if x != nil {
		return x.FocusedTab
	}
	return 0
}

func (x *Tabs) GetInvalidationKey() string {
	if x != nil {
		return x.InvalidationKey
	}
	return ""
}

type Tab struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title         string             `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	PrimaryAction *ActionTypeValue   `protobuf:"bytes,3,opt,name=primary_action,json=primaryAction,proto3" json:"primary_action,omitempty"`
	Actions       map[string]*Action `protobuf:"bytes,4,rep,name=actions,proto3" json:"actions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Format        Tab_Format         `protobuf:"varint,5,opt,name=format,proto3,enum=sling.cmw.presentation.Tab_Format" json:"format,omitempty"`
	State         Tab_State          `protobuf:"varint,6,opt,name=state,proto3,enum=sling.cmw.presentation.Tab_State" json:"state,omitempty"`
	FocusAction   *ActionTypeValue   `protobuf:"bytes,7,opt,name=focus_action,json=focusAction,proto3" json:"focus_action,omitempty"`
	PersistAction *ActionTypeValue   `protobuf:"bytes,8,opt,name=persist_action,json=persistAction,proto3" json:"persist_action,omitempty"`
	OverlayTitle  string             `protobuf:"bytes,9,opt,name=overlay_title,json=overlayTitle,proto3" json:"overlay_title,omitempty"`
	BgColor       string             `protobuf:"bytes,10,opt,name=bg_color,json=bgColor,proto3" json:"bg_color,omitempty"`
	ProfileGuid   string             `protobuf:"bytes,11,opt,name=profile_guid,json=profileGuid,proto3" json:"profile_guid,omitempty"`
}

func (x *Tab) Reset() {
	*x = Tab{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tab) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tab) ProtoMessage() {}

func (x *Tab) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tab.ProtoReflect.Descriptor instead.
func (*Tab) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{26}
}

func (x *Tab) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Tab) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Tab) GetPrimaryAction() *ActionTypeValue {
	if x != nil {
		return x.PrimaryAction
	}
	return nil
}

func (x *Tab) GetActions() map[string]*Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *Tab) GetFormat() Tab_Format {
	if x != nil {
		return x.Format
	}
	return Tab_TAB
}

func (x *Tab) GetState() Tab_State {
	if x != nil {
		return x.State
	}
	return Tab_DISABLED
}

func (x *Tab) GetFocusAction() *ActionTypeValue {
	if x != nil {
		return x.FocusAction
	}
	return nil
}

func (x *Tab) GetPersistAction() *ActionTypeValue {
	if x != nil {
		return x.PersistAction
	}
	return nil
}

func (x *Tab) GetOverlayTitle() string {
	if x != nil {
		return x.OverlayTitle
	}
	return ""
}

func (x *Tab) GetBgColor() string {
	if x != nil {
		return x.BgColor
	}
	return ""
}

func (x *Tab) GetProfileGuid() string {
	if x != nil {
		return x.ProfileGuid
	}
	return ""
}

type Banner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Actions         map[string]*Action `protobuf:"bytes,2,rep,name=actions,proto3" json:"actions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PrimaryAction   string             `protobuf:"bytes,3,opt,name=primary_action,json=primaryAction,proto3" json:"primary_action,omitempty"`
	ActionSequence  []Action_Type      `protobuf:"varint,4,rep,packed,name=action_sequence,json=actionSequence,proto3,enum=sling.cmw.presentation.Action_Type" json:"action_sequence,omitempty"`
	DescriptionList []string           `protobuf:"bytes,5,rep,name=description_list,json=descriptionList,proto3" json:"description_list,omitempty"`
	Image           *Image             `protobuf:"bytes,6,opt,name=image,proto3" json:"image,omitempty"`
	Subtitle        string             `protobuf:"bytes,7,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	Title           string             `protobuf:"bytes,8,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *Banner) Reset() {
	*x = Banner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Banner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Banner) ProtoMessage() {}

func (x *Banner) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Banner.ProtoReflect.Descriptor instead.
func (*Banner) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{27}
}

func (x *Banner) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Banner) GetActions() map[string]*Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *Banner) GetPrimaryAction() string {
	if x != nil {
		return x.PrimaryAction
	}
	return ""
}

func (x *Banner) GetActionSequence() []Action_Type {
	if x != nil {
		return x.ActionSequence
	}
	return nil
}

func (x *Banner) GetDescriptionList() []string {
	if x != nil {
		return x.DescriptionList
	}
	return nil
}

func (x *Banner) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *Banner) GetSubtitle() string {
	if x != nil {
		return x.Subtitle
	}
	return ""
}

func (x *Banner) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type DetailRibbonsQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqState *RequestState    `protobuf:"bytes,1,opt,name=req_state,json=reqState,proto3" json:"req_state,omitempty"`
	Type     DetailScreenType `protobuf:"varint,2,opt,name=type,proto3,enum=sling.cmw.presentation.DetailScreenType" json:"type,omitempty"`
	Id       string           `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	SeasonId string           `protobuf:"bytes,4,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"` // Useful when requesting a specific season for a series
}

func (x *DetailRibbonsQuery) Reset() {
	*x = DetailRibbonsQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailRibbonsQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailRibbonsQuery) ProtoMessage() {}

func (x *DetailRibbonsQuery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailRibbonsQuery.ProtoReflect.Descriptor instead.
func (*DetailRibbonsQuery) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{28}
}

func (x *DetailRibbonsQuery) GetReqState() *RequestState {
	if x != nil {
		return x.ReqState
	}
	return nil
}

func (x *DetailRibbonsQuery) GetType() DetailScreenType {
	if x != nil {
		return x.Type
	}
	return DetailScreenType_DETAIL_CHANNEL
}

func (x *DetailRibbonsQuery) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DetailRibbonsQuery) GetSeasonId() string {
	if x != nil {
		return x.SeasonId
	}
	return ""
}

type Ribbon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title            string                  `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Tiles            []*Tile                 `protobuf:"bytes,2,rep,name=tiles,proto3" json:"tiles,omitempty"`
	ExpiresAt        *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	NumPages         int32                   `protobuf:"varint,4,opt,name=num_pages,json=numPages,proto3" json:"num_pages,omitempty"`
	TotalTiles       int32                   `protobuf:"varint,5,opt,name=total_tiles,json=totalTiles,proto3" json:"total_tiles,omitempty"`
	CurrentPage      int32                   `protobuf:"varint,6,opt,name=current_page,json=currentPage,proto3" json:"current_page,omitempty"` //0 indexed
	NextPage         *wrapperspb.Int32Value  `protobuf:"bytes,7,opt,name=next_page,json=nextPage,proto3" json:"next_page,omitempty"`
	PrevPage         *wrapperspb.Int32Value  `protobuf:"bytes,8,opt,name=prev_page,json=prevPage,proto3" json:"prev_page,omitempty"`
	ID               string                  `protobuf:"bytes,9,opt,name=ID,proto3" json:"ID,omitempty"`
	Format           Ribbon_Format           `protobuf:"varint,10,opt,name=format,proto3,enum=sling.cmw.presentation.Ribbon_Format" json:"format,omitempty"`
	HideRibbonTitles bool                    `protobuf:"varint,11,opt,name=hide_ribbon_titles,json=hideRibbonTitles,proto3" json:"hide_ribbon_titles,omitempty"`
	VerticalScroll   bool                    `protobuf:"varint,12,opt,name=vertical_scroll,json=verticalScroll,proto3" json:"vertical_scroll,omitempty"`
	Errors           []*Error                `protobuf:"bytes,13,rep,name=errors,proto3" json:"errors,omitempty"`
	InvalidationKey  string                  `protobuf:"bytes,14,opt,name=invalidation_key,json=invalidationKey,proto3" json:"invalidation_key,omitempty"`
	Label            *Label                  `protobuf:"bytes,15,opt,name=label,proto3" json:"label,omitempty"`
	Seasons          []*Action               `protobuf:"bytes,16,rep,name=seasons,proto3" json:"seasons,omitempty"`
	EmptyInfo        *EmptyInfo              `protobuf:"bytes,17,opt,name=empty_info,json=emptyInfo,proto3" json:"empty_info,omitempty"`
	QueryParams      map[string]string       `protobuf:"bytes,18,rep,name=query_params,json=queryParams,proto3" json:"query_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StitchId         *wrapperspb.StringValue `protobuf:"bytes,19,opt,name=stitch_id,json=stitchId,proto3" json:"stitch_id,omitempty"`
}

func (x *Ribbon) Reset() {
	*x = Ribbon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ribbon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ribbon) ProtoMessage() {}

func (x *Ribbon) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ribbon.ProtoReflect.Descriptor instead.
func (*Ribbon) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{29}
}

func (x *Ribbon) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Ribbon) GetTiles() []*Tile {
	if x != nil {
		return x.Tiles
	}
	return nil
}

func (x *Ribbon) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *Ribbon) GetNumPages() int32 {
	if x != nil {
		return x.NumPages
	}
	return 0
}

func (x *Ribbon) GetTotalTiles() int32 {
	if x != nil {
		return x.TotalTiles
	}
	return 0
}

func (x *Ribbon) GetCurrentPage() int32 {
	if x != nil {
		return x.CurrentPage
	}
	return 0
}

func (x *Ribbon) GetNextPage() *wrapperspb.Int32Value {
	if x != nil {
		return x.NextPage
	}
	return nil
}

func (x *Ribbon) GetPrevPage() *wrapperspb.Int32Value {
	if x != nil {
		return x.PrevPage
	}
	return nil
}

func (x *Ribbon) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Ribbon) GetFormat() Ribbon_Format {
	if x != nil {
		return x.Format
	}
	return Ribbon_RIBBON
}

func (x *Ribbon) GetHideRibbonTitles() bool {
	if x != nil {
		return x.HideRibbonTitles
	}
	return false
}

func (x *Ribbon) GetVerticalScroll() bool {
	if x != nil {
		return x.VerticalScroll
	}
	return false
}

func (x *Ribbon) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *Ribbon) GetInvalidationKey() string {
	if x != nil {
		return x.InvalidationKey
	}
	return ""
}

func (x *Ribbon) GetLabel() *Label {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *Ribbon) GetSeasons() []*Action {
	if x != nil {
		return x.Seasons
	}
	return nil
}

func (x *Ribbon) GetEmptyInfo() *EmptyInfo {
	if x != nil {
		return x.EmptyInfo
	}
	return nil
}

func (x *Ribbon) GetQueryParams() map[string]string {
	if x != nil {
		return x.QueryParams
	}
	return nil
}

func (x *Ribbon) GetStitchId() *wrapperspb.StringValue {
	if x != nil {
		return x.StitchId
	}
	return nil
}

type PlainChannelList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format string              `protobuf:"bytes,1,opt,name=Format,proto3" json:"Format,omitempty"`
	Tiles  []*PlainChannelTile `protobuf:"bytes,2,rep,name=tiles,proto3" json:"tiles,omitempty"`
}

func (x *PlainChannelList) Reset() {
	*x = PlainChannelList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlainChannelList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlainChannelList) ProtoMessage() {}

func (x *PlainChannelList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlainChannelList.ProtoReflect.Descriptor instead.
func (*PlainChannelList) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{30}
}

func (x *PlainChannelList) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *PlainChannelList) GetTiles() []*PlainChannelTile {
	if x != nil {
		return x.Tiles
	}
	return nil
}

type PlainChannelTile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelTitle    string `protobuf:"bytes,1,opt,name=channel_title,json=channelTitle,proto3" json:"channel_title,omitempty"`
	ChannelGuid     string `protobuf:"bytes,2,opt,name=channel_guid,json=channelGuid,proto3" json:"channel_guid,omitempty"`
	SearchableTitle string `protobuf:"bytes,3,opt,name=searchable_title,json=searchableTitle,proto3" json:"searchable_title,omitempty"`
}

func (x *PlainChannelTile) Reset() {
	*x = PlainChannelTile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlainChannelTile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlainChannelTile) ProtoMessage() {}

func (x *PlainChannelTile) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlainChannelTile.ProtoReflect.Descriptor instead.
func (*PlainChannelTile) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{31}
}

func (x *PlainChannelTile) GetChannelTitle() string {
	if x != nil {
		return x.ChannelTitle
	}
	return ""
}

func (x *PlainChannelTile) GetChannelGuid() string {
	if x != nil {
		return x.ChannelGuid
	}
	return ""
}

func (x *PlainChannelTile) GetSearchableTitle() string {
	if x != nil {
		return x.SearchableTitle
	}
	return ""
}

type DetailRibbons struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SeasonId string              `protobuf:"bytes,2,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
	Ribbons  []*RibbonOrLoadable `protobuf:"bytes,3,rep,name=ribbons,proto3" json:"ribbons,omitempty"`
}

func (x *DetailRibbons) Reset() {
	*x = DetailRibbons{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailRibbons) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailRibbons) ProtoMessage() {}

func (x *DetailRibbons) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailRibbons.ProtoReflect.Descriptor instead.
func (*DetailRibbons) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{32}
}

func (x *DetailRibbons) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DetailRibbons) GetSeasonId() string {
	if x != nil {
		return x.SeasonId
	}
	return ""
}

func (x *DetailRibbons) GetRibbons() []*RibbonOrLoadable {
	if x != nil {
		return x.Ribbons
	}
	return nil
}

type RibbonOrLoadable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           RibbonOrLoadable_Type `protobuf:"varint,1,opt,name=type,proto3,enum=sling.cmw.presentation.RibbonOrLoadable_Type" json:"type,omitempty"`
	Ribbon         *Ribbon               `protobuf:"bytes,2,opt,name=ribbon,proto3" json:"ribbon,omitempty"`
	LoadableRibbon *LoadableRibbon       `protobuf:"bytes,3,opt,name=loadable_ribbon,json=loadableRibbon,proto3" json:"loadable_ribbon,omitempty"`
}

func (x *RibbonOrLoadable) Reset() {
	*x = RibbonOrLoadable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RibbonOrLoadable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RibbonOrLoadable) ProtoMessage() {}

func (x *RibbonOrLoadable) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RibbonOrLoadable.ProtoReflect.Descriptor instead.
func (*RibbonOrLoadable) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{33}
}

func (x *RibbonOrLoadable) GetType() RibbonOrLoadable_Type {
	if x != nil {
		return x.Type
	}
	return RibbonOrLoadable_RIBBON
}

func (x *RibbonOrLoadable) GetRibbon() *Ribbon {
	if x != nil {
		return x.Ribbon
	}
	return nil
}

func (x *RibbonOrLoadable) GetLoadableRibbon() *LoadableRibbon {
	if x != nil {
		return x.LoadableRibbon
	}
	return nil
}

type LoadableRibbon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Href  string `protobuf:"bytes,1,opt,name=href,proto3" json:"href,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *LoadableRibbon) Reset() {
	*x = LoadableRibbon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadableRibbon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadableRibbon) ProtoMessage() {}

func (x *LoadableRibbon) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadableRibbon.ProtoReflect.Descriptor instead.
func (*LoadableRibbon) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{34}
}

func (x *LoadableRibbon) GetHref() string {
	if x != nil {
		return x.Href
	}
	return ""
}

func (x *LoadableRibbon) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type ChannelGuide struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title           string                  `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Href            string                  `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty"`
	Image           *Image                  `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
	SecondaryHint   string                  `protobuf:"bytes,5,opt,name=secondary_hint,json=secondaryHint,proto3" json:"secondary_hint,omitempty"`
	Description     string                  `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Ribbons         []*Ribbon               `protobuf:"bytes,7,rep,name=ribbons,proto3" json:"ribbons,omitempty"`
	Actions         map[string]*Action      `protobuf:"bytes,8,rep,name=actions,proto3" json:"actions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PrimaryAction   *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=primary_action,json=primaryAction,proto3" json:"primary_action,omitempty"`
	SecondaryAction *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=secondary_action,json=secondaryAction,proto3" json:"secondary_action,omitempty"`
	FavoritedIcon   *Icon                   `protobuf:"bytes,12,opt,name=favorited_icon,json=favoritedIcon,proto3" json:"favorited_icon,omitempty"`
	InvalidationKey string                  `protobuf:"bytes,13,opt,name=invalidation_key,json=invalidationKey,proto3" json:"invalidation_key,omitempty"`
}

func (x *ChannelGuide) Reset() {
	*x = ChannelGuide{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelGuide) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelGuide) ProtoMessage() {}

func (x *ChannelGuide) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelGuide.ProtoReflect.Descriptor instead.
func (*ChannelGuide) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{35}
}

func (x *ChannelGuide) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ChannelGuide) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ChannelGuide) GetHref() string {
	if x != nil {
		return x.Href
	}
	return ""
}

func (x *ChannelGuide) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *ChannelGuide) GetSecondaryHint() string {
	if x != nil {
		return x.SecondaryHint
	}
	return ""
}

func (x *ChannelGuide) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ChannelGuide) GetRibbons() []*Ribbon {
	if x != nil {
		return x.Ribbons
	}
	return nil
}

func (x *ChannelGuide) GetActions() map[string]*Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *ChannelGuide) GetPrimaryAction() *wrapperspb.StringValue {
	if x != nil {
		return x.PrimaryAction
	}
	return nil
}

func (x *ChannelGuide) GetSecondaryAction() *wrapperspb.StringValue {
	if x != nil {
		return x.SecondaryAction
	}
	return nil
}

func (x *ChannelGuide) GetFavoritedIcon() *Icon {
	if x != nil {
		return x.FavoritedIcon
	}
	return nil
}

func (x *ChannelGuide) GetInvalidationKey() string {
	if x != nil {
		return x.InvalidationKey
	}
	return ""
}

type Channel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title                string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Image                *Image `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	ChannelNumber        int32  `protobuf:"varint,4,opt,name=channel_number,json=channelNumber,proto3" json:"channel_number,omitempty"`
	NetworkAffiliateName string `protobuf:"bytes,5,opt,name=network_affiliate_name,json=networkAffiliateName,proto3" json:"network_affiliate_name,omitempty"`
}

func (x *Channel) Reset() {
	*x = Channel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Channel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Channel) ProtoMessage() {}

func (x *Channel) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Channel.ProtoReflect.Descriptor instead.
func (*Channel) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{36}
}

func (x *Channel) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Channel) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Channel) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *Channel) GetChannelNumber() int32 {
	if x != nil {
		return x.ChannelNumber
	}
	return 0
}

func (x *Channel) GetNetworkAffiliateName() string {
	if x != nil {
		return x.NetworkAffiliateName
	}
	return ""
}

type Grid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schedules   map[string]*GridRow    `protobuf:"bytes,1,rep,name=schedules,proto3" json:"schedules,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Bar         *Bar                   `protobuf:"bytes,2,opt,name=bar,proto3" json:"bar,omitempty"`
	DayStatus   string                 `protobuf:"bytes,3,opt,name=DayStatus,proto3" json:"DayStatus,omitempty"`
	ChannelId   string                 `protobuf:"bytes,4,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	PrevTime    *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=prev_time,json=prevTime,proto3" json:"prev_time,omitempty"`
	NextTime    *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=next_time,json=nextTime,proto3" json:"next_time,omitempty"`
	PrevChannel string                 `protobuf:"bytes,7,opt,name=prev_channel,json=prevChannel,proto3" json:"prev_channel,omitempty"`
	NextChannel string                 `protobuf:"bytes,8,opt,name=next_channel,json=nextChannel,proto3" json:"next_channel,omitempty"`
	ExpiresAt   *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	StartTime   *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime     *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	QueryParams map[string]string      `protobuf:"bytes,12,rep,name=query_params,json=queryParams,proto3" json:"query_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Grid) Reset() {
	*x = Grid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Grid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Grid) ProtoMessage() {}

func (x *Grid) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Grid.ProtoReflect.Descriptor instead.
func (*Grid) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{37}
}

func (x *Grid) GetSchedules() map[string]*GridRow {
	if x != nil {
		return x.Schedules
	}
	return nil
}

func (x *Grid) GetBar() *Bar {
	if x != nil {
		return x.Bar
	}
	return nil
}

func (x *Grid) GetDayStatus() string {
	if x != nil {
		return x.DayStatus
	}
	return ""
}

func (x *Grid) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *Grid) GetPrevTime() *timestamppb.Timestamp {
	if x != nil {
		return x.PrevTime
	}
	return nil
}

func (x *Grid) GetNextTime() *timestamppb.Timestamp {
	if x != nil {
		return x.NextTime
	}
	return nil
}

func (x *Grid) GetPrevChannel() string {
	if x != nil {
		return x.PrevChannel
	}
	return ""
}

func (x *Grid) GetNextChannel() string {
	if x != nil {
		return x.NextChannel
	}
	return ""
}

func (x *Grid) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *Grid) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Grid) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *Grid) GetQueryParams() map[string]string {
	if x != nil {
		return x.QueryParams
	}
	return nil
}

type GridRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel  *Tile   `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Schedule []*Tile `protobuf:"bytes,2,rep,name=schedule,proto3" json:"schedule,omitempty"`
}

func (x *GridRow) Reset() {
	*x = GridRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GridRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GridRow) ProtoMessage() {}

func (x *GridRow) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GridRow.ProtoReflect.Descriptor instead.
func (*GridRow) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{38}
}

func (x *GridRow) GetChannel() *Tile {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *GridRow) GetSchedule() []*Tile {
	if x != nil {
		return x.Schedule
	}
	return nil
}

type GridGuideAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string                  `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	HttpMethod  string                  `protobuf:"bytes,2,opt,name=http_method,json=httpMethod,proto3" json:"http_method,omitempty"`
	Url         string                  `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	JsonPayload []byte                  `protobuf:"bytes,4,opt,name=json_payload,json=jsonPayload,proto3" json:"json_payload,omitempty"`
	Enabled     bool                    `protobuf:"varint,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Adobe       *Adobe                  `protobuf:"bytes,6,opt,name=adobe,proto3" json:"adobe,omitempty"`
	SortId      string                  `protobuf:"bytes,7,opt,name=sort_id,json=sortId,proto3" json:"sort_id,omitempty"`
	FilterId    string                  `protobuf:"bytes,8,opt,name=filter_id,json=filterId,proto3" json:"filter_id,omitempty"`
	ScreenId    *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=screen_id,json=screenId,proto3" json:"screen_id,omitempty"`
}

func (x *GridGuideAction) Reset() {
	*x = GridGuideAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GridGuideAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GridGuideAction) ProtoMessage() {}

func (x *GridGuideAction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GridGuideAction.ProtoReflect.Descriptor instead.
func (*GridGuideAction) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{39}
}

func (x *GridGuideAction) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GridGuideAction) GetHttpMethod() string {
	if x != nil {
		return x.HttpMethod
	}
	return ""
}

func (x *GridGuideAction) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GridGuideAction) GetJsonPayload() []byte {
	if x != nil {
		return x.JsonPayload
	}
	return nil
}

func (x *GridGuideAction) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *GridGuideAction) GetAdobe() *Adobe {
	if x != nil {
		return x.Adobe
	}
	return nil
}

func (x *GridGuideAction) GetSortId() string {
	if x != nil {
		return x.SortId
	}
	return ""
}

func (x *GridGuideAction) GetFilterId() string {
	if x != nil {
		return x.FilterId
	}
	return ""
}

func (x *GridGuideAction) GetScreenId() *wrapperspb.StringValue {
	if x != nil {
		return x.ScreenId
	}
	return nil
}

type GuideFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title         string           `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	IsActive      bool             `protobuf:"varint,2,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	GetGrid       *GridGuideAction `protobuf:"bytes,3,opt,name=get_grid,json=getGrid,proto3" json:"get_grid,omitempty"`
	PersistFilter *GridGuideAction `protobuf:"bytes,4,opt,name=persist_filter,json=persistFilter,proto3" json:"persist_filter,omitempty"`
}

func (x *GuideFilter) Reset() {
	*x = GuideFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuideFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuideFilter) ProtoMessage() {}

func (x *GuideFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuideFilter.ProtoReflect.Descriptor instead.
func (*GuideFilter) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{40}
}

func (x *GuideFilter) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GuideFilter) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *GuideFilter) GetGetGrid() *GridGuideAction {
	if x != nil {
		return x.GetGrid
	}
	return nil
}

func (x *GuideFilter) GetPersistFilter() *GridGuideAction {
	if x != nil {
		return x.PersistFilter
	}
	return nil
}

type Tile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format                           Tile_Format             `protobuf:"varint,1,opt,name=format,proto3,enum=sling.cmw.presentation.Tile_Format" json:"format,omitempty"`
	Image                            *Image                  `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	Title                            string                  `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Attributes                       []*Attribute            `protobuf:"bytes,4,rep,name=attributes,proto3" json:"attributes,omitempty"`
	UpcomingContent                  *Attribute              `protobuf:"bytes,5,opt,name=upcoming_content,json=upcomingContent,proto3" json:"upcoming_content,omitempty"`
	Description                      *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Bar                              *Bar                    `protobuf:"bytes,7,opt,name=bar,proto3" json:"bar,omitempty"`
	Actions                          map[string]*Action      `protobuf:"bytes,8,rep,name=actions,proto3" json:"actions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PrimaryAction                    *ActionTypeValue        `protobuf:"bytes,9,opt,name=primary_action,json=primaryAction,proto3" json:"primary_action,omitempty"`
	SecondaryAction                  *ActionTypeValue        `protobuf:"bytes,10,opt,name=secondary_action,json=secondaryAction,proto3" json:"secondary_action,omitempty"`
	ParentalIcon                     *Icon                   `protobuf:"bytes,11,opt,name=parental_icon,json=parentalIcon,proto3" json:"parental_icon,omitempty"`
	FavoritedIcon                    *Icon                   `protobuf:"bytes,12,opt,name=favorited_icon,json=favoritedIcon,proto3" json:"favorited_icon,omitempty"`
	RecordingIcon                    *Icon                   `protobuf:"bytes,13,opt,name=recording_icon,json=recordingIcon,proto3" json:"recording_icon,omitempty"`
	Analytics                        *Analytics              `protobuf:"bytes,14,opt,name=analytics,proto3" json:"analytics,omitempty"`
	InvalidationKeys                 []string                `protobuf:"bytes,15,rep,name=invalidation_keys,json=invalidationKeys,proto3" json:"invalidation_keys,omitempty"`
	LegacyType                       string                  `protobuf:"bytes,16,opt,name=legacy_type,json=legacyType,proto3" json:"legacy_type,omitempty"`
	Id                               string                  `protobuf:"bytes,17,opt,name=id,proto3" json:"id,omitempty"`
	ChannelName                      string                  `protobuf:"bytes,18,opt,name=channel_name,json=channelName,proto3" json:"channel_name,omitempty"`
	Errors                           []*Error                `protobuf:"bytes,19,rep,name=errors,proto3" json:"errors,omitempty"`
	Genres                           []string                `protobuf:"bytes,20,rep,name=genres,proto3" json:"genres,omitempty"`
	Cast                             []string                `protobuf:"bytes,21,rep,name=cast,proto3" json:"cast,omitempty"`
	BackgroundImage                  *Image                  `protobuf:"bytes,22,opt,name=background_image,json=backgroundImage,proto3" json:"background_image,omitempty"`
	UnentitledMessage                string                  `protobuf:"bytes,23,opt,name=unentitled_message,json=unentitledMessage,proto3" json:"unentitled_message,omitempty"`
	OnNow                            *wrapperspb.BoolValue   `protobuf:"bytes,24,opt,name=on_now,json=onNow,proto3" json:"on_now,omitempty"`
	IsInFuture                       *wrapperspb.BoolValue   `protobuf:"bytes,25,opt,name=is_in_future,json=isInFuture,proto3" json:"is_in_future,omitempty"`
	PurchaseRequired                 *wrapperspb.BoolValue   `protobuf:"bytes,26,opt,name=purchase_required,json=purchaseRequired,proto3" json:"purchase_required,omitempty"`
	IsNew                            *wrapperspb.BoolValue   `protobuf:"bytes,27,opt,name=is_new,json=isNew,proto3" json:"is_new,omitempty"`
	Subtitle                         string                  `protobuf:"bytes,28,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	SecondaryImage                   *Image                  `protobuf:"bytes,29,opt,name=secondary_image,json=secondaryImage,proto3" json:"secondary_image,omitempty"`
	IsOnboarding                     *wrapperspb.BoolValue   `protobuf:"bytes,30,opt,name=is_onboarding,json=isOnboarding,proto3" json:"is_onboarding,omitempty"`
	SecondaryHint                    string                  `protobuf:"bytes,31,opt,name=secondary_hint,json=secondaryHint,proto3" json:"secondary_hint,omitempty"`
	GridDuration                     *durationpb.Duration    `protobuf:"bytes,32,opt,name=grid_duration,json=gridDuration,proto3" json:"grid_duration,omitempty"`
	Thuuz                            *Thuuz                  `protobuf:"bytes,33,opt,name=thuuz,proto3" json:"thuuz,omitempty"`
	StartTime                        *timestamppb.Timestamp  `protobuf:"bytes,34,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	ChannelLogo                      *Image                  `protobuf:"bytes,35,opt,name=channel_logo,json=channelLogo,proto3" json:"channel_logo,omitempty"`
	Source                           string                  `protobuf:"bytes,36,opt,name=source,proto3" json:"source,omitempty"`
	Badges                           []*Badge                `protobuf:"bytes,37,rep,name=badges,proto3" json:"badges,omitempty"`
	ChannelLogoDetails               *ChannelLogoDetails     `protobuf:"bytes,38,opt,name=channel_logo_details,json=channelLogoDetails,proto3" json:"channel_logo_details,omitempty"`
	OverlayTitle                     *wrapperspb.StringValue `protobuf:"bytes,39,opt,name=overlay_title,json=overlayTitle,proto3" json:"overlay_title,omitempty"`
	FocusActionSequence              []*ActionTypeValue      `protobuf:"bytes,40,rep,name=focus_action_sequence,json=focusActionSequence,proto3" json:"focus_action_sequence,omitempty"`
	FocusActions                     map[string]*Action      `protobuf:"bytes,41,rep,name=focus_actions,json=focusActions,proto3" json:"focus_actions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FocusPlayIcon                    *Icon                   `protobuf:"bytes,42,opt,name=focus_play_icon,json=focusPlayIcon,proto3" json:"focus_play_icon,omitempty"`
	FocusAttributes                  []*Attribute            `protobuf:"bytes,43,rep,name=focus_attributes,json=focusAttributes,proto3" json:"focus_attributes,omitempty"`
	FocusImage                       *Image                  `protobuf:"bytes,44,opt,name=focus_image,json=focusImage,proto3" json:"focus_image,omitempty"`
	FocusOverlayTitle                *wrapperspb.StringValue `protobuf:"bytes,45,opt,name=focus_overlay_title,json=focusOverlayTitle,proto3" json:"focus_overlay_title,omitempty"`
	BgColor                          *wrapperspb.StringValue `protobuf:"bytes,46,opt,name=bg_color,json=bgColor,proto3" json:"bg_color,omitempty"`
	FocusAction                      *ActionTypeValue        `protobuf:"bytes,47,opt,name=focus_action,json=focusAction,proto3" json:"focus_action,omitempty"`
	FocusChannelLogoDetails          *ChannelLogoDetails     `protobuf:"bytes,48,opt,name=focus_channel_logo_details,json=focusChannelLogoDetails,proto3" json:"focus_channel_logo_details,omitempty"`
	FocusOverlayAttributes           []*Attribute            `protobuf:"bytes,49,rep,name=focus_overlay_attributes,json=focusOverlayAttributes,proto3" json:"focus_overlay_attributes,omitempty"`
	FocusActionHint                  *FocusActionHint        `protobuf:"bytes,50,opt,name=focus_action_hint,json=focusActionHint,proto3" json:"focus_action_hint,omitempty"`
	FocusRowAttributes               []*Attribute            `protobuf:"bytes,51,rep,name=focus_row_attributes,json=focusRowAttributes,proto3" json:"focus_row_attributes,omitempty"`
	FocusRowBackroundColor           *wrapperspb.StringValue `protobuf:"bytes,52,opt,name=focus_row_backround_color,json=focusRowBackroundColor,proto3" json:"focus_row_backround_color,omitempty"`
	FocusRowDescription              *wrapperspb.StringValue `protobuf:"bytes,53,opt,name=focus_row_description,json=focusRowDescription,proto3" json:"focus_row_description,omitempty"`
	FocusRowDurationAttributes       []*Attribute            `protobuf:"bytes,54,rep,name=focus_row_duration_attributes,json=focusRowDurationAttributes,proto3" json:"focus_row_duration_attributes,omitempty"`
	StopTime                         *timestamppb.Timestamp  `protobuf:"bytes,55,opt,name=stop_time,json=stopTime,proto3" json:"stop_time,omitempty"`
	StitchId                         *wrapperspb.StringValue `protobuf:"bytes,58,opt,name=stitch_id,json=stitchId,proto3" json:"stitch_id,omitempty"`
	ShouldFocus                      *wrapperspb.BoolValue   `protobuf:"bytes,59,opt,name=should_focus,json=shouldFocus,proto3" json:"should_focus,omitempty"`
	FutureBadges                     []*Badge                `protobuf:"bytes,60,rep,name=future_badges,json=futureBadges,proto3" json:"future_badges,omitempty"`
	FutureFocusRowDurationAttributes []*Attribute            `protobuf:"bytes,61,rep,name=future_focus_row_duration_attributes,json=futureFocusRowDurationAttributes,proto3" json:"future_focus_row_duration_attributes,omitempty"`
	FutureFocusActionHint            *FocusActionHint        `protobuf:"bytes,62,opt,name=future_focus_action_hint,json=futureFocusActionHint,proto3" json:"future_focus_action_hint,omitempty"`
	FuturePrimaryAction              *ActionTypeValue        `protobuf:"bytes,63,opt,name=future_primary_action,json=futurePrimaryAction,proto3" json:"future_primary_action,omitempty"`
	FutureSecondaryAction            *ActionTypeValue        `protobuf:"bytes,64,opt,name=future_secondary_action,json=futureSecondaryAction,proto3" json:"future_secondary_action,omitempty"`
	OnNowBadges                      []*Badge                `protobuf:"bytes,65,rep,name=on_now_badges,json=onNowBadges,proto3" json:"on_now_badges,omitempty"`
	OnNowFocusRowDurationAttributes  []*Attribute            `protobuf:"bytes,66,rep,name=on_now_focus_row_duration_attributes,json=onNowFocusRowDurationAttributes,proto3" json:"on_now_focus_row_duration_attributes,omitempty"`
	OnNowFocusActionHint             *FocusActionHint        `protobuf:"bytes,67,opt,name=on_now_focus_action_hint,json=onNowFocusActionHint,proto3" json:"on_now_focus_action_hint,omitempty"`
	OnNowPrimaryAction               *ActionTypeValue        `protobuf:"bytes,68,opt,name=on_now_primary_action,json=onNowPrimaryAction,proto3" json:"on_now_primary_action,omitempty"`
	OnNowSecondaryAction             *ActionTypeValue        `protobuf:"bytes,69,opt,name=on_now_secondary_action,json=onNowSecondaryAction,proto3" json:"on_now_secondary_action,omitempty"`
	PastBadges                       []*Badge                `protobuf:"bytes,70,rep,name=past_badges,json=pastBadges,proto3" json:"past_badges,omitempty"`
	PastFocusRowDurationAttributes   []*Attribute            `protobuf:"bytes,71,rep,name=past_focus_row_duration_attributes,json=pastFocusRowDurationAttributes,proto3" json:"past_focus_row_duration_attributes,omitempty"`
	PastFocusActionHint              *FocusActionHint        `protobuf:"bytes,72,opt,name=past_focus_action_hint,json=pastFocusActionHint,proto3" json:"past_focus_action_hint,omitempty"`
	PastPrimaryAction                *ActionTypeValue        `protobuf:"bytes,73,opt,name=past_primary_action,json=pastPrimaryAction,proto3" json:"past_primary_action,omitempty"`
	PastSecondaryAction              *ActionTypeValue        `protobuf:"bytes,74,opt,name=past_secondary_action,json=pastSecondaryAction,proto3" json:"past_secondary_action,omitempty"`
	QueryParams                      map[string]string       `protobuf:"bytes,75,rep,name=query_params,json=queryParams,proto3" json:"query_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SourceTypeDetails                *SourceTypeDetails      `protobuf:"bytes,76,opt,name=source_type_details,json=sourceTypeDetails,proto3" json:"source_type_details,omitempty"` // contains details specific to source type(source could be channel, or any other type)
	OverlayAttributes                []*Attribute            `protobuf:"bytes,77,rep,name=overlay_attributes,json=overlayAttributes,proto3" json:"overlay_attributes,omitempty"`
	ExplanationAttributes            []*Attribute            `protobuf:"bytes,78,rep,name=explanation_attributes,json=explanationAttributes,proto3" json:"explanation_attributes,omitempty"`
	OverlayActionSequence            []*ActionTypeValue      `protobuf:"bytes,79,rep,name=overlay_action_sequence,json=overlayActionSequence,proto3" json:"overlay_action_sequence,omitempty"`
	ActionSequence                   []*ActionTypeValue      `protobuf:"bytes,80,rep,name=action_sequence,json=actionSequence,proto3" json:"action_sequence,omitempty"`
	FocusOverlayActionSequence       []*ActionTypeValue      `protobuf:"bytes,81,rep,name=focus_overlay_action_sequence,json=focusOverlayActionSequence,proto3" json:"focus_overlay_action_sequence,omitempty"`
	OverlayCentreTitle               *wrapperspb.StringValue `protobuf:"bytes,82,opt,name=overlay_centre_title,json=overlayCentreTitle,proto3" json:"overlay_centre_title,omitempty"`
	OverlayExplanationAttributes     []*Attribute            `protobuf:"bytes,83,rep,name=overlay_explanation_attributes,json=overlayExplanationAttributes,proto3" json:"overlay_explanation_attributes,omitempty"`
	OverlayPlayIcon                  *Icon                   `protobuf:"bytes,84,opt,name=overlay_play_icon,json=overlayPlayIcon,proto3" json:"overlay_play_icon,omitempty"`
	FutureFocusOverlayActionSequence []*ActionTypeValue      `protobuf:"bytes,85,rep,name=future_focus_overlay_action_sequence,json=futureFocusOverlayActionSequence,proto3" json:"future_focus_overlay_action_sequence,omitempty"`
	OnNowFocusOverlayActionSequence  []*ActionTypeValue      `protobuf:"bytes,86,rep,name=on_now_focus_overlay_action_sequence,json=onNowFocusOverlayActionSequence,proto3" json:"on_now_focus_overlay_action_sequence,omitempty"`
	PastFocusOverlayActionSequence   []*ActionTypeValue      `protobuf:"bytes,87,rep,name=past_focus_overlay_action_sequence,json=pastFocusOverlayActionSequence,proto3" json:"past_focus_overlay_action_sequence,omitempty"`
	FutureFocusDurationAttributes    []*Attribute            `protobuf:"bytes,88,rep,name=future_focus_duration_attributes,json=futureFocusDurationAttributes,proto3" json:"future_focus_duration_attributes,omitempty"`
	OnNowFocusDurationAttributes     []*Attribute            `protobuf:"bytes,89,rep,name=on_now_focus_duration_attributes,json=onNowFocusDurationAttributes,proto3" json:"on_now_focus_duration_attributes,omitempty"`
	PastFocusDurationAttributes      []*Attribute            `protobuf:"bytes,90,rep,name=past_focus_duration_attributes,json=pastFocusDurationAttributes,proto3" json:"past_focus_duration_attributes,omitempty"`
	FocusIndicators                  []*Indicator            `protobuf:"bytes,91,rep,name=focus_indicators,json=focusIndicators,proto3" json:"focus_indicators,omitempty"`
	OverlayIndicators                []*Indicator            `protobuf:"bytes,92,rep,name=overlay_indicators,json=overlayIndicators,proto3" json:"overlay_indicators,omitempty"`
	MoreActions                      *ActionTypeValue        `protobuf:"bytes,93,opt,name=more_actions,json=moreActions,proto3" json:"more_actions,omitempty"`
	FutureDurationAttributes         []*Attribute            `protobuf:"bytes,94,rep,name=future_duration_attributes,json=futureDurationAttributes,proto3" json:"future_duration_attributes,omitempty"`
	OnNowDurationAttributes          []*Attribute            `protobuf:"bytes,95,rep,name=on_now_duration_attributes,json=onNowDurationAttributes,proto3" json:"on_now_duration_attributes,omitempty"`
	PastDurationAttributes           []*Attribute            `protobuf:"bytes,96,rep,name=past_duration_attributes,json=pastDurationAttributes,proto3" json:"past_duration_attributes,omitempty"`
	PopulateTileId                   bool                    `protobuf:"varint,97,opt,name=populate_tile_id,json=populateTileId,proto3" json:"populate_tile_id,omitempty"`
	PostPaymentAction                *ActionTypeValue        `protobuf:"bytes,98,opt,name=post_payment_action,json=postPaymentAction,proto3" json:"post_payment_action,omitempty"`
	AssetGuid                        *wrapperspb.StringValue `protobuf:"bytes,99,opt,name=asset_guid,json=assetGuid,proto3" json:"asset_guid,omitempty"`
	FranchiseGuid                    *wrapperspb.StringValue `protobuf:"bytes,100,opt,name=franchise_guid,json=franchiseGuid,proto3" json:"franchise_guid,omitempty"`
	WatchPercent                     *wrapperspb.FloatValue  `protobuf:"bytes,101,opt,name=watch_percent,json=watchPercent,proto3" json:"watch_percent,omitempty"`
	RatingsList                      []string                `protobuf:"bytes,102,rep,name=ratings_list,json=ratingsList,proto3" json:"ratings_list,omitempty"`
	Deeplink                         *wrapperspb.StringValue `protobuf:"bytes,103,opt,name=deeplink,proto3" json:"deeplink,omitempty"`
	Duration                         *durationpb.Duration    `protobuf:"bytes,104,opt,name=duration,proto3" json:"duration,omitempty"`
	IsPlayable                       *wrapperspb.StringValue `protobuf:"bytes,105,opt,name=is_playable,json=isPlayable,proto3" json:"is_playable,omitempty"`
	ActionData                       *wrapperspb.StringValue `protobuf:"bytes,106,opt,name=action_data,json=actionData,proto3" json:"action_data,omitempty"`
	ImageUrl                         *wrapperspb.StringValue `protobuf:"bytes,107,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	Ttl                              *timestamppb.Timestamp  `protobuf:"bytes,108,opt,name=ttl,proto3" json:"ttl,omitempty"`
	MarqueeTitle                     *wrapperspb.StringValue `protobuf:"bytes,109,opt,name=marquee_title,json=marqueeTitle,proto3" json:"marquee_title,omitempty"`
	MarqueeDescription               *wrapperspb.StringValue `protobuf:"bytes,110,opt,name=marquee_description,json=marqueeDescription,proto3" json:"marquee_description,omitempty"`
	MarqueeAttributes                []*Attribute            `protobuf:"bytes,111,rep,name=marquee_attributes,json=marqueeAttributes,proto3" json:"marquee_attributes,omitempty"`
	MarqueeImage                     *Image                  `protobuf:"bytes,112,opt,name=marquee_image,json=marqueeImage,proto3" json:"marquee_image,omitempty"`
	EpisodeNumber                    *wrapperspb.Int32Value  `protobuf:"bytes,113,opt,name=episode_number,json=episodeNumber,proto3" json:"episode_number,omitempty"`
	SeasonNumber                     *wrapperspb.Int32Value  `protobuf:"bytes,114,opt,name=season_number,json=seasonNumber,proto3" json:"season_number,omitempty"`
	ResumeUpdatedAt                  *timestamppb.Timestamp  `protobuf:"bytes,115,opt,name=resume_updated_at,json=resumeUpdatedAt,proto3" json:"resume_updated_at,omitempty"`
	ResumeType                       *wrapperspb.StringValue `protobuf:"bytes,116,opt,name=resume_type,json=resumeType,proto3" json:"resume_type,omitempty"`
	SourceBadges                     []*Badge                `protobuf:"bytes,117,rep,name=source_badges,json=sourceBadges,proto3" json:"source_badges,omitempty"`
	SourceText                       string                  `protobuf:"bytes,118,opt,name=source_text,json=sourceText,proto3" json:"source_text,omitempty"`
	WatchDeeplink                    *wrapperspb.StringValue `protobuf:"bytes,119,opt,name=watch_deeplink,json=watchDeeplink,proto3" json:"watch_deeplink,omitempty"`
	BrowseDeeplink                   *wrapperspb.StringValue `protobuf:"bytes,120,opt,name=browse_deeplink,json=browseDeeplink,proto3" json:"browse_deeplink,omitempty"`
	SportsScores                     *SportsScoresData       `protobuf:"bytes,121,opt,name=sports_scores,json=sportsScores,proto3" json:"sports_scores,omitempty"`
	OverlayDescription               *wrapperspb.StringValue `protobuf:"bytes,122,opt,name=overlay_description,json=overlayDescription,proto3" json:"overlay_description,omitempty"`
	Autoplay                         *AutoPlay               `protobuf:"bytes,123,opt,name=autoplay,proto3" json:"autoplay,omitempty"`
	ProgramId                        string                  `protobuf:"bytes,124,opt,name=program_id,json=programId,proto3" json:"program_id,omitempty"`
	WatchedDuration                  *durationpb.Duration    `protobuf:"bytes,125,opt,name=watched_duration,json=watchedDuration,proto3" json:"watched_duration,omitempty"`
}

func (x *Tile) Reset() {
	*x = Tile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tile) ProtoMessage() {}

func (x *Tile) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tile.ProtoReflect.Descriptor instead.
func (*Tile) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{41}
}

func (x *Tile) GetFormat() Tile_Format {
	if x != nil {
		return x.Format
	}
	return Tile_STANDARD
}

func (x *Tile) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *Tile) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Tile) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Tile) GetUpcomingContent() *Attribute {
	if x != nil {
		return x.UpcomingContent
	}
	return nil
}

func (x *Tile) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Tile) GetBar() *Bar {
	if x != nil {
		return x.Bar
	}
	return nil
}

func (x *Tile) GetActions() map[string]*Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *Tile) GetPrimaryAction() *ActionTypeValue {
	if x != nil {
		return x.PrimaryAction
	}
	return nil
}

func (x *Tile) GetSecondaryAction() *ActionTypeValue {
	if x != nil {
		return x.SecondaryAction
	}
	return nil
}

func (x *Tile) GetParentalIcon() *Icon {
	if x != nil {
		return x.ParentalIcon
	}
	return nil
}

func (x *Tile) GetFavoritedIcon() *Icon {
	if x != nil {
		return x.FavoritedIcon
	}
	return nil
}

func (x *Tile) GetRecordingIcon() *Icon {
	if x != nil {
		return x.RecordingIcon
	}
	return nil
}

func (x *Tile) GetAnalytics() *Analytics {
	if x != nil {
		return x.Analytics
	}
	return nil
}

func (x *Tile) GetInvalidationKeys() []string {
	if x != nil {
		return x.InvalidationKeys
	}
	return nil
}

func (x *Tile) GetLegacyType() string {
	if x != nil {
		return x.LegacyType
	}
	return ""
}

func (x *Tile) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Tile) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *Tile) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *Tile) GetGenres() []string {
	if x != nil {
		return x.Genres
	}
	return nil
}

func (x *Tile) GetCast() []string {
	if x != nil {
		return x.Cast
	}
	return nil
}

func (x *Tile) GetBackgroundImage() *Image {
	if x != nil {
		return x.BackgroundImage
	}
	return nil
}

func (x *Tile) GetUnentitledMessage() string {
	if x != nil {
		return x.UnentitledMessage
	}
	return ""
}

func (x *Tile) GetOnNow() *wrapperspb.BoolValue {
	if x != nil {
		return x.OnNow
	}
	return nil
}

func (x *Tile) GetIsInFuture() *wrapperspb.BoolValue {
	if x != nil {
		return x.IsInFuture
	}
	return nil
}

func (x *Tile) GetPurchaseRequired() *wrapperspb.BoolValue {
	if x != nil {
		return x.PurchaseRequired
	}
	return nil
}

func (x *Tile) GetIsNew() *wrapperspb.BoolValue {
	if x != nil {
		return x.IsNew
	}
	return nil
}

func (x *Tile) GetSubtitle() string {
	if x != nil {
		return x.Subtitle
	}
	return ""
}

func (x *Tile) GetSecondaryImage() *Image {
	if x != nil {
		return x.SecondaryImage
	}
	return nil
}

func (x *Tile) GetIsOnboarding() *wrapperspb.BoolValue {
	if x != nil {
		return x.IsOnboarding
	}
	return nil
}

func (x *Tile) GetSecondaryHint() string {
	if x != nil {
		return x.SecondaryHint
	}
	return ""
}

func (x *Tile) GetGridDuration() *durationpb.Duration {
	if x != nil {
		return x.GridDuration
	}
	return nil
}

func (x *Tile) GetThuuz() *Thuuz {
	if x != nil {
		return x.Thuuz
	}
	return nil
}

func (x *Tile) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Tile) GetChannelLogo() *Image {
	if x != nil {
		return x.ChannelLogo
	}
	return nil
}

func (x *Tile) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Tile) GetBadges() []*Badge {
	if x != nil {
		return x.Badges
	}
	return nil
}

func (x *Tile) GetChannelLogoDetails() *ChannelLogoDetails {
	if x != nil {
		return x.ChannelLogoDetails
	}
	return nil
}

func (x *Tile) GetOverlayTitle() *wrapperspb.StringValue {
	if x != nil {
		return x.OverlayTitle
	}
	return nil
}

func (x *Tile) GetFocusActionSequence() []*ActionTypeValue {
	if x != nil {
		return x.FocusActionSequence
	}
	return nil
}

func (x *Tile) GetFocusActions() map[string]*Action {
	if x != nil {
		return x.FocusActions
	}
	return nil
}

func (x *Tile) GetFocusPlayIcon() *Icon {
	if x != nil {
		return x.FocusPlayIcon
	}
	return nil
}

func (x *Tile) GetFocusAttributes() []*Attribute {
	if x != nil {
		return x.FocusAttributes
	}
	return nil
}

func (x *Tile) GetFocusImage() *Image {
	if x != nil {
		return x.FocusImage
	}
	return nil
}

func (x *Tile) GetFocusOverlayTitle() *wrapperspb.StringValue {
	if x != nil {
		return x.FocusOverlayTitle
	}
	return nil
}

func (x *Tile) GetBgColor() *wrapperspb.StringValue {
	if x != nil {
		return x.BgColor
	}
	return nil
}

func (x *Tile) GetFocusAction() *ActionTypeValue {
	if x != nil {
		return x.FocusAction
	}
	return nil
}

func (x *Tile) GetFocusChannelLogoDetails() *ChannelLogoDetails {
	if x != nil {
		return x.FocusChannelLogoDetails
	}
	return nil
}

func (x *Tile) GetFocusOverlayAttributes() []*Attribute {
	if x != nil {
		return x.FocusOverlayAttributes
	}
	return nil
}

func (x *Tile) GetFocusActionHint() *FocusActionHint {
	if x != nil {
		return x.FocusActionHint
	}
	return nil
}

func (x *Tile) GetFocusRowAttributes() []*Attribute {
	if x != nil {
		return x.FocusRowAttributes
	}
	return nil
}

func (x *Tile) GetFocusRowBackroundColor() *wrapperspb.StringValue {
	if x != nil {
		return x.FocusRowBackroundColor
	}
	return nil
}

func (x *Tile) GetFocusRowDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.FocusRowDescription
	}
	return nil
}

func (x *Tile) GetFocusRowDurationAttributes() []*Attribute {
	if x != nil {
		return x.FocusRowDurationAttributes
	}
	return nil
}

func (x *Tile) GetStopTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StopTime
	}
	return nil
}

func (x *Tile) GetStitchId() *wrapperspb.StringValue {
	if x != nil {
		return x.StitchId
	}
	return nil
}

func (x *Tile) GetShouldFocus() *wrapperspb.BoolValue {
	if x != nil {
		return x.ShouldFocus
	}
	return nil
}

func (x *Tile) GetFutureBadges() []*Badge {
	if x != nil {
		return x.FutureBadges
	}
	return nil
}

func (x *Tile) GetFutureFocusRowDurationAttributes() []*Attribute {
	if x != nil {
		return x.FutureFocusRowDurationAttributes
	}
	return nil
}

func (x *Tile) GetFutureFocusActionHint() *FocusActionHint {
	if x != nil {
		return x.FutureFocusActionHint
	}
	return nil
}

func (x *Tile) GetFuturePrimaryAction() *ActionTypeValue {
	if x != nil {
		return x.FuturePrimaryAction
	}
	return nil
}

func (x *Tile) GetFutureSecondaryAction() *ActionTypeValue {
	if x != nil {
		return x.FutureSecondaryAction
	}
	return nil
}

func (x *Tile) GetOnNowBadges() []*Badge {
	if x != nil {
		return x.OnNowBadges
	}
	return nil
}

func (x *Tile) GetOnNowFocusRowDurationAttributes() []*Attribute {
	if x != nil {
		return x.OnNowFocusRowDurationAttributes
	}
	return nil
}

func (x *Tile) GetOnNowFocusActionHint() *FocusActionHint {
	if x != nil {
		return x.OnNowFocusActionHint
	}
	return nil
}

func (x *Tile) GetOnNowPrimaryAction() *ActionTypeValue {
	if x != nil {
		return x.OnNowPrimaryAction
	}
	return nil
}

func (x *Tile) GetOnNowSecondaryAction() *ActionTypeValue {
	if x != nil {
		return x.OnNowSecondaryAction
	}
	return nil
}

func (x *Tile) GetPastBadges() []*Badge {
	if x != nil {
		return x.PastBadges
	}
	return nil
}

func (x *Tile) GetPastFocusRowDurationAttributes() []*Attribute {
	if x != nil {
		return x.PastFocusRowDurationAttributes
	}
	return nil
}

func (x *Tile) GetPastFocusActionHint() *FocusActionHint {
	if x != nil {
		return x.PastFocusActionHint
	}
	return nil
}

func (x *Tile) GetPastPrimaryAction() *ActionTypeValue {
	if x != nil {
		return x.PastPrimaryAction
	}
	return nil
}

func (x *Tile) GetPastSecondaryAction() *ActionTypeValue {
	if x != nil {
		return x.PastSecondaryAction
	}
	return nil
}

func (x *Tile) GetQueryParams() map[string]string {
	if x != nil {
		return x.QueryParams
	}
	return nil
}

func (x *Tile) GetSourceTypeDetails() *SourceTypeDetails {
	if x != nil {
		return x.SourceTypeDetails
	}
	return nil
}

func (x *Tile) GetOverlayAttributes() []*Attribute {
	if x != nil {
		return x.OverlayAttributes
	}
	return nil
}

func (x *Tile) GetExplanationAttributes() []*Attribute {
	if x != nil {
		return x.ExplanationAttributes
	}
	return nil
}

func (x *Tile) GetOverlayActionSequence() []*ActionTypeValue {
	if x != nil {
		return x.OverlayActionSequence
	}
	return nil
}

func (x *Tile) GetActionSequence() []*ActionTypeValue {
	if x != nil {
		return x.ActionSequence
	}
	return nil
}

func (x *Tile) GetFocusOverlayActionSequence() []*ActionTypeValue {
	if x != nil {
		return x.FocusOverlayActionSequence
	}
	return nil
}

func (x *Tile) GetOverlayCentreTitle() *wrapperspb.StringValue {
	if x != nil {
		return x.OverlayCentreTitle
	}
	return nil
}

func (x *Tile) GetOverlayExplanationAttributes() []*Attribute {
	if x != nil {
		return x.OverlayExplanationAttributes
	}
	return nil
}

func (x *Tile) GetOverlayPlayIcon() *Icon {
	if x != nil {
		return x.OverlayPlayIcon
	}
	return nil
}

func (x *Tile) GetFutureFocusOverlayActionSequence() []*ActionTypeValue {
	if x != nil {
		return x.FutureFocusOverlayActionSequence
	}
	return nil
}

func (x *Tile) GetOnNowFocusOverlayActionSequence() []*ActionTypeValue {
	if x != nil {
		return x.OnNowFocusOverlayActionSequence
	}
	return nil
}

func (x *Tile) GetPastFocusOverlayActionSequence() []*ActionTypeValue {
	if x != nil {
		return x.PastFocusOverlayActionSequence
	}
	return nil
}

func (x *Tile) GetFutureFocusDurationAttributes() []*Attribute {
	if x != nil {
		return x.FutureFocusDurationAttributes
	}
	return nil
}

func (x *Tile) GetOnNowFocusDurationAttributes() []*Attribute {
	if x != nil {
		return x.OnNowFocusDurationAttributes
	}
	return nil
}

func (x *Tile) GetPastFocusDurationAttributes() []*Attribute {
	if x != nil {
		return x.PastFocusDurationAttributes
	}
	return nil
}

func (x *Tile) GetFocusIndicators() []*Indicator {
	if x != nil {
		return x.FocusIndicators
	}
	return nil
}

func (x *Tile) GetOverlayIndicators() []*Indicator {
	if x != nil {
		return x.OverlayIndicators
	}
	return nil
}

func (x *Tile) GetMoreActions() *ActionTypeValue {
	if x != nil {
		return x.MoreActions
	}
	return nil
}

func (x *Tile) GetFutureDurationAttributes() []*Attribute {
	if x != nil {
		return x.FutureDurationAttributes
	}
	return nil
}

func (x *Tile) GetOnNowDurationAttributes() []*Attribute {
	if x != nil {
		return x.OnNowDurationAttributes
	}
	return nil
}

func (x *Tile) GetPastDurationAttributes() []*Attribute {
	if x != nil {
		return x.PastDurationAttributes
	}
	return nil
}

func (x *Tile) GetPopulateTileId() bool {
	if x != nil {
		return x.PopulateTileId
	}
	return false
}

func (x *Tile) GetPostPaymentAction() *ActionTypeValue {
	if x != nil {
		return x.PostPaymentAction
	}
	return nil
}

func (x *Tile) GetAssetGuid() *wrapperspb.StringValue {
	if x != nil {
		return x.AssetGuid
	}
	return nil
}

func (x *Tile) GetFranchiseGuid() *wrapperspb.StringValue {
	if x != nil {
		return x.FranchiseGuid
	}
	return nil
}

func (x *Tile) GetWatchPercent() *wrapperspb.FloatValue {
	if x != nil {
		return x.WatchPercent
	}
	return nil
}

func (x *Tile) GetRatingsList() []string {
	if x != nil {
		return x.RatingsList
	}
	return nil
}

func (x *Tile) GetDeeplink() *wrapperspb.StringValue {
	if x != nil {
		return x.Deeplink
	}
	return nil
}

func (x *Tile) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *Tile) GetIsPlayable() *wrapperspb.StringValue {
	if x != nil {
		return x.IsPlayable
	}
	return nil
}

func (x *Tile) GetActionData() *wrapperspb.StringValue {
	if x != nil {
		return x.ActionData
	}
	return nil
}

func (x *Tile) GetImageUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.ImageUrl
	}
	return nil
}

func (x *Tile) GetTtl() *timestamppb.Timestamp {
	if x != nil {
		return x.Ttl
	}
	return nil
}

func (x *Tile) GetMarqueeTitle() *wrapperspb.StringValue {
	if x != nil {
		return x.MarqueeTitle
	}
	return nil
}

func (x *Tile) GetMarqueeDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.MarqueeDescription
	}
	return nil
}

func (x *Tile) GetMarqueeAttributes() []*Attribute {
	if x != nil {
		return x.MarqueeAttributes
	}
	return nil
}

func (x *Tile) GetMarqueeImage() *Image {
	if x != nil {
		return x.MarqueeImage
	}
	return nil
}

func (x *Tile) GetEpisodeNumber() *wrapperspb.Int32Value {
	if x != nil {
		return x.EpisodeNumber
	}
	return nil
}

func (x *Tile) GetSeasonNumber() *wrapperspb.Int32Value {
	if x != nil {
		return x.SeasonNumber
	}
	return nil
}

func (x *Tile) GetResumeUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ResumeUpdatedAt
	}
	return nil
}

func (x *Tile) GetResumeType() *wrapperspb.StringValue {
	if x != nil {
		return x.ResumeType
	}
	return nil
}

func (x *Tile) GetSourceBadges() []*Badge {
	if x != nil {
		return x.SourceBadges
	}
	return nil
}

func (x *Tile) GetSourceText() string {
	if x != nil {
		return x.SourceText
	}
	return ""
}

func (x *Tile) GetWatchDeeplink() *wrapperspb.StringValue {
	if x != nil {
		return x.WatchDeeplink
	}
	return nil
}

func (x *Tile) GetBrowseDeeplink() *wrapperspb.StringValue {
	if x != nil {
		return x.BrowseDeeplink
	}
	return nil
}

func (x *Tile) GetSportsScores() *SportsScoresData {
	if x != nil {
		return x.SportsScores
	}
	return nil
}

func (x *Tile) GetOverlayDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.OverlayDescription
	}
	return nil
}

func (x *Tile) GetAutoplay() *AutoPlay {
	if x != nil {
		return x.Autoplay
	}
	return nil
}

func (x *Tile) GetProgramId() string {
	if x != nil {
		return x.ProgramId
	}
	return ""
}

func (x *Tile) GetWatchedDuration() *durationpb.Duration {
	if x != nil {
		return x.WatchedDuration
	}
	return nil
}

type AutoPlay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreviewTimeSec int32 `protobuf:"varint,1,opt,name=PreviewTimeSec,proto3" json:"PreviewTimeSec,omitempty"`
	EnableAutoPlay bool  `protobuf:"varint,2,opt,name=EnableAutoPlay,proto3" json:"EnableAutoPlay,omitempty"`
}

func (x *AutoPlay) Reset() {
	*x = AutoPlay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoPlay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoPlay) ProtoMessage() {}

func (x *AutoPlay) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoPlay.ProtoReflect.Descriptor instead.
func (*AutoPlay) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{42}
}

func (x *AutoPlay) GetPreviewTimeSec() int32 {
	if x != nil {
		return x.PreviewTimeSec
	}
	return 0
}

func (x *AutoPlay) GetEnableAutoPlay() bool {
	if x != nil {
		return x.EnableAutoPlay
	}
	return false
}

type Indicator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Icon        *Icon              `protobuf:"bytes,1,opt,name=icon,proto3" json:"icon,omitempty"`
	Actions     map[string]*Action `protobuf:"bytes,2,rep,name=actions,proto3" json:"actions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ClickAction *ActionTypeValue   `protobuf:"bytes,3,opt,name=click_action,json=clickAction,proto3" json:"click_action,omitempty"`
}

func (x *Indicator) Reset() {
	*x = Indicator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Indicator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Indicator) ProtoMessage() {}

func (x *Indicator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Indicator.ProtoReflect.Descriptor instead.
func (*Indicator) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{43}
}

func (x *Indicator) GetIcon() *Icon {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *Indicator) GetActions() map[string]*Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *Indicator) GetClickAction() *ActionTypeValue {
	if x != nil {
		return x.ClickAction
	}
	return nil
}

type DetailViewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format           DetailViewResponse_Format `protobuf:"varint,1,opt,name=format,proto3,enum=sling.cmw.presentation.DetailViewResponse_Format" json:"format,omitempty"`
	CoreProperties   *Tile                     `protobuf:"bytes,2,opt,name=core_properties,json=coreProperties,proto3" json:"core_properties,omitempty"`    // These are not present in DetailScreen on the api
	WatchExpiration  string                    `protobuf:"bytes,3,opt,name=watch_expiration,json=watchExpiration,proto3" json:"watch_expiration,omitempty"` // This indicates to the user the time they have left to watch a rental.
	Widgets          []*DetailWidget           `protobuf:"bytes,4,rep,name=widgets,proto3" json:"widgets,omitempty"`
	IsPurchaseLocked bool                      `protobuf:"varint,5,opt,name=is_purchase_locked,json=isPurchaseLocked,proto3" json:"is_purchase_locked,omitempty"` // Need pin to continue
	IsParentalLocked bool                      `protobuf:"varint,6,opt,name=is_parental_locked,json=isParentalLocked,proto3" json:"is_parental_locked,omitempty"` // Need pin to continue
	InvalidationKeys []string                  `protobuf:"bytes,7,rep,name=invalidation_keys,json=invalidationKeys,proto3" json:"invalidation_keys,omitempty"`
}

func (x *DetailViewResponse) Reset() {
	*x = DetailViewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailViewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailViewResponse) ProtoMessage() {}

func (x *DetailViewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailViewResponse.ProtoReflect.Descriptor instead.
func (*DetailViewResponse) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{44}
}

func (x *DetailViewResponse) GetFormat() DetailViewResponse_Format {
	if x != nil {
		return x.Format
	}
	return DetailViewResponse_STANDARD_V4
}

func (x *DetailViewResponse) GetCoreProperties() *Tile {
	if x != nil {
		return x.CoreProperties
	}
	return nil
}

func (x *DetailViewResponse) GetWatchExpiration() string {
	if x != nil {
		return x.WatchExpiration
	}
	return ""
}

func (x *DetailViewResponse) GetWidgets() []*DetailWidget {
	if x != nil {
		return x.Widgets
	}
	return nil
}

func (x *DetailViewResponse) GetIsPurchaseLocked() bool {
	if x != nil {
		return x.IsPurchaseLocked
	}
	return false
}

func (x *DetailViewResponse) GetIsParentalLocked() bool {
	if x != nil {
		return x.IsParentalLocked
	}
	return false
}

func (x *DetailViewResponse) GetInvalidationKeys() []string {
	if x != nil {
		return x.InvalidationKeys
	}
	return nil
}

type DetailScreenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionsView     *DetailActions    `protobuf:"bytes,1,opt,name=actions_view,json=actionsView,proto3" json:"actions_view,omitempty"`
	Attributes      []*Attribute      `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty"`
	BackgroundImage *Image            `protobuf:"bytes,3,opt,name=background_image,json=backgroundImage,proto3" json:"background_image,omitempty"`
	ChannelLogo     *Image            `protobuf:"bytes,4,opt,name=channel_logo,json=channelLogo,proto3" json:"channel_logo,omitempty"`
	ContentView     *DetailContent    `protobuf:"bytes,5,opt,name=content_view,json=contentView,proto3" json:"content_view,omitempty"`
	Description     string            `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	LongDescription string            `protobuf:"bytes,7,opt,name=long_description,json=longDescription,proto3" json:"long_description,omitempty"`
	NamedAttributes []*NamedAttribute `protobuf:"bytes,8,rep,name=named_attributes,json=namedAttributes,proto3" json:"named_attributes,omitempty"`
	RibbonsView     *DetailRibbons    `protobuf:"bytes,9,opt,name=ribbons_view,json=ribbonsView,proto3" json:"ribbons_view,omitempty"`
	Title           string            `protobuf:"bytes,10,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *DetailScreenResponse) Reset() {
	*x = DetailScreenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailScreenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailScreenResponse) ProtoMessage() {}

func (x *DetailScreenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailScreenResponse.ProtoReflect.Descriptor instead.
func (*DetailScreenResponse) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{45}
}

func (x *DetailScreenResponse) GetActionsView() *DetailActions {
	if x != nil {
		return x.ActionsView
	}
	return nil
}

func (x *DetailScreenResponse) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *DetailScreenResponse) GetBackgroundImage() *Image {
	if x != nil {
		return x.BackgroundImage
	}
	return nil
}

func (x *DetailScreenResponse) GetChannelLogo() *Image {
	if x != nil {
		return x.ChannelLogo
	}
	return nil
}

func (x *DetailScreenResponse) GetContentView() *DetailContent {
	if x != nil {
		return x.ContentView
	}
	return nil
}

func (x *DetailScreenResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DetailScreenResponse) GetLongDescription() string {
	if x != nil {
		return x.LongDescription
	}
	return ""
}

func (x *DetailScreenResponse) GetNamedAttributes() []*NamedAttribute {
	if x != nil {
		return x.NamedAttributes
	}
	return nil
}

func (x *DetailScreenResponse) GetRibbonsView() *DetailRibbons {
	if x != nil {
		return x.RibbonsView
	}
	return nil
}

func (x *DetailScreenResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type NamedAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value []string `protobuf:"bytes,2,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *NamedAttribute) Reset() {
	*x = NamedAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamedAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamedAttribute) ProtoMessage() {}

func (x *NamedAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamedAttribute.ProtoReflect.Descriptor instead.
func (*NamedAttribute) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{46}
}

func (x *NamedAttribute) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NamedAttribute) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

type DetailWidget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionKey   *ActionTypeValue `protobuf:"bytes,1,opt,name=action_key,json=actionKey,proto3" json:"action_key,omitempty"`
	DisplayText string           `protobuf:"bytes,2,opt,name=display_text,json=displayText,proto3" json:"display_text,omitempty"`
	Icon        *Icon            `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (x *DetailWidget) Reset() {
	*x = DetailWidget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailWidget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailWidget) ProtoMessage() {}

func (x *DetailWidget) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailWidget.ProtoReflect.Descriptor instead.
func (*DetailWidget) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{47}
}

func (x *DetailWidget) GetActionKey() *ActionTypeValue {
	if x != nil {
		return x.ActionKey
	}
	return nil
}

func (x *DetailWidget) GetDisplayText() string {
	if x != nil {
		return x.DisplayText
	}
	return ""
}

func (x *DetailWidget) GetIcon() *Icon {
	if x != nil {
		return x.Icon
	}
	return nil
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	SubCode int32  `protobuf:"varint,2,opt,name=sub_code,json=subCode,proto3" json:"sub_code,omitempty"`
	Details string `protobuf:"bytes,3,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{48}
}

func (x *Error) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Error) GetSubCode() int32 {
	if x != nil {
		return x.SubCode
	}
	return 0
}

func (x *Error) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url    string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Width  int32  `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
	Height int32  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *Image) Reset() {
	*x = Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{49}
}

func (x *Image) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Image) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Image) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type Attribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       Attribute_Type         `protobuf:"varint,1,opt,name=type,proto3,enum=sling.cmw.presentation.Attribute_Type" json:"type,omitempty"`
	Icon       *Icon                  `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`
	IsFeatured bool                   `protobuf:"varint,3,opt,name=is_featured,json=isFeatured,proto3" json:"is_featured,omitempty"`
	StrValue   string                 `protobuf:"bytes,4,opt,name=str_value,json=strValue,proto3" json:"str_value,omitempty"`
	TimeValue  *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=time_value,json=timeValue,proto3" json:"time_value,omitempty"`
	DurValue   *durationpb.Duration   `protobuf:"bytes,6,opt,name=dur_value,json=durValue,proto3" json:"dur_value,omitempty"`
}

func (x *Attribute) Reset() {
	*x = Attribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attribute) ProtoMessage() {}

func (x *Attribute) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attribute.ProtoReflect.Descriptor instead.
func (*Attribute) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{50}
}

func (x *Attribute) GetType() Attribute_Type {
	if x != nil {
		return x.Type
	}
	return Attribute_STRING
}

func (x *Attribute) GetIcon() *Icon {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *Attribute) GetIsFeatured() bool {
	if x != nil {
		return x.IsFeatured
	}
	return false
}

func (x *Attribute) GetStrValue() string {
	if x != nil {
		return x.StrValue
	}
	return ""
}

func (x *Attribute) GetTimeValue() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeValue
	}
	return nil
}

func (x *Attribute) GetDurValue() *durationpb.Duration {
	if x != nil {
		return x.DurValue
	}
	return nil
}

type Bar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type               Bar_Type               `protobuf:"varint,1,opt,name=type,proto3,enum=sling.cmw.presentation.Bar_Type" json:"type,omitempty"`
	ScheduledStartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=scheduled_start_time,json=scheduledStartTime,proto3" json:"scheduled_start_time,omitempty"`
	ScheduledStopTime  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=scheduled_stop_time,json=scheduledStopTime,proto3" json:"scheduled_stop_time,omitempty"`
	StartPercent       float32                `protobuf:"fixed32,4,opt,name=start_percent,json=startPercent,proto3" json:"start_percent,omitempty"`
	StopPercent        *wrapperspb.FloatValue `protobuf:"bytes,5,opt,name=stop_percent,json=stopPercent,proto3" json:"stop_percent,omitempty"`
}

func (x *Bar) Reset() {
	*x = Bar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bar) ProtoMessage() {}

func (x *Bar) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bar.ProtoReflect.Descriptor instead.
func (*Bar) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{51}
}

func (x *Bar) GetType() Bar_Type {
	if x != nil {
		return x.Type
	}
	return Bar_STATIC
}

func (x *Bar) GetScheduledStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledStartTime
	}
	return nil
}

func (x *Bar) GetScheduledStopTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduledStopTime
	}
	return nil
}

func (x *Bar) GetStartPercent() float32 {
	if x != nil {
		return x.StartPercent
	}
	return 0
}

func (x *Bar) GetStopPercent() *wrapperspb.FloatValue {
	if x != nil {
		return x.StopPercent
	}
	return nil
}

type ScreenAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Url              *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	HttpMethod       *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=http_method,json=httpMethod,proto3" json:"http_method,omitempty"`
	JsonPayload      []byte                  `protobuf:"bytes,4,opt,name=json_payload,json=jsonPayload,proto3" json:"json_payload,omitempty"`
	Title            *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Enabled          *wrapperspb.BoolValue   `protobuf:"bytes,6,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Adobe            *Adobe                  `protobuf:"bytes,7,opt,name=adobe,proto3" json:"adobe,omitempty"`
	Label            *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=label,proto3" json:"label,omitempty"`
	OtaRecordingInfo *OTARecordingInfo       `protobuf:"bytes,9,opt,name=ota_recording_info,json=otaRecordingInfo,proto3" json:"ota_recording_info,omitempty"`
}

func (x *ScreenAction) Reset() {
	*x = ScreenAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenAction) ProtoMessage() {}

func (x *ScreenAction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenAction.ProtoReflect.Descriptor instead.
func (*ScreenAction) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{52}
}

func (x *ScreenAction) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ScreenAction) GetUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *ScreenAction) GetHttpMethod() *wrapperspb.StringValue {
	if x != nil {
		return x.HttpMethod
	}
	return nil
}

func (x *ScreenAction) GetJsonPayload() []byte {
	if x != nil {
		return x.JsonPayload
	}
	return nil
}

func (x *ScreenAction) GetTitle() *wrapperspb.StringValue {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *ScreenAction) GetEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *ScreenAction) GetAdobe() *Adobe {
	if x != nil {
		return x.Adobe
	}
	return nil
}

func (x *ScreenAction) GetLabel() *wrapperspb.StringValue {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *ScreenAction) GetOtaRecordingInfo() *OTARecordingInfo {
	if x != nil {
		return x.OtaRecordingInfo
	}
	return nil
}

type Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label                 *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Icon                  *Icon                   `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`
	Id                    *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Href                  *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=href,proto3" json:"href,omitempty"`
	HttpMethod            *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=http_method,json=httpMethod,proto3" json:"http_method,omitempty"`
	PlaybackInfo          *PlaybackInfo           `protobuf:"bytes,6,opt,name=playback_info,json=playbackInfo,proto3" json:"playback_info,omitempty"`
	JsonPayload           []byte                  `protobuf:"bytes,7,opt,name=json_payload,json=jsonPayload,proto3" json:"json_payload,omitempty"`
	Title                 *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=title,proto3" json:"title,omitempty"`
	Image                 *Image                  `protobuf:"bytes,9,opt,name=image,proto3" json:"image,omitempty"`
	Adobe                 *Adobe                  `protobuf:"bytes,10,opt,name=adobe,proto3" json:"adobe,omitempty"`
	SubpackGuids          []string                `protobuf:"bytes,11,rep,name=subpack_guids,json=subpackGuids,proto3" json:"subpack_guids,omitempty"`
	PackSwitchData        *PackSwitchData         `protobuf:"bytes,12,opt,name=pack_switch_data,json=packSwitchData,proto3" json:"pack_switch_data,omitempty"`
	HrefIview             *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=href_iview,json=hrefIview,proto3" json:"href_iview,omitempty"`
	IviewType             *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=iview_type,json=iviewType,proto3" json:"iview_type,omitempty"`
	SubpackGuid           string                  `protobuf:"bytes,15,opt,name=subpack_guid,json=subpackGuid,proto3" json:"subpack_guid,omitempty"`
	RecordActionSequence  []Action_Type           `protobuf:"varint,16,rep,packed,name=record_action_sequence,json=recordActionSequence,proto3,enum=sling.cmw.presentation.Action_Type" json:"record_action_sequence,omitempty"`
	RecordActions         map[string]*Action      `protobuf:"bytes,17,rep,name=record_actions,json=recordActions,proto3" json:"record_actions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ExpandRoute           *wrapperspb.StringValue `protobuf:"bytes,18,opt,name=expand_route,json=expandRoute,proto3" json:"expand_route,omitempty"`
	SelectedAction        Action_Type             `protobuf:"varint,19,opt,name=selected_action,json=selectedAction,proto3,enum=sling.cmw.presentation.Action_Type" json:"selected_action,omitempty"`
	OtaRecordingInfo      *OTARecordingInfo       `protobuf:"bytes,20,opt,name=ota_recording_info,json=otaRecordingInfo,proto3" json:"ota_recording_info,omitempty"`
	RecordOptionsScreen   *RecordOptionsScreen    `protobuf:"bytes,21,opt,name=record_options_screen,json=recordOptionsScreen,proto3" json:"record_options_screen,omitempty"`
	PlayerScreenAction    *Action                 `protobuf:"bytes,22,opt,name=player_screen_action,json=playerScreenAction,proto3" json:"player_screen_action,omitempty"`
	ToastInfo             *ToastInfo              `protobuf:"bytes,23,opt,name=toast_info,json=toastInfo,proto3" json:"toast_info,omitempty"`
	PlaybackOptionsScreen *PlaybackOptionsScreen  `protobuf:"bytes,24,opt,name=playback_options_screen,json=playbackOptionsScreen,proto3" json:"playback_options_screen,omitempty"`
	MoreActionsScreen     *MoreActionsScreen      `protobuf:"bytes,25,opt,name=more_actions_screen,json=moreActionsScreen,proto3" json:"more_actions_screen,omitempty"`
	PreActions            map[string]*Action      `protobuf:"bytes,26,rep,name=pre_actions,json=preActions,proto3" json:"pre_actions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PreActionKeys         []*ActionTypeValue      `protobuf:"bytes,27,rep,name=pre_action_keys,json=preActionKeys,proto3" json:"pre_action_keys,omitempty"`
	ChannelGuid           *wrapperspb.StringValue `protobuf:"bytes,28,opt,name=channel_guid,json=channelGuid,proto3" json:"channel_guid,omitempty"`
	AssetType             *wrapperspb.StringValue `protobuf:"bytes,29,opt,name=asset_type,json=assetType,proto3" json:"asset_type,omitempty"`
	IsLiveEvent           *wrapperspb.BoolValue   `protobuf:"bytes,30,opt,name=is_live_event,json=isLiveEvent,proto3" json:"is_live_event,omitempty"`
}

func (x *Action) Reset() {
	*x = Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{53}
}

func (x *Action) GetLabel() *wrapperspb.StringValue {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *Action) GetIcon() *Icon {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *Action) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Action) GetHref() *wrapperspb.StringValue {
	if x != nil {
		return x.Href
	}
	return nil
}

func (x *Action) GetHttpMethod() *wrapperspb.StringValue {
	if x != nil {
		return x.HttpMethod
	}
	return nil
}

func (x *Action) GetPlaybackInfo() *PlaybackInfo {
	if x != nil {
		return x.PlaybackInfo
	}
	return nil
}

func (x *Action) GetJsonPayload() []byte {
	if x != nil {
		return x.JsonPayload
	}
	return nil
}

func (x *Action) GetTitle() *wrapperspb.StringValue {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *Action) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *Action) GetAdobe() *Adobe {
	if x != nil {
		return x.Adobe
	}
	return nil
}

func (x *Action) GetSubpackGuids() []string {
	if x != nil {
		return x.SubpackGuids
	}
	return nil
}

func (x *Action) GetPackSwitchData() *PackSwitchData {
	if x != nil {
		return x.PackSwitchData
	}
	return nil
}

func (x *Action) GetHrefIview() *wrapperspb.StringValue {
	if x != nil {
		return x.HrefIview
	}
	return nil
}

func (x *Action) GetIviewType() *wrapperspb.StringValue {
	if x != nil {
		return x.IviewType
	}
	return nil
}

func (x *Action) GetSubpackGuid() string {
	if x != nil {
		return x.SubpackGuid
	}
	return ""
}

func (x *Action) GetRecordActionSequence() []Action_Type {
	if x != nil {
		return x.RecordActionSequence
	}
	return nil
}

func (x *Action) GetRecordActions() map[string]*Action {
	if x != nil {
		return x.RecordActions
	}
	return nil
}

func (x *Action) GetExpandRoute() *wrapperspb.StringValue {
	if x != nil {
		return x.ExpandRoute
	}
	return nil
}

func (x *Action) GetSelectedAction() Action_Type {
	if x != nil {
		return x.SelectedAction
	}
	return Action_ASSET_IVIEW
}

func (x *Action) GetOtaRecordingInfo() *OTARecordingInfo {
	if x != nil {
		return x.OtaRecordingInfo
	}
	return nil
}

func (x *Action) GetRecordOptionsScreen() *RecordOptionsScreen {
	if x != nil {
		return x.RecordOptionsScreen
	}
	return nil
}

func (x *Action) GetPlayerScreenAction() *Action {
	if x != nil {
		return x.PlayerScreenAction
	}
	return nil
}

func (x *Action) GetToastInfo() *ToastInfo {
	if x != nil {
		return x.ToastInfo
	}
	return nil
}

func (x *Action) GetPlaybackOptionsScreen() *PlaybackOptionsScreen {
	if x != nil {
		return x.PlaybackOptionsScreen
	}
	return nil
}

func (x *Action) GetMoreActionsScreen() *MoreActionsScreen {
	if x != nil {
		return x.MoreActionsScreen
	}
	return nil
}

func (x *Action) GetPreActions() map[string]*Action {
	if x != nil {
		return x.PreActions
	}
	return nil
}

func (x *Action) GetPreActionKeys() []*ActionTypeValue {
	if x != nil {
		return x.PreActionKeys
	}
	return nil
}

func (x *Action) GetChannelGuid() *wrapperspb.StringValue {
	if x != nil {
		return x.ChannelGuid
	}
	return nil
}

func (x *Action) GetAssetType() *wrapperspb.StringValue {
	if x != nil {
		return x.AssetType
	}
	return nil
}

func (x *Action) GetIsLiveEvent() *wrapperspb.BoolValue {
	if x != nil {
		return x.IsLiveEvent
	}
	return nil
}

type ActionTypeValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value Action_Type `protobuf:"varint,1,opt,name=value,proto3,enum=sling.cmw.presentation.Action_Type" json:"value,omitempty"`
}

func (x *ActionTypeValue) Reset() {
	*x = ActionTypeValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionTypeValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionTypeValue) ProtoMessage() {}

func (x *ActionTypeValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionTypeValue.ProtoReflect.Descriptor instead.
func (*ActionTypeValue) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{54}
}

func (x *ActionTypeValue) GetValue() Action_Type {
	if x != nil {
		return x.Value
	}
	return Action_ASSET_IVIEW
}

type PackSwitchData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Color        PackSwitchData_TargetPackColor `protobuf:"varint,1,opt,name=color,proto3,enum=sling.cmw.presentation.PackSwitchData_TargetPackColor" json:"color,omitempty"`
	OriginalName string                         `protobuf:"bytes,2,opt,name=original_name,json=originalName,proto3" json:"original_name,omitempty"`
	NewName      string                         `protobuf:"bytes,3,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
	PackGuid     string                         `protobuf:"bytes,4,opt,name=pack_guid,json=packGuid,proto3" json:"pack_guid,omitempty"`
	CmsLookup    string                         `protobuf:"bytes,5,opt,name=cms_lookup,json=cmsLookup,proto3" json:"cms_lookup,omitempty"`
	ContentBased bool                           `protobuf:"varint,6,opt,name=content_based,json=contentBased,proto3" json:"content_based,omitempty"`
	ContentTitle string                         `protobuf:"bytes,7,opt,name=content_title,json=contentTitle,proto3" json:"content_title,omitempty"`
	ContentImage *Image                         `protobuf:"bytes,8,opt,name=content_image,json=contentImage,proto3" json:"content_image,omitempty"`
}

func (x *PackSwitchData) Reset() {
	*x = PackSwitchData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackSwitchData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackSwitchData) ProtoMessage() {}

func (x *PackSwitchData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackSwitchData.ProtoReflect.Descriptor instead.
func (*PackSwitchData) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{55}
}

func (x *PackSwitchData) GetColor() PackSwitchData_TargetPackColor {
	if x != nil {
		return x.Color
	}
	return PackSwitchData_ORANGE
}

func (x *PackSwitchData) GetOriginalName() string {
	if x != nil {
		return x.OriginalName
	}
	return ""
}

func (x *PackSwitchData) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

func (x *PackSwitchData) GetPackGuid() string {
	if x != nil {
		return x.PackGuid
	}
	return ""
}

func (x *PackSwitchData) GetCmsLookup() string {
	if x != nil {
		return x.CmsLookup
	}
	return ""
}

func (x *PackSwitchData) GetContentBased() bool {
	if x != nil {
		return x.ContentBased
	}
	return false
}

func (x *PackSwitchData) GetContentTitle() string {
	if x != nil {
		return x.ContentTitle
	}
	return ""
}

func (x *PackSwitchData) GetContentImage() *Image {
	if x != nil {
		return x.ContentImage
	}
	return nil
}

type PlaybackInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlaybackType                          PlaybackInfo_Type       `protobuf:"varint,1,opt,name=playback_type,json=playbackType,proto3,enum=sling.cmw.presentation.PlaybackInfo_Type" json:"playback_type,omitempty"`
	Url                                   string                  `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	TuningNumber                          string                  `protobuf:"bytes,3,opt,name=tuning_number,json=tuningNumber,proto3" json:"tuning_number,omitempty"`
	LsdvrGuid                             string                  `protobuf:"bytes,4,opt,name=lsdvr_guid,json=lsdvrGuid,proto3" json:"lsdvr_guid,omitempty"`
	ApBindles                             []*APBindle             `protobuf:"bytes,5,rep,name=ap_bindles,json=apBindles,proto3" json:"ap_bindles,omitempty"`
	ChannelGuid                           string                  `protobuf:"bytes,6,opt,name=channel_guid,json=channelGuid,proto3" json:"channel_guid,omitempty"`
	AllowPrebuffer                        bool                    `protobuf:"varint,7,opt,name=allow_prebuffer,json=allowPrebuffer,proto3" json:"allow_prebuffer,omitempty"`
	AllowLookbackSeekPastFurthestPosition bool                    `protobuf:"varint,8,opt,name=allow_lookback_seek_past_furthest_position,json=allowLookbackSeekPastFurthestPosition,proto3" json:"allow_lookback_seek_past_furthest_position,omitempty"`
	StartTime                             *timestamppb.Timestamp  `protobuf:"bytes,9,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime                               *timestamppb.Timestamp  `protobuf:"bytes,10,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	IsLiveEvent                           *wrapperspb.BoolValue   `protobuf:"bytes,11,opt,name=is_live_event,json=isLiveEvent,proto3" json:"is_live_event,omitempty"`
	IsTimeShiftable                       *wrapperspb.BoolValue   `protobuf:"bytes,12,opt,name=is_time_shiftable,json=isTimeShiftable,proto3" json:"is_time_shiftable,omitempty"`
	LivePlaybackDelay                     *wrapperspb.Int64Value  `protobuf:"bytes,13,opt,name=live_playback_delay,json=livePlaybackDelay,proto3" json:"live_playback_delay,omitempty"`
	RecEndTime                            *timestamppb.Timestamp  `protobuf:"bytes,14,opt,name=rec_end_time,json=recEndTime,proto3" json:"rec_end_time,omitempty"`
	RecStartTime                          *timestamppb.Timestamp  `protobuf:"bytes,15,opt,name=rec_start_time,json=recStartTime,proto3" json:"rec_start_time,omitempty"`
	PrgSvcId                              *wrapperspb.StringValue `protobuf:"bytes,16,opt,name=prg_svc_id,json=prgSvcId,proto3" json:"prg_svc_id,omitempty"`
	ContentType                           *wrapperspb.StringValue `protobuf:"bytes,17,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	PartnerServiceId                      *wrapperspb.StringValue `protobuf:"bytes,18,opt,name=partner_service_id,json=partnerServiceId,proto3" json:"partner_service_id,omitempty"`
	CallSign                              string                  `protobuf:"bytes,19,opt,name=call_sign,json=callSign,proto3" json:"call_sign,omitempty"`
	ProgramGuid                           *wrapperspb.StringValue `protobuf:"bytes,20,opt,name=program_guid,json=programGuid,proto3" json:"program_guid,omitempty"`
	PlaybackinfoAnalytics                 *PlaybackInfoAnalytics  `protobuf:"bytes,21,opt,name=playbackinfo_analytics,json=playbackinfoAnalytics,proto3" json:"playbackinfo_analytics,omitempty"`
	AssetId                               string                  `protobuf:"bytes,22,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	RecGuid                               *wrapperspb.StringValue `protobuf:"bytes,23,opt,name=rec_guid,json=recGuid,proto3" json:"rec_guid,omitempty"`
	ProgramType                           string                  `protobuf:"bytes,24,opt,name=program_type,json=programType,proto3" json:"program_type,omitempty"`
	ChannelLogo                           *Image                  `protobuf:"bytes,25,opt,name=channel_logo,json=channelLogo,proto3" json:"channel_logo,omitempty"`
}

func (x *PlaybackInfo) Reset() {
	*x = PlaybackInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaybackInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaybackInfo) ProtoMessage() {}

func (x *PlaybackInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaybackInfo.ProtoReflect.Descriptor instead.
func (*PlaybackInfo) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{56}
}

func (x *PlaybackInfo) GetPlaybackType() PlaybackInfo_Type {
	if x != nil {
		return x.PlaybackType
	}
	return PlaybackInfo_OTT
}

func (x *PlaybackInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *PlaybackInfo) GetTuningNumber() string {
	if x != nil {
		return x.TuningNumber
	}
	return ""
}

func (x *PlaybackInfo) GetLsdvrGuid() string {
	if x != nil {
		return x.LsdvrGuid
	}
	return ""
}

func (x *PlaybackInfo) GetApBindles() []*APBindle {
	if x != nil {
		return x.ApBindles
	}
	return nil
}

func (x *PlaybackInfo) GetChannelGuid() string {
	if x != nil {
		return x.ChannelGuid
	}
	return ""
}

func (x *PlaybackInfo) GetAllowPrebuffer() bool {
	if x != nil {
		return x.AllowPrebuffer
	}
	return false
}

func (x *PlaybackInfo) GetAllowLookbackSeekPastFurthestPosition() bool {
	if x != nil {
		return x.AllowLookbackSeekPastFurthestPosition
	}
	return false
}

func (x *PlaybackInfo) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *PlaybackInfo) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *PlaybackInfo) GetIsLiveEvent() *wrapperspb.BoolValue {
	if x != nil {
		return x.IsLiveEvent
	}
	return nil
}

func (x *PlaybackInfo) GetIsTimeShiftable() *wrapperspb.BoolValue {
	if x != nil {
		return x.IsTimeShiftable
	}
	return nil
}

func (x *PlaybackInfo) GetLivePlaybackDelay() *wrapperspb.Int64Value {
	if x != nil {
		return x.LivePlaybackDelay
	}
	return nil
}

func (x *PlaybackInfo) GetRecEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RecEndTime
	}
	return nil
}

func (x *PlaybackInfo) GetRecStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RecStartTime
	}
	return nil
}

func (x *PlaybackInfo) GetPrgSvcId() *wrapperspb.StringValue {
	if x != nil {
		return x.PrgSvcId
	}
	return nil
}

func (x *PlaybackInfo) GetContentType() *wrapperspb.StringValue {
	if x != nil {
		return x.ContentType
	}
	return nil
}

func (x *PlaybackInfo) GetPartnerServiceId() *wrapperspb.StringValue {
	if x != nil {
		return x.PartnerServiceId
	}
	return nil
}

func (x *PlaybackInfo) GetCallSign() string {
	if x != nil {
		return x.CallSign
	}
	return ""
}

func (x *PlaybackInfo) GetProgramGuid() *wrapperspb.StringValue {
	if x != nil {
		return x.ProgramGuid
	}
	return nil
}

func (x *PlaybackInfo) GetPlaybackinfoAnalytics() *PlaybackInfoAnalytics {
	if x != nil {
		return x.PlaybackinfoAnalytics
	}
	return nil
}

func (x *PlaybackInfo) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *PlaybackInfo) GetRecGuid() *wrapperspb.StringValue {
	if x != nil {
		return x.RecGuid
	}
	return nil
}

func (x *PlaybackInfo) GetProgramType() string {
	if x != nil {
		return x.ProgramType
	}
	return ""
}

func (x *PlaybackInfo) GetChannelLogo() *Image {
	if x != nil {
		return x.ChannelLogo
	}
	return nil
}

type PlaybackInfoAnalytics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetTitle  string `protobuf:"bytes,1,opt,name=asset_title,json=assetTitle,proto3" json:"asset_title,omitempty"`
	ContentType string `protobuf:"bytes,2,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	ProfileGuid string `protobuf:"bytes,3,opt,name=profile_guid,json=profileGuid,proto3" json:"profile_guid,omitempty"`
}

func (x *PlaybackInfoAnalytics) Reset() {
	*x = PlaybackInfoAnalytics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaybackInfoAnalytics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaybackInfoAnalytics) ProtoMessage() {}

func (x *PlaybackInfoAnalytics) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaybackInfoAnalytics.ProtoReflect.Descriptor instead.
func (*PlaybackInfoAnalytics) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{57}
}

func (x *PlaybackInfoAnalytics) GetAssetTitle() string {
	if x != nil {
		return x.AssetTitle
	}
	return ""
}

func (x *PlaybackInfoAnalytics) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *PlaybackInfoAnalytics) GetProfileGuid() string {
	if x != nil {
		return x.ProfileGuid
	}
	return ""
}

type APBindle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayOption    string                 `protobuf:"bytes,1,opt,name=display_option,json=displayOption,proto3" json:"display_option,omitempty"`
	PlayoutType      string                 `protobuf:"bytes,2,opt,name=playout_type,json=playoutType,proto3" json:"playout_type,omitempty"`
	Position         *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
	FurthestPosition int32                  `protobuf:"varint,4,opt,name=furthest_position,json=furthestPosition,proto3" json:"furthest_position,omitempty"`
}

func (x *APBindle) Reset() {
	*x = APBindle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APBindle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APBindle) ProtoMessage() {}

func (x *APBindle) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APBindle.ProtoReflect.Descriptor instead.
func (*APBindle) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{58}
}

func (x *APBindle) GetDisplayOption() string {
	if x != nil {
		return x.DisplayOption
	}
	return ""
}

func (x *APBindle) GetPlayoutType() string {
	if x != nil {
		return x.PlayoutType
	}
	return ""
}

func (x *APBindle) GetPosition() *wrapperspb.Int32Value {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *APBindle) GetFurthestPosition() int32 {
	if x != nil {
		return x.FurthestPosition
	}
	return 0
}

type Adobe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerName  string               `protobuf:"bytes,1,opt,name=container_name,json=containerName,proto3" json:"container_name,omitempty"`
	ScreenName     string               `protobuf:"bytes,2,opt,name=screen_name,json=screenName,proto3" json:"screen_name,omitempty"` // used as app redesign field also
	Clicks         bool                 `protobuf:"varint,3,opt,name=clicks,proto3" json:"clicks,omitempty"`
	RowName        string               `protobuf:"bytes,4,opt,name=row_name,json=rowName,proto3" json:"row_name,omitempty"`
	ShowId         string               `protobuf:"bytes,5,opt,name=show_id,json=showId,proto3" json:"show_id,omitempty"`
	AssetName      string               `protobuf:"bytes,6,opt,name=asset_name,json=assetName,proto3" json:"asset_name,omitempty"`
	AssetType      Adobe_AssetType      `protobuf:"varint,7,opt,name=asset_type,json=assetType,proto3,enum=sling.cmw.presentation.Adobe_AssetType" json:"asset_type,omitempty"` // used as app redesign field also
	AssetGenre     string               `protobuf:"bytes,8,opt,name=asset_genre,json=assetGenre,proto3" json:"asset_genre,omitempty"`
	ChannelName    string               `protobuf:"bytes,9,opt,name=channel_name,json=channelName,proto3" json:"channel_name,omitempty"`
	ButtonType     Adobe_ButtonType     `protobuf:"varint,10,opt,name=button_type,json=buttonType,proto3,enum=sling.cmw.presentation.Adobe_ButtonType" json:"button_type,omitempty"`
	ButtonTypeView Adobe_ButtonTypeView `protobuf:"varint,11,opt,name=button_type_view,json=buttonTypeView,proto3,enum=sling.cmw.presentation.Adobe_ButtonTypeView" json:"button_type_view,omitempty"`
	ContentType    Adobe_ContentType    `protobuf:"varint,12,opt,name=content_type,json=contentType,proto3,enum=sling.cmw.presentation.Adobe_ContentType" json:"content_type,omitempty"`
	SelectAsset    bool                 `protobuf:"varint,13,opt,name=select_asset,json=selectAsset,proto3" json:"select_asset,omitempty"`
	WatchPlay      bool                 `protobuf:"varint,14,opt,name=watch_play,json=watchPlay,proto3" json:"watch_play,omitempty"`
	Manage         bool                 `protobuf:"varint,15,opt,name=manage,proto3" json:"manage,omitempty"`
	EditChannel    bool                 `protobuf:"varint,16,opt,name=edit_channel,json=editChannel,proto3" json:"edit_channel,omitempty"`
	MyDvrClick     bool                 `protobuf:"varint,17,opt,name=my_dvr_click,json=myDvrClick,proto3" json:"my_dvr_click,omitempty"`
	// fields for app redesign
	AccountGuid      string                  `protobuf:"bytes,18,opt,name=account_guid,json=accountGuid,proto3" json:"account_guid,omitempty"`
	DeviceGuid       string                  `protobuf:"bytes,19,opt,name=device_guid,json=deviceGuid,proto3" json:"device_guid,omitempty"`
	AccountStatus    Adobe_AccountStatus     `protobuf:"varint,20,opt,name=account_status,json=accountStatus,proto3,enum=sling.cmw.presentation.Adobe_AccountStatus" json:"account_status,omitempty"`
	RibbonName       string                  `protobuf:"bytes,21,opt,name=ribbon_name,json=ribbonName,proto3" json:"ribbon_name,omitempty"`
	Action           string                  `protobuf:"bytes,22,opt,name=action,proto3" json:"action,omitempty"`
	TabName          string                  `protobuf:"bytes,23,opt,name=tab_name,json=tabName,proto3" json:"tab_name,omitempty"`
	Channel          string                  `protobuf:"bytes,24,opt,name=channel,proto3" json:"channel,omitempty"`
	Asset            string                  `protobuf:"bytes,25,opt,name=asset,proto3" json:"asset,omitempty"`
	AssetGuid        string                  `protobuf:"bytes,26,opt,name=asset_guid,json=assetGuid,proto3" json:"asset_guid,omitempty"`
	Language         string                  `protobuf:"bytes,27,opt,name=language,proto3" json:"language,omitempty"`
	ProgramGuid      string                  `protobuf:"bytes,28,opt,name=program_guid,json=programGuid,proto3" json:"program_guid,omitempty"`
	FieldFormat      Adobe_AdobeFieldFormat  `protobuf:"varint,29,opt,name=field_format,json=fieldFormat,proto3,enum=sling.cmw.presentation.Adobe_AdobeFieldFormat" json:"field_format,omitempty"`
	HybridAssetValue string                  `protobuf:"bytes,30,opt,name=hybrid_asset_value,json=hybridAssetValue,proto3" json:"hybrid_asset_value,omitempty"`
	TileSource       *wrapperspb.StringValue `protobuf:"bytes,31,opt,name=tile_source,json=tileSource,proto3" json:"tile_source,omitempty"`
	SourceAnalytics  []byte                  `protobuf:"bytes,32,opt,name=source_analytics,json=sourceAnalytics,proto3" json:"source_analytics,omitempty"`
	ProfileGuid      string                  `protobuf:"bytes,33,opt,name=profile_guid,json=profileGuid,proto3" json:"profile_guid,omitempty"`
	PackageName      *wrapperspb.StringValue `protobuf:"bytes,34,opt,name=package_name,json=packageName,proto3" json:"package_name,omitempty"`
	HubGuid          *wrapperspb.StringValue `protobuf:"bytes,35,opt,name=hub_guid,json=hubGuid,proto3" json:"hub_guid,omitempty"`
	HubType          Adobe_Hubtype           `protobuf:"varint,36,opt,name=hub_type,json=hubType,proto3,enum=sling.cmw.presentation.Adobe_Hubtype" json:"hub_type,omitempty"`
	Packages         *wrapperspb.StringValue `protobuf:"bytes,37,opt,name=packages,proto3" json:"packages,omitempty"`
	DeepLink         string                  `protobuf:"bytes,38,opt,name=DeepLink,proto3" json:"DeepLink,omitempty"`
	Subpack          string                  `protobuf:"bytes,39,opt,name=subpack,proto3" json:"subpack,omitempty"`
	Pricing          float64                 `protobuf:"fixed64,41,opt,name=pricing,proto3" json:"pricing,omitempty"`
	ProductName      string                  `protobuf:"bytes,42,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	SubpackGuid      string                  `protobuf:"bytes,43,opt,name=subpack_guid,json=subpackGuid,proto3" json:"subpack_guid,omitempty"`
	MenuName         string                  `protobuf:"bytes,44,opt,name=menu_name,json=menuName,proto3" json:"menu_name,omitempty"`
	LinkType         string                  `protobuf:"bytes,45,opt,name=link_type,json=linkType,proto3" json:"link_type,omitempty"`
	LinkName         string                  `protobuf:"bytes,46,opt,name=link_name,json=linkName,proto3" json:"link_name,omitempty"`
	CartReferrer     string                  `protobuf:"bytes,47,opt,name=cart_referrer,json=cartReferrer,proto3" json:"cart_referrer,omitempty"`
	CartCategory     string                  `protobuf:"bytes,48,opt,name=cart_category,json=cartCategory,proto3" json:"cart_category,omitempty"`
	RecordingInfo    string                  `protobuf:"bytes,49,opt,name=recording_info,json=recordingInfo,proto3" json:"recording_info,omitempty"`
	SportsInfo       string                  `protobuf:"bytes,50,opt,name=sports_info,json=sportsInfo,proto3" json:"sports_info,omitempty"`
	ProductCategory  string                  `protobuf:"bytes,51,opt,name=product_category,json=productCategory,proto3" json:"product_category,omitempty"`
	OrderType        string                  `protobuf:"bytes,52,opt,name=order_type,json=orderType,proto3" json:"order_type,omitempty"`
	PageName         string                  `protobuf:"bytes,53,opt,name=page_name,json=pageName,proto3" json:"page_name,omitempty"`
	SearchDetails    string                  `protobuf:"bytes,54,opt,name=search_details,json=searchDetails,proto3" json:"search_details,omitempty"`
	ProfileType      string                  `protobuf:"bytes,55,opt,name=profile_type,json=profileType,proto3" json:"profile_type,omitempty"`
	Subscribed       *wrapperspb.BoolValue   `protobuf:"bytes,56,opt,name=subscribed,proto3" json:"subscribed,omitempty"`
}

func (x *Adobe) Reset() {
	*x = Adobe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Adobe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Adobe) ProtoMessage() {}

func (x *Adobe) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Adobe.ProtoReflect.Descriptor instead.
func (*Adobe) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{59}
}

func (x *Adobe) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *Adobe) GetScreenName() string {
	if x != nil {
		return x.ScreenName
	}
	return ""
}

func (x *Adobe) GetClicks() bool {
	if x != nil {
		return x.Clicks
	}
	return false
}

func (x *Adobe) GetRowName() string {
	if x != nil {
		return x.RowName
	}
	return ""
}

func (x *Adobe) GetShowId() string {
	if x != nil {
		return x.ShowId
	}
	return ""
}

func (x *Adobe) GetAssetName() string {
	if x != nil {
		return x.AssetName
	}
	return ""
}

func (x *Adobe) GetAssetType() Adobe_AssetType {
	if x != nil {
		return x.AssetType
	}
	return Adobe_Show
}

func (x *Adobe) GetAssetGenre() string {
	if x != nil {
		return x.AssetGenre
	}
	return ""
}

func (x *Adobe) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *Adobe) GetButtonType() Adobe_ButtonType {
	if x != nil {
		return x.ButtonType
	}
	return Adobe_Asset
}

func (x *Adobe) GetButtonTypeView() Adobe_ButtonTypeView {
	if x != nil {
		return x.ButtonTypeView
	}
	return Adobe_Tile
}

func (x *Adobe) GetContentType() Adobe_ContentType {
	if x != nil {
		return x.ContentType
	}
	return Adobe_Unknown
}

func (x *Adobe) GetSelectAsset() bool {
	if x != nil {
		return x.SelectAsset
	}
	return false
}

func (x *Adobe) GetWatchPlay() bool {
	if x != nil {
		return x.WatchPlay
	}
	return false
}

func (x *Adobe) GetManage() bool {
	if x != nil {
		return x.Manage
	}
	return false
}

func (x *Adobe) GetEditChannel() bool {
	if x != nil {
		return x.EditChannel
	}
	return false
}

func (x *Adobe) GetMyDvrClick() bool {
	if x != nil {
		return x.MyDvrClick
	}
	return false
}

func (x *Adobe) GetAccountGuid() string {
	if x != nil {
		return x.AccountGuid
	}
	return ""
}

func (x *Adobe) GetDeviceGuid() string {
	if x != nil {
		return x.DeviceGuid
	}
	return ""
}

func (x *Adobe) GetAccountStatus() Adobe_AccountStatus {
	if x != nil {
		return x.AccountStatus
	}
	return Adobe_AccountStatusUnknown
}

func (x *Adobe) GetRibbonName() string {
	if x != nil {
		return x.RibbonName
	}
	return ""
}

func (x *Adobe) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *Adobe) GetTabName() string {
	if x != nil {
		return x.TabName
	}
	return ""
}

func (x *Adobe) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *Adobe) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *Adobe) GetAssetGuid() string {
	if x != nil {
		return x.AssetGuid
	}
	return ""
}

func (x *Adobe) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *Adobe) GetProgramGuid() string {
	if x != nil {
		return x.ProgramGuid
	}
	return ""
}

func (x *Adobe) GetFieldFormat() Adobe_AdobeFieldFormat {
	if x != nil {
		return x.FieldFormat
	}
	return Adobe_Legacy
}

func (x *Adobe) GetHybridAssetValue() string {
	if x != nil {
		return x.HybridAssetValue
	}
	return ""
}

func (x *Adobe) GetTileSource() *wrapperspb.StringValue {
	if x != nil {
		return x.TileSource
	}
	return nil
}

func (x *Adobe) GetSourceAnalytics() []byte {
	if x != nil {
		return x.SourceAnalytics
	}
	return nil
}

func (x *Adobe) GetProfileGuid() string {
	if x != nil {
		return x.ProfileGuid
	}
	return ""
}

func (x *Adobe) GetPackageName() *wrapperspb.StringValue {
	if x != nil {
		return x.PackageName
	}
	return nil
}

func (x *Adobe) GetHubGuid() *wrapperspb.StringValue {
	if x != nil {
		return x.HubGuid
	}
	return nil
}

func (x *Adobe) GetHubType() Adobe_Hubtype {
	if x != nil {
		return x.HubType
	}
	return Adobe_SingleChannel
}

func (x *Adobe) GetPackages() *wrapperspb.StringValue {
	if x != nil {
		return x.Packages
	}
	return nil
}

func (x *Adobe) GetDeepLink() string {
	if x != nil {
		return x.DeepLink
	}
	return ""
}

func (x *Adobe) GetSubpack() string {
	if x != nil {
		return x.Subpack
	}
	return ""
}

func (x *Adobe) GetPricing() float64 {
	if x != nil {
		return x.Pricing
	}
	return 0
}

func (x *Adobe) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *Adobe) GetSubpackGuid() string {
	if x != nil {
		return x.SubpackGuid
	}
	return ""
}

func (x *Adobe) GetMenuName() string {
	if x != nil {
		return x.MenuName
	}
	return ""
}

func (x *Adobe) GetLinkType() string {
	if x != nil {
		return x.LinkType
	}
	return ""
}

func (x *Adobe) GetLinkName() string {
	if x != nil {
		return x.LinkName
	}
	return ""
}

func (x *Adobe) GetCartReferrer() string {
	if x != nil {
		return x.CartReferrer
	}
	return ""
}

func (x *Adobe) GetCartCategory() string {
	if x != nil {
		return x.CartCategory
	}
	return ""
}

func (x *Adobe) GetRecordingInfo() string {
	if x != nil {
		return x.RecordingInfo
	}
	return ""
}

func (x *Adobe) GetSportsInfo() string {
	if x != nil {
		return x.SportsInfo
	}
	return ""
}

func (x *Adobe) GetProductCategory() string {
	if x != nil {
		return x.ProductCategory
	}
	return ""
}

func (x *Adobe) GetOrderType() string {
	if x != nil {
		return x.OrderType
	}
	return ""
}

func (x *Adobe) GetPageName() string {
	if x != nil {
		return x.PageName
	}
	return ""
}

func (x *Adobe) GetSearchDetails() string {
	if x != nil {
		return x.SearchDetails
	}
	return ""
}

func (x *Adobe) GetProfileType() string {
	if x != nil {
		return x.ProfileType
	}
	return ""
}

func (x *Adobe) GetSubscribed() *wrapperspb.BoolValue {
	if x != nil {
		return x.Subscribed
	}
	return nil
}

type Icon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    Icon_Type               `protobuf:"varint,1,opt,name=type,proto3,enum=sling.cmw.presentation.Icon_Type" json:"type,omitempty"`
	Key     Icon_Key                `protobuf:"varint,2,opt,name=key,proto3,enum=sling.cmw.presentation.Icon_Key" json:"key,omitempty"`
	Url     *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Message *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Icon) Reset() {
	*x = Icon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Icon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Icon) ProtoMessage() {}

func (x *Icon) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Icon.ProtoReflect.Descriptor instead.
func (*Icon) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{60}
}

func (x *Icon) GetType() Icon_Type {
	if x != nil {
		return x.Type
	}
	return Icon_STATIC
}

func (x *Icon) GetKey() Icon_Key {
	if x != nil {
		return x.Key
	}
	return Icon_FAVORITE_HEART_FILLED
}

func (x *Icon) GetUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *Icon) GetMessage() *wrapperspb.StringValue {
	if x != nil {
		return x.Message
	}
	return nil
}

type Label struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type Label_Type              `protobuf:"varint,1,opt,name=type,proto3,enum=sling.cmw.presentation.Label_Type" json:"type,omitempty"`
	Url  *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Label) Reset() {
	*x = Label{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Label) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Label) ProtoMessage() {}

func (x *Label) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Label.ProtoReflect.Descriptor instead.
func (*Label) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{61}
}

func (x *Label) GetType() Label_Type {
	if x != nil {
		return x.Type
	}
	return Label_THUUZ_LOGO
}

func (x *Label) GetUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.Url
	}
	return nil
}

type Analytics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryId string `protobuf:"bytes,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	ItemId  string `protobuf:"bytes,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
}

func (x *Analytics) Reset() {
	*x = Analytics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Analytics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Analytics) ProtoMessage() {}

func (x *Analytics) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Analytics.ProtoReflect.Descriptor instead.
func (*Analytics) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{62}
}

func (x *Analytics) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

func (x *Analytics) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

type Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserGuid  string                 `protobuf:"bytes,1,opt,name=userGuid,proto3" json:"userGuid,omitempty"`
	GroupName string                 `protobuf:"bytes,2,opt,name=groupName,proto3" json:"groupName,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Platform  string                 `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty"`
}

func (x *Member) Reset() {
	*x = Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Member) ProtoMessage() {}

func (x *Member) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Member.ProtoReflect.Descriptor instead.
func (*Member) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{63}
}

func (x *Member) GetUserGuid() string {
	if x != nil {
		return x.UserGuid
	}
	return ""
}

func (x *Member) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *Member) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Member) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

type GetMembersQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupName string `protobuf:"bytes,1,opt,name=groupName,proto3" json:"groupName,omitempty"`
}

func (x *GetMembersQuery) Reset() {
	*x = GetMembersQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMembersQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMembersQuery) ProtoMessage() {}

func (x *GetMembersQuery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMembersQuery.ProtoReflect.Descriptor instead.
func (*GetMembersQuery) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{64}
}

func (x *GetMembersQuery) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

type ModifyMembersQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupName string    `protobuf:"bytes,1,opt,name=groupName,proto3" json:"groupName,omitempty"`
	Members   []*Member `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *ModifyMembersQuery) Reset() {
	*x = ModifyMembersQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyMembersQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyMembersQuery) ProtoMessage() {}

func (x *ModifyMembersQuery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyMembersQuery.ProtoReflect.Descriptor instead.
func (*ModifyMembersQuery) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{65}
}

func (x *ModifyMembersQuery) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *ModifyMembersQuery) GetMembers() []*Member {
	if x != nil {
		return x.Members
	}
	return nil
}

type Members struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Members []*Member `protobuf:"bytes,1,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *Members) Reset() {
	*x = Members{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Members) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Members) ProtoMessage() {}

func (x *Members) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Members.ProtoReflect.Descriptor instead.
func (*Members) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{66}
}

func (x *Members) GetMembers() []*Member {
	if x != nil {
		return x.Members
	}
	return nil
}

type BookmarkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqState    *RequestState `protobuf:"bytes,1,opt,name=req_state,json=reqState,proto3" json:"req_state,omitempty"`
	ChannelId   string        `protobuf:"bytes,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Context     ContextType   `protobuf:"varint,3,opt,name=context,proto3,enum=sling.cmw.presentation.ContextType" json:"context,omitempty"`
	FranchiseId string        `protobuf:"bytes,4,opt,name=franchiseId,proto3" json:"franchiseId,omitempty"`
	ProgramId   string        `protobuf:"bytes,5,opt,name=programId,proto3" json:"programId,omitempty"`
}

func (x *BookmarkRequest) Reset() {
	*x = BookmarkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookmarkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookmarkRequest) ProtoMessage() {}

func (x *BookmarkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookmarkRequest.ProtoReflect.Descriptor instead.
func (*BookmarkRequest) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{67}
}

func (x *BookmarkRequest) GetReqState() *RequestState {
	if x != nil {
		return x.ReqState
	}
	return nil
}

func (x *BookmarkRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *BookmarkRequest) GetContext() ContextType {
	if x != nil {
		return x.Context
	}
	return ContextType_ALL
}

func (x *BookmarkRequest) GetFranchiseId() string {
	if x != nil {
		return x.FranchiseId
	}
	return ""
}

func (x *BookmarkRequest) GetProgramId() string {
	if x != nil {
		return x.ProgramId
	}
	return ""
}

type BookmarkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProgramId       string `protobuf:"bytes,1,opt,name=programId,proto3" json:"programId,omitempty"`
	UnwatchedSeries bool   `protobuf:"varint,2,opt,name=unwatched_series,json=unwatchedSeries,proto3" json:"unwatched_series,omitempty"`
	NextTile        *Tile  `protobuf:"bytes,3,opt,name=nextTile,proto3" json:"nextTile,omitempty"`
}

func (x *BookmarkResponse) Reset() {
	*x = BookmarkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookmarkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookmarkResponse) ProtoMessage() {}

func (x *BookmarkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookmarkResponse.ProtoReflect.Descriptor instead.
func (*BookmarkResponse) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{68}
}

func (x *BookmarkResponse) GetProgramId() string {
	if x != nil {
		return x.ProgramId
	}
	return ""
}

func (x *BookmarkResponse) GetUnwatchedSeries() bool {
	if x != nil {
		return x.UnwatchedSeries
	}
	return false
}

func (x *BookmarkResponse) GetNextTile() *Tile {
	if x != nil {
		return x.NextTile
	}
	return nil
}

type Thuuz struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score int32                   `protobuf:"varint,1,opt,name=score,proto3" json:"score,omitempty"`
	Label *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Color *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *Thuuz) Reset() {
	*x = Thuuz{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Thuuz) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Thuuz) ProtoMessage() {}

func (x *Thuuz) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Thuuz.ProtoReflect.Descriptor instead.
func (*Thuuz) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{69}
}

func (x *Thuuz) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Thuuz) GetLabel() *wrapperspb.StringValue {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *Thuuz) GetColor() *wrapperspb.StringValue {
	if x != nil {
		return x.Color
	}
	return nil
}

type RequestState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserGuid          string            `protobuf:"bytes,1,opt,name=user_guid,json=userGuid,proto3" json:"user_guid,omitempty"`
	Platform          string            `protobuf:"bytes,2,opt,name=platform,proto3" json:"platform,omitempty"`
	DeviceGuid        string            `protobuf:"bytes,3,opt,name=device_guid,json=deviceGuid,proto3" json:"device_guid,omitempty"`
	SessionGuid       string            `protobuf:"bytes,4,opt,name=session_guid,json=sessionGuid,proto3" json:"session_guid,omitempty"`
	ClientConfig      string            `protobuf:"bytes,5,opt,name=client_config,json=clientConfig,proto3" json:"client_config,omitempty"`
	Features          map[string]bool   `protobuf:"bytes,6,rep,name=features,proto3" json:"features,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Timezone          string            `protobuf:"bytes,7,opt,name=timezone,proto3" json:"timezone,omitempty"`
	TimezoneId        string            `protobuf:"bytes,8,opt,name=timezone_id,json=timezoneId,proto3" json:"timezone_id,omitempty"`
	Dma               string            `protobuf:"bytes,9,opt,name=dma,proto3" json:"dma,omitempty"`
	FinderId          string            `protobuf:"bytes,10,opt,name=finder_id,json=finderId,proto3" json:"finder_id,omitempty"`
	LsdvrVolumeId     string            `protobuf:"bytes,11,opt,name=lsdvr_volume_id,json=lsdvrVolumeId,proto3" json:"lsdvr_volume_id,omitempty"`
	ClientAnalyticsId string            `protobuf:"bytes,12,opt,name=client_analytics_id,json=clientAnalyticsId,proto3" json:"client_analytics_id,omitempty"`
	CmwLoadTest       bool              `protobuf:"varint,13,opt,name=cmw_load_test,json=cmwLoadTest,proto3" json:"cmw_load_test,omitempty"`
	ProfileGuid       string            `protobuf:"bytes,14,opt,name=profile_guid,json=profileGuid,proto3" json:"profile_guid,omitempty"`
	ExperimentGroups  map[string]string `protobuf:"bytes,15,rep,name=experiment_groups,json=experimentGroups,proto3" json:"experiment_groups,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PlayerVersion     string            `protobuf:"bytes,16,opt,name=player_version,json=playerVersion,proto3" json:"player_version,omitempty"`
	ResponseConfig    string            `protobuf:"bytes,17,opt,name=response_config,json=responseConfig,proto3" json:"response_config,omitempty"`
	DeviceModel       string            `protobuf:"bytes,18,opt,name=device_model,json=deviceModel,proto3" json:"device_model,omitempty"`
	ClientVersion     string            `protobuf:"bytes,19,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
}

func (x *RequestState) Reset() {
	*x = RequestState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestState) ProtoMessage() {}

func (x *RequestState) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestState.ProtoReflect.Descriptor instead.
func (*RequestState) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{70}
}

func (x *RequestState) GetUserGuid() string {
	if x != nil {
		return x.UserGuid
	}
	return ""
}

func (x *RequestState) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *RequestState) GetDeviceGuid() string {
	if x != nil {
		return x.DeviceGuid
	}
	return ""
}

func (x *RequestState) GetSessionGuid() string {
	if x != nil {
		return x.SessionGuid
	}
	return ""
}

func (x *RequestState) GetClientConfig() string {
	if x != nil {
		return x.ClientConfig
	}
	return ""
}

func (x *RequestState) GetFeatures() map[string]bool {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *RequestState) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *RequestState) GetTimezoneId() string {
	if x != nil {
		return x.TimezoneId
	}
	return ""
}

func (x *RequestState) GetDma() string {
	if x != nil {
		return x.Dma
	}
	return ""
}

func (x *RequestState) GetFinderId() string {
	if x != nil {
		return x.FinderId
	}
	return ""
}

func (x *RequestState) GetLsdvrVolumeId() string {
	if x != nil {
		return x.LsdvrVolumeId
	}
	return ""
}

func (x *RequestState) GetClientAnalyticsId() string {
	if x != nil {
		return x.ClientAnalyticsId
	}
	return ""
}

func (x *RequestState) GetCmwLoadTest() bool {
	if x != nil {
		return x.CmwLoadTest
	}
	return false
}

func (x *RequestState) GetProfileGuid() string {
	if x != nil {
		return x.ProfileGuid
	}
	return ""
}

func (x *RequestState) GetExperimentGroups() map[string]string {
	if x != nil {
		return x.ExperimentGroups
	}
	return nil
}

func (x *RequestState) GetPlayerVersion() string {
	if x != nil {
		return x.PlayerVersion
	}
	return ""
}

func (x *RequestState) GetResponseConfig() string {
	if x != nil {
		return x.ResponseConfig
	}
	return ""
}

func (x *RequestState) GetDeviceModel() string {
	if x != nil {
		return x.DeviceModel
	}
	return ""
}

func (x *RequestState) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

type DetailViewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqState              *RequestState          `protobuf:"bytes,1,opt,name=req_state,json=reqState,proto3" json:"req_state,omitempty"`
	RestrictedToChannelId string                 `protobuf:"bytes,2,opt,name=restricted_to_channel_id,json=restrictedToChannelId,proto3" json:"restricted_to_channel_id,omitempty"`
	Time                  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	VerboseLogging        bool                   `protobuf:"varint,4,opt,name=verboseLogging,proto3" json:"verboseLogging,omitempty"`
	Context               ContextType            `protobuf:"varint,5,opt,name=context,proto3,enum=sling.cmw.presentation.ContextType" json:"context,omitempty"`
	ContentGuid           string                 `protobuf:"bytes,6,opt,name=content_guid,json=contentGuid,proto3" json:"content_guid,omitempty"`
	ContentType           string                 `protobuf:"bytes,7,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
}

func (x *DetailViewRequest) Reset() {
	*x = DetailViewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailViewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailViewRequest) ProtoMessage() {}

func (x *DetailViewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailViewRequest.ProtoReflect.Descriptor instead.
func (*DetailViewRequest) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{71}
}

func (x *DetailViewRequest) GetReqState() *RequestState {
	if x != nil {
		return x.ReqState
	}
	return nil
}

func (x *DetailViewRequest) GetRestrictedToChannelId() string {
	if x != nil {
		return x.RestrictedToChannelId
	}
	return ""
}

func (x *DetailViewRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *DetailViewRequest) GetVerboseLogging() bool {
	if x != nil {
		return x.VerboseLogging
	}
	return false
}

func (x *DetailViewRequest) GetContext() ContextType {
	if x != nil {
		return x.Context
	}
	return ContextType_ALL
}

func (x *DetailViewRequest) GetContentGuid() string {
	if x != nil {
		return x.ContentGuid
	}
	return ""
}

func (x *DetailViewRequest) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

type DetailScreenQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     DetailScreenType `protobuf:"varint,1,opt,name=type,proto3,enum=sling.cmw.presentation.DetailScreenType" json:"type,omitempty"`
	Id       string           `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	ReqState *RequestState    `protobuf:"bytes,3,opt,name=req_state,json=reqState,proto3" json:"req_state,omitempty"`
}

func (x *DetailScreenQuery) Reset() {
	*x = DetailScreenQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailScreenQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailScreenQuery) ProtoMessage() {}

func (x *DetailScreenQuery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailScreenQuery.ProtoReflect.Descriptor instead.
func (*DetailScreenQuery) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{72}
}

func (x *DetailScreenQuery) GetType() DetailScreenType {
	if x != nil {
		return x.Type
	}
	return DetailScreenType_DETAIL_CHANNEL
}

func (x *DetailScreenQuery) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DetailScreenQuery) GetReqState() *RequestState {
	if x != nil {
		return x.ReqState
	}
	return nil
}

type BadgeLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DateValue *durationpb.Duration `protobuf:"bytes,1,opt,name=date_value,json=dateValue,proto3" json:"date_value,omitempty"`
	StrValue  string               `protobuf:"bytes,2,opt,name=str_value,json=strValue,proto3" json:"str_value,omitempty"`
	Label     BadgeLabel_Type      `protobuf:"varint,3,opt,name=label,proto3,enum=sling.cmw.presentation.BadgeLabel_Type" json:"label,omitempty"`
	DurValue  *durationpb.Duration `protobuf:"bytes,4,opt,name=dur_value,json=durValue,proto3" json:"dur_value,omitempty"`
}

func (x *BadgeLabel) Reset() {
	*x = BadgeLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BadgeLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BadgeLabel) ProtoMessage() {}

func (x *BadgeLabel) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BadgeLabel.ProtoReflect.Descriptor instead.
func (*BadgeLabel) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{73}
}

func (x *BadgeLabel) GetDateValue() *durationpb.Duration {
	if x != nil {
		return x.DateValue
	}
	return nil
}

func (x *BadgeLabel) GetStrValue() string {
	if x != nil {
		return x.StrValue
	}
	return ""
}

func (x *BadgeLabel) GetLabel() BadgeLabel_Type {
	if x != nil {
		return x.Label
	}
	return BadgeLabel_COUNTDOWN
}

func (x *BadgeLabel) GetDurValue() *durationpb.Duration {
	if x != nil {
		return x.DurValue
	}
	return nil
}

type Badge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BadgeType Badge_Type  `protobuf:"varint,1,opt,name=badge_type,json=badgeType,proto3,enum=sling.cmw.presentation.Badge_Type" json:"badge_type,omitempty"`
	Key       Badge_Key   `protobuf:"varint,2,opt,name=key,proto3,enum=sling.cmw.presentation.Badge_Key" json:"key,omitempty"`
	Color     Badge_Color `protobuf:"varint,3,opt,name=color,proto3,enum=sling.cmw.presentation.Badge_Color" json:"color,omitempty"`
	Position  Position    `protobuf:"varint,4,opt,name=position,proto3,enum=sling.cmw.presentation.Position" json:"position,omitempty"`
	Label     *BadgeLabel `protobuf:"bytes,5,opt,name=label,proto3" json:"label,omitempty"`
	Shape     string      `protobuf:"bytes,6,opt,name=shape,proto3" json:"shape,omitempty"`
}

func (x *Badge) Reset() {
	*x = Badge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Badge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Badge) ProtoMessage() {}

func (x *Badge) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Badge.ProtoReflect.Descriptor instead.
func (*Badge) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{74}
}

func (x *Badge) GetBadgeType() Badge_Type {
	if x != nil {
		return x.BadgeType
	}
	return Badge_SPECIFIC
}

func (x *Badge) GetKey() Badge_Key {
	if x != nil {
		return x.Key
	}
	return Badge_LIVE
}

func (x *Badge) GetColor() Badge_Color {
	if x != nil {
		return x.Color
	}
	return Badge_DARK_BLUE
}

func (x *Badge) GetPosition() Position {
	if x != nil {
		return x.Position
	}
	return Position_BOTTOM_LEFT
}

func (x *Badge) GetLabel() *BadgeLabel {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *Badge) GetShape() string {
	if x != nil {
		return x.Shape
	}
	return ""
}

type ChannelLogoDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image    *Image   `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Position Position `protobuf:"varint,2,opt,name=position,proto3,enum=sling.cmw.presentation.Position" json:"position,omitempty"`
}

func (x *ChannelLogoDetails) Reset() {
	*x = ChannelLogoDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelLogoDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelLogoDetails) ProtoMessage() {}

func (x *ChannelLogoDetails) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelLogoDetails.ProtoReflect.Descriptor instead.
func (*ChannelLogoDetails) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{75}
}

func (x *ChannelLogoDetails) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *ChannelLogoDetails) GetPosition() Position {
	if x != nil {
		return x.Position
	}
	return Position_BOTTOM_LEFT
}

type SourceTypeDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image    *Image   `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Position Position `protobuf:"varint,2,opt,name=position,proto3,enum=sling.cmw.presentation.Position" json:"position,omitempty"`
}

func (x *SourceTypeDetails) Reset() {
	*x = SourceTypeDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceTypeDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceTypeDetails) ProtoMessage() {}

func (x *SourceTypeDetails) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceTypeDetails.ProtoReflect.Descriptor instead.
func (*SourceTypeDetails) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{76}
}

func (x *SourceTypeDetails) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *SourceTypeDetails) GetPosition() Position {
	if x != nil {
		return x.Position
	}
	return Position_BOTTOM_LEFT
}

type EmptyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Title       string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *EmptyInfo) Reset() {
	*x = EmptyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyInfo) ProtoMessage() {}

func (x *EmptyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyInfo.ProtoReflect.Descriptor instead.
func (*EmptyInfo) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{77}
}

func (x *EmptyInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *EmptyInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type RecordingStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instruction  *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=instruction,proto3" json:"instruction,omitempty"`
	LsdvrStorage *Storage                `protobuf:"bytes,2,opt,name=lsdvr_storage,json=lsdvrStorage,proto3" json:"lsdvr_storage,omitempty"`
	RsdvrStorage *Storage                `protobuf:"bytes,3,opt,name=rsdvr_storage,json=rsdvrStorage,proto3" json:"rsdvr_storage,omitempty"`
}

func (x *RecordingStatus) Reset() {
	*x = RecordingStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordingStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingStatus) ProtoMessage() {}

func (x *RecordingStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingStatus.ProtoReflect.Descriptor instead.
func (*RecordingStatus) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{78}
}

func (x *RecordingStatus) GetInstruction() *wrapperspb.StringValue {
	if x != nil {
		return x.Instruction
	}
	return nil
}

func (x *RecordingStatus) GetLsdvrStorage() *Storage {
	if x != nil {
		return x.LsdvrStorage
	}
	return nil
}

func (x *RecordingStatus) GetRsdvrStorage() *Storage {
	if x != nil {
		return x.RsdvrStorage
	}
	return nil
}

type DvrStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Storage     *Storage         `protobuf:"bytes,1,opt,name=storage,proto3" json:"storage,omitempty"`
	Format      DvrStatus_Format `protobuf:"varint,2,opt,name=format,proto3,enum=sling.cmw.presentation.DvrStatus_Format" json:"format,omitempty"`
	Instruction string           `protobuf:"bytes,3,opt,name=instruction,proto3" json:"instruction,omitempty"`
}

func (x *DvrStatus) Reset() {
	*x = DvrStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DvrStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DvrStatus) ProtoMessage() {}

func (x *DvrStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DvrStatus.ProtoReflect.Descriptor instead.
func (*DvrStatus) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{79}
}

func (x *DvrStatus) GetStorage() *Storage {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *DvrStatus) GetFormat() DvrStatus_Format {
	if x != nil {
		return x.Format
	}
	return DvrStatus_DVR_STATUS
}

func (x *DvrStatus) GetInstruction() string {
	if x != nil {
		return x.Instruction
	}
	return ""
}

type SubscriptionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string                  `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Format      SubscriptionInfo_Format `protobuf:"varint,2,opt,name=format,proto3,enum=sling.cmw.presentation.SubscriptionInfo_Format" json:"format,omitempty"`
	Subtitle    string                  `protobuf:"bytes,3,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	Title       string                  `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *SubscriptionInfo) Reset() {
	*x = SubscriptionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionInfo) ProtoMessage() {}

func (x *SubscriptionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionInfo.ProtoReflect.Descriptor instead.
func (*SubscriptionInfo) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{80}
}

func (x *SubscriptionInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SubscriptionInfo) GetFormat() SubscriptionInfo_Format {
	if x != nil {
		return x.Format
	}
	return SubscriptionInfo_SUBSCRIPTION
}

func (x *SubscriptionInfo) GetSubtitle() string {
	if x != nil {
		return x.Subtitle
	}
	return ""
}

func (x *SubscriptionInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type DeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title  string            `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Format DeviceInfo_Format `protobuf:"varint,2,opt,name=format,proto3,enum=sling.cmw.presentation.DeviceInfo_Format" json:"format,omitempty"`
}

func (x *DeviceInfo) Reset() {
	*x = DeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfo) ProtoMessage() {}

func (x *DeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfo.ProtoReflect.Descriptor instead.
func (*DeviceInfo) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{81}
}

func (x *DeviceInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DeviceInfo) GetFormat() DeviceInfo_Format {
	if x != nil {
		return x.Format
	}
	return DeviceInfo_DEVICE
}

type Storage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label           string                  `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Threshold       int32                   `protobuf:"varint,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Title           string                  `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Format          Storage_Format          `protobuf:"varint,4,opt,name=format,proto3,enum=sling.cmw.presentation.Storage_Format" json:"format,omitempty"`
	TotalHours      *wrapperspb.FloatValue  `protobuf:"bytes,5,opt,name=total_hours,json=totalHours,proto3" json:"total_hours,omitempty"`
	UsedHours       *wrapperspb.FloatValue  `protobuf:"bytes,6,opt,name=used_hours,json=usedHours,proto3" json:"used_hours,omitempty"`
	Instruction     *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=instruction,proto3" json:"instruction,omitempty"`
	ProfileStatuses []*ProfileStorageStatus `protobuf:"bytes,8,rep,name=profile_statuses,json=profileStatuses,proto3" json:"profile_statuses,omitempty"`
}

func (x *Storage) Reset() {
	*x = Storage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Storage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Storage) ProtoMessage() {}

func (x *Storage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Storage.ProtoReflect.Descriptor instead.
func (*Storage) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{82}
}

func (x *Storage) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *Storage) GetThreshold() int32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *Storage) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Storage) GetFormat() Storage_Format {
	if x != nil {
		return x.Format
	}
	return Storage_LSDVR
}

func (x *Storage) GetTotalHours() *wrapperspb.FloatValue {
	if x != nil {
		return x.TotalHours
	}
	return nil
}

func (x *Storage) GetUsedHours() *wrapperspb.FloatValue {
	if x != nil {
		return x.UsedHours
	}
	return nil
}

func (x *Storage) GetInstruction() *wrapperspb.StringValue {
	if x != nil {
		return x.Instruction
	}
	return nil
}

func (x *Storage) GetProfileStatuses() []*ProfileStorageStatus {
	if x != nil {
		return x.ProfileStatuses
	}
	return nil
}

type ProfileStorageStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileGuid string  `protobuf:"bytes,1,opt,name=profile_guid,json=profileGuid,proto3" json:"profile_guid,omitempty"`
	UsedHours   float32 `protobuf:"fixed32,2,opt,name=used_hours,json=usedHours,proto3" json:"used_hours,omitempty"`
	Label       string  `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *ProfileStorageStatus) Reset() {
	*x = ProfileStorageStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileStorageStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileStorageStatus) ProtoMessage() {}

func (x *ProfileStorageStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileStorageStatus.ProtoReflect.Descriptor instead.
func (*ProfileStorageStatus) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{83}
}

func (x *ProfileStorageStatus) GetProfileGuid() string {
	if x != nil {
		return x.ProfileGuid
	}
	return ""
}

func (x *ProfileStorageStatus) GetUsedHours() float32 {
	if x != nil {
		return x.UsedHours
	}
	return 0
}

func (x *ProfileStorageStatus) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type LsdvrVolumeState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Storage     *Storage                `protobuf:"bytes,1,opt,name=storage,proto3" json:"storage,omitempty"`
	Format      LsdvrVolumeState_Format `protobuf:"varint,2,opt,name=format,proto3,enum=sling.cmw.presentation.LsdvrVolumeState_Format" json:"format,omitempty"`
	Instruction *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=instruction,proto3" json:"instruction,omitempty"`
	Description *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Title       *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *LsdvrVolumeState) Reset() {
	*x = LsdvrVolumeState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LsdvrVolumeState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LsdvrVolumeState) ProtoMessage() {}

func (x *LsdvrVolumeState) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LsdvrVolumeState.ProtoReflect.Descriptor instead.
func (*LsdvrVolumeState) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{84}
}

func (x *LsdvrVolumeState) GetStorage() *Storage {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *LsdvrVolumeState) GetFormat() LsdvrVolumeState_Format {
	if x != nil {
		return x.Format
	}
	return LsdvrVolumeState_DVR_STATUS
}

func (x *LsdvrVolumeState) GetInstruction() *wrapperspb.StringValue {
	if x != nil {
		return x.Instruction
	}
	return nil
}

func (x *LsdvrVolumeState) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *LsdvrVolumeState) GetTitle() *wrapperspb.StringValue {
	if x != nil {
		return x.Title
	}
	return nil
}

type FocusActionHint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label      string           `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	ActionType *ActionTypeValue `protobuf:"bytes,2,opt,name=action_type,json=actionType,proto3" json:"action_type,omitempty"`
}

func (x *FocusActionHint) Reset() {
	*x = FocusActionHint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FocusActionHint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FocusActionHint) ProtoMessage() {}

func (x *FocusActionHint) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FocusActionHint.ProtoReflect.Descriptor instead.
func (*FocusActionHint) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{85}
}

func (x *FocusActionHint) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *FocusActionHint) GetActionType() *ActionTypeValue {
	if x != nil {
		return x.ActionType
	}
	return nil
}

type OTARecordingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AiringGuid    *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=airing_guid,json=airingGuid,proto3" json:"airing_guid,omitempty"`
	ChannelGuid   *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=channel_guid,json=channelGuid,proto3" json:"channel_guid,omitempty"`
	FranchiseGuid *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=franchise_guid,json=franchiseGuid,proto3" json:"franchise_guid,omitempty"`
	LsdvrVolumeId *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=lsdvr_volume_id,json=lsdvrVolumeId,proto3" json:"lsdvr_volume_id,omitempty"`
	RecordingId   *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=recording_id,json=recordingId,proto3" json:"recording_id,omitempty"`
	RuleGuid      *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=rule_guid,json=ruleGuid,proto3" json:"rule_guid,omitempty"`
}

func (x *OTARecordingInfo) Reset() {
	*x = OTARecordingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OTARecordingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OTARecordingInfo) ProtoMessage() {}

func (x *OTARecordingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OTARecordingInfo.ProtoReflect.Descriptor instead.
func (*OTARecordingInfo) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{86}
}

func (x *OTARecordingInfo) GetAiringGuid() *wrapperspb.StringValue {
	if x != nil {
		return x.AiringGuid
	}
	return nil
}

func (x *OTARecordingInfo) GetChannelGuid() *wrapperspb.StringValue {
	if x != nil {
		return x.ChannelGuid
	}
	return nil
}

func (x *OTARecordingInfo) GetFranchiseGuid() *wrapperspb.StringValue {
	if x != nil {
		return x.FranchiseGuid
	}
	return nil
}

func (x *OTARecordingInfo) GetLsdvrVolumeId() *wrapperspb.StringValue {
	if x != nil {
		return x.LsdvrVolumeId
	}
	return nil
}

func (x *OTARecordingInfo) GetRecordingId() *wrapperspb.StringValue {
	if x != nil {
		return x.RecordingId
	}
	return nil
}

func (x *OTARecordingInfo) GetRuleGuid() *wrapperspb.StringValue {
	if x != nil {
		return x.RuleGuid
	}
	return nil
}

type RecordOptionsScreen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label               string                  `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Icon                *Icon                   `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`
	ActionSequence      []*ActionTypeValue      `protobuf:"bytes,3,rep,name=action_sequence,json=actionSequence,proto3" json:"action_sequence,omitempty"`
	Actions             map[string]*Action      `protobuf:"bytes,4,rep,name=actions,proto3" json:"actions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SelectedAction      *ActionTypeValue        `protobuf:"bytes,5,opt,name=selected_action,json=selectedAction,proto3" json:"selected_action,omitempty"`
	PrimaryAttributes   []*Attribute            `protobuf:"bytes,6,rep,name=primary_attributes,json=primaryAttributes,proto3" json:"primary_attributes,omitempty"`
	SecondaryAttributes []*Attribute            `protobuf:"bytes,7,rep,name=secondary_attributes,json=secondaryAttributes,proto3" json:"secondary_attributes,omitempty"`
	Description         *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	Image               *Image                  `protobuf:"bytes,9,opt,name=image,proto3" json:"image,omitempty"`
	Title               *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *RecordOptionsScreen) Reset() {
	*x = RecordOptionsScreen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordOptionsScreen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordOptionsScreen) ProtoMessage() {}

func (x *RecordOptionsScreen) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordOptionsScreen.ProtoReflect.Descriptor instead.
func (*RecordOptionsScreen) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{87}
}

func (x *RecordOptionsScreen) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *RecordOptionsScreen) GetIcon() *Icon {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *RecordOptionsScreen) GetActionSequence() []*ActionTypeValue {
	if x != nil {
		return x.ActionSequence
	}
	return nil
}

func (x *RecordOptionsScreen) GetActions() map[string]*Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *RecordOptionsScreen) GetSelectedAction() *ActionTypeValue {
	if x != nil {
		return x.SelectedAction
	}
	return nil
}

func (x *RecordOptionsScreen) GetPrimaryAttributes() []*Attribute {
	if x != nil {
		return x.PrimaryAttributes
	}
	return nil
}

func (x *RecordOptionsScreen) GetSecondaryAttributes() []*Attribute {
	if x != nil {
		return x.SecondaryAttributes
	}
	return nil
}

func (x *RecordOptionsScreen) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *RecordOptionsScreen) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *RecordOptionsScreen) GetTitle() *wrapperspb.StringValue {
	if x != nil {
		return x.Title
	}
	return nil
}

type MoreActionsScreen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title          string                     `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Subtitle       *wrapperspb.StringValue    `protobuf:"bytes,2,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	ActionSequence []*ActionTypeValue         `protobuf:"bytes,3,rep,name=action_sequence,json=actionSequence,proto3" json:"action_sequence,omitempty"`
	Actions        map[string]*Action         `protobuf:"bytes,4,rep,name=actions,proto3" json:"actions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Position       MoreActionsScreen_Position `protobuf:"varint,5,opt,name=position,proto3,enum=sling.cmw.presentation.MoreActionsScreen_Position" json:"position,omitempty"`
}

func (x *MoreActionsScreen) Reset() {
	*x = MoreActionsScreen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoreActionsScreen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoreActionsScreen) ProtoMessage() {}

func (x *MoreActionsScreen) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoreActionsScreen.ProtoReflect.Descriptor instead.
func (*MoreActionsScreen) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{88}
}

func (x *MoreActionsScreen) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MoreActionsScreen) GetSubtitle() *wrapperspb.StringValue {
	if x != nil {
		return x.Subtitle
	}
	return nil
}

func (x *MoreActionsScreen) GetActionSequence() []*ActionTypeValue {
	if x != nil {
		return x.ActionSequence
	}
	return nil
}

func (x *MoreActionsScreen) GetActions() map[string]*Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *MoreActionsScreen) GetPosition() MoreActionsScreen_Position {
	if x != nil {
		return x.Position
	}
	return MoreActionsScreen_Overlay
}

type ToastInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title    string                  `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Subtitle *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	Image    *Image                  `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *ToastInfo) Reset() {
	*x = ToastInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToastInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToastInfo) ProtoMessage() {}

func (x *ToastInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToastInfo.ProtoReflect.Descriptor instead.
func (*ToastInfo) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{89}
}

func (x *ToastInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ToastInfo) GetSubtitle() *wrapperspb.StringValue {
	if x != nil {
		return x.Subtitle
	}
	return nil
}

func (x *ToastInfo) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

type PlaybackOptionsScreen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label          string                  `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Title          *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description    *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ActionSequence []*ActionTypeValue      `protobuf:"bytes,4,rep,name=action_sequence,json=actionSequence,proto3" json:"action_sequence,omitempty"`
	Actions        map[string]*Action      `protobuf:"bytes,5,rep,name=actions,proto3" json:"actions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PlaybackOptionsScreen) Reset() {
	*x = PlaybackOptionsScreen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaybackOptionsScreen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaybackOptionsScreen) ProtoMessage() {}

func (x *PlaybackOptionsScreen) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaybackOptionsScreen.ProtoReflect.Descriptor instead.
func (*PlaybackOptionsScreen) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{90}
}

func (x *PlaybackOptionsScreen) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *PlaybackOptionsScreen) GetTitle() *wrapperspb.StringValue {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *PlaybackOptionsScreen) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *PlaybackOptionsScreen) GetActionSequence() []*ActionTypeValue {
	if x != nil {
		return x.ActionSequence
	}
	return nil
}

func (x *PlaybackOptionsScreen) GetActions() map[string]*Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

type SpecialHref struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Route         string                `protobuf:"bytes,1,opt,name=route,proto3" json:"route,omitempty"`
	Name          string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IsSelected    *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=is_selected,json=isSelected,proto3" json:"is_selected,omitempty"`
	PersistAction *Action               `protobuf:"bytes,4,opt,name=persist_action,json=persistAction,proto3" json:"persist_action,omitempty"`
}

func (x *SpecialHref) Reset() {
	*x = SpecialHref{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecialHref) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecialHref) ProtoMessage() {}

func (x *SpecialHref) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecialHref.ProtoReflect.Descriptor instead.
func (*SpecialHref) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{91}
}

func (x *SpecialHref) GetRoute() string {
	if x != nil {
		return x.Route
	}
	return ""
}

func (x *SpecialHref) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SpecialHref) GetIsSelected() *wrapperspb.BoolValue {
	if x != nil {
		return x.IsSelected
	}
	return nil
}

func (x *SpecialHref) GetPersistAction() *Action {
	if x != nil {
		return x.PersistAction
	}
	return nil
}

type SpecialHrefList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HrefType     SpecialHrefList_Type `protobuf:"varint,1,opt,name=href_type,json=hrefType,proto3,enum=sling.cmw.presentation.SpecialHrefList_Type" json:"href_type,omitempty"`
	SpecialHrefs []*SpecialHref       `protobuf:"bytes,2,rep,name=special_hrefs,json=specialHrefs,proto3" json:"special_hrefs,omitempty"`
	Title        string               `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *SpecialHrefList) Reset() {
	*x = SpecialHrefList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecialHrefList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecialHrefList) ProtoMessage() {}

func (x *SpecialHrefList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecialHrefList.ProtoReflect.Descriptor instead.
func (*SpecialHrefList) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{92}
}

func (x *SpecialHrefList) GetHrefType() SpecialHrefList_Type {
	if x != nil {
		return x.HrefType
	}
	return SpecialHrefList_FILTERS
}

func (x *SpecialHrefList) GetSpecialHrefs() []*SpecialHref {
	if x != nil {
		return x.SpecialHrefs
	}
	return nil
}

func (x *SpecialHrefList) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type SportsScoresData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId     string       `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	AwayTeam   *TeamDetails `protobuf:"bytes,2,opt,name=away_team,json=awayTeam,proto3" json:"away_team,omitempty"`
	HomeTeam   *TeamDetails `protobuf:"bytes,3,opt,name=home_team,json=homeTeam,proto3" json:"home_team,omitempty"`
	Status     *GameStatus  `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Attributes []string     `protobuf:"bytes,5,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *SportsScoresData) Reset() {
	*x = SportsScoresData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SportsScoresData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SportsScoresData) ProtoMessage() {}

func (x *SportsScoresData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SportsScoresData.ProtoReflect.Descriptor instead.
func (*SportsScoresData) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{93}
}

func (x *SportsScoresData) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *SportsScoresData) GetAwayTeam() *TeamDetails {
	if x != nil {
		return x.AwayTeam
	}
	return nil
}

func (x *SportsScoresData) GetHomeTeam() *TeamDetails {
	if x != nil {
		return x.HomeTeam
	}
	return nil
}

func (x *SportsScoresData) GetStatus() *GameStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SportsScoresData) GetAttributes() []string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type TeamDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayName     string                 `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	DisplayNameFull string                 `protobuf:"bytes,2,opt,name=display_name_full,json=displayNameFull,proto3" json:"display_name_full,omitempty"`
	LogoUrl         *Image                 `protobuf:"bytes,3,opt,name=logo_url,json=logoUrl,proto3" json:"logo_url,omitempty"`
	Seed            *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=seed,proto3" json:"seed,omitempty"`
	Color           string                 `protobuf:"bytes,5,opt,name=color,proto3" json:"color,omitempty"`
	Wins            int32                  `protobuf:"varint,6,opt,name=wins,proto3" json:"wins,omitempty"`
	Losses          int32                  `protobuf:"varint,7,opt,name=losses,proto3" json:"losses,omitempty"`
}

func (x *TeamDetails) Reset() {
	*x = TeamDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamDetails) ProtoMessage() {}

func (x *TeamDetails) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamDetails.ProtoReflect.Descriptor instead.
func (*TeamDetails) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{94}
}

func (x *TeamDetails) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *TeamDetails) GetDisplayNameFull() string {
	if x != nil {
		return x.DisplayNameFull
	}
	return ""
}

func (x *TeamDetails) GetLogoUrl() *Image {
	if x != nil {
		return x.LogoUrl
	}
	return nil
}

func (x *TeamDetails) GetSeed() *wrapperspb.Int64Value {
	if x != nil {
		return x.Seed
	}
	return nil
}

func (x *TeamDetails) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *TeamDetails) GetWins() int32 {
	if x != nil {
		return x.Wins
	}
	return 0
}

func (x *TeamDetails) GetLosses() int32 {
	if x != nil {
		return x.Losses
	}
	return 0
}

type GameStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AwayScore *TeamScore `protobuf:"bytes,1,opt,name=away_score,json=awayScore,proto3" json:"away_score,omitempty"`
	HomeScore *TeamScore `protobuf:"bytes,2,opt,name=home_score,json=homeScore,proto3" json:"home_score,omitempty"`
	ExpiresAt int64      `protobuf:"varint,3,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	Href      string     `protobuf:"bytes,4,opt,name=href,proto3" json:"href,omitempty"`
	State     string     `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *GameStatus) Reset() {
	*x = GameStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameStatus) ProtoMessage() {}

func (x *GameStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameStatus.ProtoReflect.Descriptor instead.
func (*GameStatus) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{95}
}

func (x *GameStatus) GetAwayScore() *TeamScore {
	if x != nil {
		return x.AwayScore
	}
	return nil
}

func (x *GameStatus) GetHomeScore() *TeamScore {
	if x != nil {
		return x.HomeScore
	}
	return nil
}

func (x *GameStatus) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

func (x *GameStatus) GetHref() string {
	if x != nil {
		return x.Href
	}
	return ""
}

func (x *GameStatus) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

type TeamScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TeamScore) Reset() {
	*x = TeamScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamScore) ProtoMessage() {}

func (x *TeamScore) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamScore.ProtoReflect.Descriptor instead.
func (*TeamScore) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{96}
}

func (x *TeamScore) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TeamScore) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type LgPreviewRibbon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkipInterval int32            `protobuf:"varint,1,opt,name=skip_interval,json=skipInterval,proto3" json:"skip_interval,omitempty"`
	PubDate      string           `protobuf:"bytes,2,opt,name=pub_date,json=pubDate,proto3" json:"pub_date,omitempty"`
	ItemList     []*LgPreviewTile `protobuf:"bytes,3,rep,name=item_list,json=itemList,proto3" json:"item_list,omitempty"`
}

func (x *LgPreviewRibbon) Reset() {
	*x = LgPreviewRibbon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LgPreviewRibbon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LgPreviewRibbon) ProtoMessage() {}

func (x *LgPreviewRibbon) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LgPreviewRibbon.ProtoReflect.Descriptor instead.
func (*LgPreviewRibbon) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{97}
}

func (x *LgPreviewRibbon) GetSkipInterval() int32 {
	if x != nil {
		return x.SkipInterval
	}
	return 0
}

func (x *LgPreviewRibbon) GetPubDate() string {
	if x != nil {
		return x.PubDate
	}
	return ""
}

func (x *LgPreviewRibbon) GetItemList() []*LgPreviewTile {
	if x != nil {
		return x.ItemList
	}
	return nil
}

type LgPreviewTile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeeplinkId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=deeplinkId,proto3" json:"deeplinkId,omitempty"`
	Type       string                  `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Title      string                  `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Category   string                  `protobuf:"bytes,4,opt,name=category,proto3" json:"category,omitempty"`
	Image      *Image                  `protobuf:"bytes,5,opt,name=image,proto3" json:"image,omitempty"`
	Image_4K   *Image                  `protobuf:"bytes,6,opt,name=image_4k,json=image4k,proto3" json:"image_4k,omitempty"`
}

func (x *LgPreviewTile) Reset() {
	*x = LgPreviewTile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_presentation_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LgPreviewTile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LgPreviewTile) ProtoMessage() {}

func (x *LgPreviewTile) ProtoReflect() protoreflect.Message {
	mi := &file_proto_presentation_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LgPreviewTile.ProtoReflect.Descriptor instead.
func (*LgPreviewTile) Descriptor() ([]byte, []int) {
	return file_proto_presentation_proto_rawDescGZIP(), []int{98}
}

func (x *LgPreviewTile) GetDeeplinkId() *wrapperspb.StringValue {
	if x != nil {
		return x.DeeplinkId
	}
	return nil
}

func (x *LgPreviewTile) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *LgPreviewTile) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *LgPreviewTile) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *LgPreviewTile) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *LgPreviewTile) GetImage_4K() *Image {
	if x != nil {
		return x.Image_4K
	}
	return nil
}

var File_proto_presentation_proto protoreflect.FileDescriptor

var file_proto_presentation_proto_rawDesc = []byte{
	0x0a, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x73, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x93, 0x01, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x72, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x47, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x67, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x47, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x47, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x75, 0x69, 0x64, 0x22, 0x2e, 0x0a, 0x10, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x44, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x64, 0x22, 0xec, 0x01, 0x0a, 0x14, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x63, 0x47, 0x75, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x47, 0x75, 0x69, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x65, 0x63, 0x47, 0x75, 0x69, 0x64, 0x12, 0x4f, 0x0a, 0x08, 0x72, 0x65,
	0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x73,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x63, 0x47,
	0x75, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x72, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6c,
	0x73, 0x64, 0x76, 0x72, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x73, 0x64, 0x76, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x49, 0x64, 0x22, 0x23, 0x0a, 0x07, 0x52, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08,
	0x0a, 0x04, 0x42, 0x4f, 0x54, 0x48, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x52, 0x53, 0x10, 0x01,
	0x12, 0x06, 0x0a, 0x02, 0x4c, 0x53, 0x10, 0x02, 0x22, 0x36, 0x0a, 0x15, 0x4c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x52, 0x65, 0x63, 0x47, 0x75, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x47, 0x75, 0x69, 0x64,
	0x22, 0xf4, 0x01, 0x0a, 0x15, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x47,
	0x75, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x47, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f,
	0x67, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65,
	0x47, 0x75, 0x69, 0x64, 0x12, 0x53, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x75, 0x69, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x72, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x73, 0x64,
	0x76, 0x72, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6c, 0x73, 0x64, 0x76, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49,
	0x64, 0x22, 0x24, 0x0a, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a,
	0x04, 0x42, 0x4f, 0x54, 0x48, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x52, 0x53, 0x10, 0x01, 0x12,
	0x06, 0x0a, 0x02, 0x4c, 0x53, 0x10, 0x02, 0x22, 0x3f, 0x0a, 0x16, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x75, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x69, 0x73, 0x65, 0x5f, 0x67,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x69, 0x73, 0x65, 0x47, 0x75, 0x69, 0x64, 0x22, 0x89, 0x05, 0x0a, 0x07, 0x50, 0x67, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x41, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x72,
	0x65, 0x71, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x69, 0x62, 0x62, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x69, 0x62, 0x62, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6c, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d,
	0x6f, 0x63, 0x6b, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6d, 0x6f, 0x63, 0x6b, 0x47, 0x75, 0x69, 0x64, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f,
	0x74, 0x65, 0x72, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x5f, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x3e, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x5b, 0x0a, 0x16, 0x47, 0x72, 0x61, 0x63, 0x65, 0x6e, 0x6f, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x41,
	0x0a, 0x09, 0x72, 0x65, 0x71, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x72, 0x65, 0x71, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x22, 0x74, 0x0a, 0x19, 0x47, 0x72, 0x61, 0x63, 0x65, 0x6e, 0x6f, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57,
	0x0a, 0x12, 0x67, 0x72, 0x61, 0x63, 0x65, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x61, 0x63, 0x65, 0x6e, 0x6f, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x11, 0x67, 0x72, 0x61, 0x63, 0x65, 0x6e, 0x6f, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0x75, 0x0a, 0x10, 0x47, 0x72, 0x61, 0x63, 0x65,
	0x6e, 0x6f, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x75, 0x69, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x67, 0x72, 0x61, 0x63, 0x65, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x63, 0x65, 0x6e, 0x6f, 0x74, 0x65, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x65, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x65, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0xfa,
	0x01, 0x0a, 0x08, 0x54, 0x61, 0x62, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x41, 0x0a, 0x09, 0x72,
	0x65, 0x71, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x72, 0x65, 0x71, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x74, 0x61, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x61, 0x62, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x62, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe4, 0x02, 0x0a, 0x0d,
	0x44, 0x65, 0x65, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x41, 0x0a,
	0x09, 0x72, 0x65, 0x71, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x72, 0x65, 0x71, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x14, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x77, 0x61, 0x74, 0x63, 0x68, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x48, 0x6f, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x22, 0xbf, 0x02, 0x0a, 0x11, 0x44, 0x65, 0x65, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x41, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x08, 0x72, 0x65, 0x71, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x07, 0x71,
	0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x65, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x09, 0x74,
	0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32,
	0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x65, 0x70, 0x4c, 0x69, 0x6e, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x69, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x74, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x36, 0x0a, 0x08,
	0x54, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x49, 0x4c, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x10, 0x00, 0x12,
	0x13, 0x0a, 0x0f, 0x54, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x53, 0x53,
	0x45, 0x54, 0x10, 0x01, 0x22, 0x57, 0x0a, 0x14, 0x44, 0x65, 0x65, 0x70, 0x6c, 0x69, 0x6e, 0x6b,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x22, 0xd9, 0x01,
	0x0a, 0x14, 0x44, 0x65, 0x65, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x09, 0x64, 0x65, 0x65, 0x70, 0x6c, 0x69,
	0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x65, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x65, 0x70, 0x6c, 0x69, 0x6e, 0x6b,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x64, 0x65, 0x65, 0x70, 0x6c, 0x69, 0x6e, 0x6b,
	0x73, 0x1a, 0x66, 0x0a, 0x0e, 0x44, 0x65, 0x65, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77,
	0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65,
	0x65, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc3, 0x01, 0x0a, 0x12, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x41, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x72, 0x65, 0x71, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x28, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x22,
	0xe6, 0x02, 0x0a, 0x0d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x4b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x37, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3d,
	0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6c,
	0x65, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6c, 0x65, 0x12, 0x36, 0x0a,
	0x06, 0x72, 0x69, 0x62, 0x62, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x69, 0x62, 0x62, 0x6f, 0x6e, 0x52, 0x06, 0x72,
	0x69, 0x62, 0x62, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74,
	0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x29, 0x0a,
	0x11, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x49, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x52, 0x49, 0x42, 0x42, 0x4f, 0x4e, 0x10, 0x01, 0x22, 0xa5, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x41, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x72, 0x65, 0x71, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x28, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x51, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x41, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x72, 0x65, 0x71, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x22, 0xb1, 0x03, 0x0a, 0x0d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x4c, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x4c, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x73, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2b,
	0x0a, 0x11, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x1a, 0x5a, 0x0a, 0x0c, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2e, 0x0a, 0x11, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x41,
	0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x01, 0x22, 0xd7, 0x04, 0x0a, 0x10, 0x44, 0x65, 0x65, 0x70,
	0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x07,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x65, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a,
	0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d,
	0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x35, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x52,
	0x0a, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x67, 0x75,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x47, 0x75, 0x69, 0x64, 0x1a, 0x5a, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63,
	0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x9b, 0x02, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x4b, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x5a, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77,
	0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x68, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x08, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x22, 0xb2, 0x19, 0x0a, 0x06, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x72, 0x69, 0x62, 0x62, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d,
	0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52,
	0x69, 0x62, 0x62, 0x6f, 0x6e, 0x52, 0x07, 0x72, 0x69, 0x62, 0x62, 0x6f, 0x6e, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x72, 0x69, 0x62,
	0x62, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x68, 0x69, 0x64, 0x65, 0x52, 0x69, 0x62, 0x62, 0x6f, 0x6e, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73,
	0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x12, 0x3d, 0x0a, 0x06, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2e, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4f, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x06, 0x62, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x12, 0x3b, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x30,
	0x0a, 0x04, 0x67, 0x72, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x69, 0x64, 0x52, 0x04, 0x67, 0x72, 0x69, 0x64,
	0x12, 0x53, 0x0a, 0x11, 0x67, 0x72, 0x69, 0x64, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x69, 0x64, 0x47, 0x75, 0x69, 0x64, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x67, 0x72, 0x69, 0x64, 0x53, 0x6f, 0x72, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x57, 0x0a, 0x13, 0x67, 0x72, 0x69, 0x64, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x69, 0x64,
	0x47, 0x75, 0x69, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x67, 0x72, 0x69,
	0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x12, 0x38, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x50, 0x61, 0x67, 0x65, 0x12, 0x49, 0x0a, 0x0d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x47, 0x75, 0x69, 0x64, 0x65, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x47, 0x75, 0x69, 0x64, 0x65, 0x12, 0x64, 0x0a, 0x1a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x69, 0x64, 0x47, 0x75, 0x69, 0x64, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x17, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x75, 0x69, 0x64,
	0x65, 0x53, 0x6f, 0x72, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x68, 0x0a, 0x1c,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x13, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x69, 0x64,
	0x47, 0x75, 0x69, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x19, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x75, 0x69, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x48, 0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x46, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77,
	0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x72,
	0x65, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x0a, 0x64, 0x76, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x76, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x09, 0x64, 0x76, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x55, 0x0a, 0x11, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d,
	0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x10, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x43, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63,
	0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4e, 0x0a, 0x0e, 0x64, 0x76, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x73, 0x64, 0x76, 0x72, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x64, 0x76, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x5b,
	0x0a, 0x16, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x14, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x11, 0x72,
	0x32, 0x30, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63,
	0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x47, 0x72, 0x69, 0x64, 0x47, 0x75, 0x69, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0f, 0x72, 0x32, 0x30, 0x47, 0x75, 0x69, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x48, 0x0a, 0x0d, 0x67, 0x75, 0x69, 0x64, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x67, 0x75,
	0x69, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x52, 0x0a, 0x0c, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x39,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x4d, 0x0a, 0x14, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c,
	0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x4d, 0x0a, 0x14, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x12, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x50,
	0x72, 0x65, 0x76, 0x50, 0x61, 0x67, 0x65, 0x12, 0x49, 0x0a, 0x12, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x10, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x12, 0x49, 0x0a, 0x12, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x70,
	0x72, 0x65, 0x76, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x50, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x47, 0x0a, 0x0f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x69, 0x62, 0x62, 0x6f,
	0x6e, 0x73, 0x18, 0x26, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x52, 0x69, 0x62, 0x62, 0x6f, 0x6e, 0x52, 0x0e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x52, 0x69, 0x62, 0x62, 0x6f, 0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x68, 0x72, 0x65, 0x66, 0x73, 0x18, 0x27, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x48, 0x72, 0x65, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x48, 0x72, 0x65, 0x66, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x65, 0x72, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x61, 0x64, 0x6f, 0x62,
	0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x41, 0x64, 0x6f, 0x62, 0x65, 0x52, 0x05, 0x61, 0x64, 0x6f, 0x62, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x2a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x6b, 0x69, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x1a, 0x60, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xf7, 0x01, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x54, 0x41, 0x42, 0x42, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x41, 0x52,
	0x43, 0x48, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x5f, 0x48,
	0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x52, 0x49, 0x44,
	0x5f, 0x47, 0x55, 0x49, 0x44, 0x45, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x48, 0x41, 0x4e,
	0x4e, 0x45, 0x4c, 0x5f, 0x47, 0x55, 0x49, 0x44, 0x45, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x4d,
	0x41, 0x4e, 0x41, 0x47, 0x45, 0x5f, 0x46, 0x41, 0x56, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x53, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x56, 0x52,
	0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x53, 0x44, 0x56, 0x52, 0x5f, 0x53, 0x45, 0x54, 0x54,
	0x49, 0x4e, 0x47, 0x53, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x53, 0x44, 0x56, 0x52, 0x5f,
	0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52,
	0x4f, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0a, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x55, 0x49,
	0x44, 0x45, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x49, 0x4e, 0x49, 0x5f, 0x47, 0x55, 0x49,
	0x44, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x53, 0x10, 0x0c, 0x12, 0x0f, 0x0a,
	0x0b, 0x4c, 0x47, 0x5f, 0x4c, 0x41, 0x55, 0x4e, 0x43, 0x48, 0x45, 0x52, 0x10, 0x0d, 0x22, 0x59,
	0x0a, 0x0d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x48, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xa0, 0x01, 0x0a, 0x04, 0x54, 0x61,
	0x62, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x72, 0x65, 0x66, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74,
	0x61, 0x62, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x62, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x61, 0x62, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x65, 0x64, 0x54, 0x61,
	0x62, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x22, 0xf7, 0x05, 0x0a,
	0x03, 0x54, 0x61, 0x62, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x4e, 0x0a, 0x0e, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x07, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x62, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a,
	0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x62, 0x2e, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x37, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x0c, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4e, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0d, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x75,
	0x69, 0x64, 0x1a, 0x5a, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x42,
	0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x41, 0x42, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x41, 0x42, 0x10, 0x01, 0x12, 0x0f,
	0x0a, 0x0b, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x10, 0x02, 0x12,
	0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x45, 0x5f, 0x54, 0x41, 0x42,
	0x10, 0x03, 0x22, 0x22, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x44,
	0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4e, 0x41,
	0x42, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x22, 0xc2, 0x03, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x45, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4c, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x1a,
	0x5a, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc2, 0x01, 0x0a, 0x12,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x69, 0x62, 0x62, 0x6f, 0x6e, 0x73, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x41, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d,
	0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x72, 0x65, 0x71,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0xbf, 0x0a, 0x0a, 0x06, 0x52, 0x69, 0x62, 0x62, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6c, 0x65, 0x52, 0x05,
	0x74, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x12, 0x38, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x70,
	0x72, 0x65, 0x76, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x72, 0x65,
	0x76, 0x50, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x3d, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d,
	0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52,
	0x69, 0x62, 0x62, 0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x72, 0x69, 0x62,
	0x62, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x68, 0x69, 0x64, 0x65, 0x52, 0x69, 0x62, 0x62, 0x6f, 0x6e, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73,
	0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x12, 0x35, 0x0a, 0x06, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x33, 0x0a,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x38, 0x0a, 0x07, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x0a,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x52,
	0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x12,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77,
	0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x69,
	0x62, 0x62, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x73, 0x74, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x74, 0x69, 0x74, 0x63, 0x68, 0x49, 0x64, 0x1a, 0x3e, 0x0a,
	0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd2, 0x02,
	0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x49, 0x42, 0x42,
	0x4f, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x52, 0x49, 0x44, 0x10, 0x01, 0x12, 0x0f,
	0x0a, 0x0b, 0x4d, 0x59, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x53, 0x10, 0x02, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x50, 0x4f, 0x54, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x50, 0x4f, 0x54, 0x4c,
	0x49, 0x47, 0x48, 0x54, 0x5f, 0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x56,
	0x45, 0x52, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x50, 0x4f,
	0x54, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x45, 0x52, 0x54,
	0x49, 0x43, 0x41, 0x4c, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x08, 0x12,
	0x20, 0x0a, 0x1c, 0x47, 0x52, 0x49, 0x44, 0x5f, 0x47, 0x55, 0x49, 0x44, 0x45, 0x5f, 0x56, 0x45,
	0x52, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x53, 0x10,
	0x09, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x52, 0x49, 0x44, 0x5f, 0x47, 0x55, 0x49, 0x44, 0x45, 0x5f,
	0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x41,
	0x52, 0x51, 0x55, 0x45, 0x45, 0x10, 0x0b, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x49, 0x4e, 0x49, 0x5f,
	0x47, 0x55, 0x49, 0x44, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x53, 0x10, 0x0c, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x49, 0x4e,
	0x49, 0x5f, 0x56, 0x45, 0x52, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x0d, 0x12, 0x12, 0x0a,
	0x0e, 0x50, 0x4c, 0x41, 0x49, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x53, 0x10,
	0x0e, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x47, 0x5f, 0x4c, 0x41, 0x55, 0x4e, 0x43, 0x48, 0x45, 0x52,
	0x10, 0x0f, 0x22, 0x6a, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x3e,
	0x0a, 0x05, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x54, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x85,
	0x01, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54,
	0x69, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x75, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x69, 0x62, 0x62, 0x6f, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x07, 0x72, 0x69, 0x62, 0x62, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63,
	0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x52, 0x69, 0x62, 0x62, 0x6f, 0x6e, 0x4f, 0x72, 0x4c, 0x6f, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x07, 0x72, 0x69, 0x62, 0x62, 0x6f, 0x6e, 0x73, 0x22, 0x80, 0x02, 0x0a, 0x10, 0x52, 0x69,
	0x62, 0x62, 0x6f, 0x6e, 0x4f, 0x72, 0x4c, 0x6f, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x41,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x73,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x69, 0x62, 0x62, 0x6f, 0x6e, 0x4f, 0x72, 0x4c, 0x6f,
	0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x36, 0x0a, 0x06, 0x72, 0x69, 0x62, 0x62, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x69, 0x62, 0x62, 0x6f,
	0x6e, 0x52, 0x06, 0x72, 0x69, 0x62, 0x62, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0f, 0x6c, 0x6f, 0x61,
	0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x69, 0x62, 0x62, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x61, 0x64,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x69, 0x62, 0x62, 0x6f, 0x6e, 0x52, 0x0e, 0x6c, 0x6f, 0x61, 0x64,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x69, 0x62, 0x62, 0x6f, 0x6e, 0x22, 0x20, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x49, 0x42, 0x42, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x4c, 0x4f, 0x41, 0x44, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x22, 0x3a, 0x0a, 0x0e,
	0x4c, 0x6f, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x69, 0x62, 0x62, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x72,
	0x65, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0xa7, 0x05, 0x0a, 0x0c, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x75, 0x69, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68,
	0x72, 0x65, 0x66, 0x12, 0x33, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x48, 0x69, 0x6e, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x38, 0x0a, 0x07, 0x72, 0x69, 0x62, 0x62, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x69, 0x62, 0x62,
	0x6f, 0x6e, 0x52, 0x07, 0x72, 0x69, 0x62, 0x62, 0x6f, 0x6e, 0x73, 0x12, 0x4b, 0x0a, 0x07, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x75, 0x69,
	0x64, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a,
	0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x64, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x0d, 0x66, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x64, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x1a, 0x5a, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xc1, 0x01, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x34, 0x0a, 0x16, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x66, 0x66, 0x69,
	0x6c, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61,
	0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x93, 0x06, 0x0a, 0x04, 0x47, 0x72, 0x69, 0x64, 0x12,
	0x49, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x69, 0x64,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x03, 0x62, 0x61,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x42, 0x61, 0x72, 0x52, 0x03, 0x62, 0x61, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x61, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x44, 0x61,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x37, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08,
	0x6e, 0x65, 0x78, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x76,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x65, 0x76, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x39,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x0c, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x69, 0x64, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x5d, 0x0a,
	0x0e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x69, 0x64, 0x52, 0x6f,
	0x77, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7b, 0x0a, 0x07,
	0x47, 0x72, 0x69, 0x64, 0x52, 0x6f, 0x77, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x54, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x38, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6c, 0x65, 0x52,
	0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0xbd, 0x02, 0x0a, 0x0f, 0x47, 0x72,
	0x69, 0x64, 0x47, 0x75, 0x69, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6a, 0x73,
	0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x05, 0x61, 0x64, 0x6f, 0x62, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x6f, 0x62,
	0x65, 0x52, 0x05, 0x61, 0x64, 0x6f, 0x62, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39,
	0x0a, 0x09, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49, 0x64, 0x22, 0xd4, 0x01, 0x0a, 0x0b, 0x47, 0x75,
	0x69, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x42, 0x0a, 0x08,
	0x67, 0x65, 0x74, 0x5f, 0x67, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x69, 0x64, 0x47, 0x75, 0x69, 0x64,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x67, 0x65, 0x74, 0x47, 0x72, 0x69, 0x64,
	0x12, 0x4e, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x47, 0x72, 0x69, 0x64, 0x47, 0x75, 0x69, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x22, 0xfa, 0x4b, 0x0a, 0x04, 0x54, 0x69, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x73, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6c, 0x65, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x33, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d,
	0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x41, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d,
	0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x10, 0x75, 0x70, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x0f, 0x75, 0x70, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x03, 0x62, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x72, 0x52, 0x03, 0x62, 0x61,
	0x72, 0x12, 0x43, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6c, 0x65,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0d, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x63, 0x6f, 0x6e, 0x52,
	0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x43, 0x0a,
	0x0e, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d,
	0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49,
	0x63, 0x6f, 0x6e, 0x52, 0x0d, 0x66, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x64, 0x49, 0x63,
	0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x09, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x09, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x61, 0x73, 0x74,
	0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x63, 0x61, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x10,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63,
	0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x75, 0x6e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x75, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x77, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x6f, 0x6e, 0x4e, 0x6f, 0x77, 0x12, 0x3c, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x69,
	0x6e, 0x5f, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x69, 0x73, 0x49, 0x6e,
	0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12,
	0x31, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x69, 0x73, 0x4e,
	0x65, 0x77, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x46,
	0x0a, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x69, 0x73, 0x4f, 0x6e, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x3e,
	0x0a, 0x0d, 0x67, 0x72, 0x69, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x67, 0x72, 0x69, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33,
	0x0a, 0x05, 0x74, 0x68, 0x75, 0x75, 0x7a, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x68, 0x75, 0x75, 0x7a, 0x52, 0x05, 0x74, 0x68,
	0x75, 0x75, 0x7a, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40,
	0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77,
	0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x67, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x62, 0x61, 0x64, 0x67,
	0x65, 0x73, 0x18, 0x25, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x42, 0x61, 0x64, 0x67, 0x65, 0x52, 0x06, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x12,
	0x5c, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x6f,
	0x67, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4c, 0x6f, 0x67, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x41, 0x0a,
	0x0d, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x5b, 0x0a, 0x15, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x53, 0x0a,
	0x0d, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x29,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77,
	0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69,
	0x6c, 0x65, 0x2e, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x44, 0x0a, 0x0f, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x0d, 0x66, 0x6f, 0x63, 0x75, 0x73,
	0x50, 0x6c, 0x61, 0x79, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x10, 0x66, 0x6f, 0x63, 0x75,
	0x73, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x2b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0f, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x66, 0x6f, 0x63, 0x75,
	0x73, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x2d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x11, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x62, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x62, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x4a, 0x0a,
	0x0c, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x66, 0x6f,
	0x63, 0x75, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x67, 0x0a, 0x1a, 0x66, 0x6f, 0x63,
	0x75, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x6f,
	0x67, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x17, 0x66, 0x6f, 0x63, 0x75, 0x73,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x67, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x5b, 0x0a, 0x18, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72,
	0x6c, 0x61, 0x79, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x31,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77,
	0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x16, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x4f, 0x76,
	0x65, 0x72, 0x6c, 0x61, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x53, 0x0a, 0x11, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x68, 0x69, 0x6e, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x69, 0x6e, 0x74, 0x52, 0x0f, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x69, 0x6e, 0x74, 0x12, 0x53, 0x0a, 0x14, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x5f, 0x72, 0x6f,
	0x77, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x33, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x12, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x52, 0x6f, 0x77, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x19, 0x66, 0x6f, 0x63,
	0x75, 0x73, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x66, 0x6f, 0x63, 0x75,
	0x73, 0x52, 0x6f, 0x77, 0x42, 0x61, 0x63, 0x6b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x50, 0x0a, 0x15, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x5f, 0x72, 0x6f, 0x77, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x35, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x13, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x52, 0x6f, 0x77, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x1d, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x5f, 0x72, 0x6f,
	0x77, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x36, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x1a,
	0x66, 0x6f, 0x63, 0x75, 0x73, 0x52, 0x6f, 0x77, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x74,
	0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x73, 0x74, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x74, 0x69, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x3d,
	0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x18, 0x3b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x12, 0x42, 0x0a,
	0x0d, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x18, 0x3c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77,
	0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61,
	0x64, 0x67, 0x65, 0x52, 0x0c, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x42, 0x61, 0x64, 0x67, 0x65,
	0x73, 0x12, 0x71, 0x0a, 0x24, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x66, 0x6f, 0x63, 0x75,
	0x73, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x3d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x20, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x52,
	0x6f, 0x77, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x18, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x66,
	0x6f, 0x63, 0x75, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x69, 0x6e, 0x74,
	0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63,
	0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x46, 0x6f, 0x63, 0x75, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x6e, 0x74, 0x52,
	0x15, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x5b, 0x0a, 0x15, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d,
	0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13,
	0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x17, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x40,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77,
	0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x66,
	0x75, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0d, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x77, 0x5f, 0x62,
	0x61, 0x64, 0x67, 0x65, 0x73, 0x18, 0x41, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x64, 0x67, 0x65, 0x52, 0x0b, 0x6f, 0x6e, 0x4e, 0x6f,
	0x77, 0x42, 0x61, 0x64, 0x67, 0x65, 0x73, 0x12, 0x70, 0x0a, 0x24, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f,
	0x77, 0x5f, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x42, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d,
	0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x1f, 0x6f, 0x6e, 0x4e, 0x6f, 0x77, 0x46,
	0x6f, 0x63, 0x75, 0x73, 0x52, 0x6f, 0x77, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x18, 0x6f, 0x6e, 0x5f,
	0x6e, 0x6f, 0x77, 0x5f, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x69, 0x6e, 0x74, 0x52, 0x14, 0x6f, 0x6e, 0x4e, 0x6f, 0x77, 0x46, 0x6f, 0x63, 0x75, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x15, 0x6f, 0x6e,
	0x5f, 0x6e, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x12, 0x6f, 0x6e, 0x4e, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x17, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x77,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x14, 0x6f, 0x6e, 0x4e, 0x6f, 0x77, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x61, 0x73, 0x74, 0x5f, 0x62,
	0x61, 0x64, 0x67, 0x65, 0x73, 0x18, 0x46, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x64, 0x67, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x74,
	0x42, 0x61, 0x64, 0x67, 0x65, 0x73, 0x12, 0x6d, 0x0a, 0x22, 0x70, 0x61, 0x73, 0x74, 0x5f, 0x66,
	0x6f, 0x63, 0x75, 0x73, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x47, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x1e, 0x70, 0x61, 0x73, 0x74, 0x46, 0x6f, 0x63, 0x75, 0x73,
	0x52, 0x6f, 0x77, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x16, 0x70, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6f,
	0x63, 0x75, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18,
	0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d,
	0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46,
	0x6f, 0x63, 0x75, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x6e, 0x74, 0x52, 0x13,
	0x70, 0x61, 0x73, 0x74, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x69, 0x6e, 0x74, 0x12, 0x57, 0x0a, 0x13, 0x70, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x70, 0x61, 0x73, 0x74, 0x50,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x15,
	0x70, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x70, 0x61, 0x73, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x0c, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x4b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6c, 0x65, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x59, 0x0a, 0x13, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x50, 0x0a, 0x12, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61,
	0x79, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x4d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x11, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x16, 0x65, 0x78, 0x70, 0x6c,
	0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x4e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x15, 0x65, 0x78, 0x70,
	0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x5f, 0x0a, 0x17, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x4f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x6f, 0x76,
	0x65, 0x72, 0x6c, 0x61, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x50, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x6a, 0x0a, 0x1d, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x51, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x4f, 0x76, 0x65, 0x72,
	0x6c, 0x61, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x4e, 0x0a, 0x14, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x65, 0x6e,
	0x74, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x52, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x6f,
	0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x65, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x67, 0x0a, 0x1e, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x65, 0x78, 0x70,
	0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x53, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x1c, 0x6f, 0x76,
	0x65, 0x72, 0x6c, 0x61, 0x79, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x11, 0x6f, 0x76,
	0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18,
	0x54, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d,
	0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49,
	0x63, 0x6f, 0x6e, 0x52, 0x0f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x50, 0x6c, 0x61, 0x79,
	0x49, 0x63, 0x6f, 0x6e, 0x12, 0x77, 0x0a, 0x24, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x66,
	0x6f, 0x63, 0x75, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x55, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x20, 0x66, 0x75, 0x74,
	0x75, 0x72, 0x65, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x76, 0x0a,
	0x24, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x77, 0x5f, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x56, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x1f, 0x6f, 0x6e, 0x4e, 0x6f, 0x77, 0x46, 0x6f, 0x63, 0x75, 0x73,
	0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x73, 0x0a, 0x22, 0x70, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6f,
	0x63, 0x75, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x57, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1e, 0x70, 0x61, 0x73, 0x74,
	0x46, 0x6f, 0x63, 0x75, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x6a, 0x0a, 0x20, 0x66, 0x75,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x58,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77,
	0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x1d, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x46,
	0x6f, 0x63, 0x75, 0x73, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x69, 0x0a, 0x20, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x77,
	0x5f, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x59, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x1c, 0x6f, 0x6e, 0x4e, 0x6f, 0x77, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x66, 0x0a, 0x1e, 0x70, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x5a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x1b, 0x70, 0x61,
	0x73, 0x74, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x10, 0x66, 0x6f, 0x63,
	0x75, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x5b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0f, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x50, 0x0a, 0x12, 0x6f, 0x76, 0x65, 0x72, 0x6c,
	0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x5c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x11, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x4a, 0x0a, 0x0c, 0x6d, 0x6f, 0x72,
	0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6d, 0x6f, 0x72, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5f, 0x0a, 0x1a, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x5e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x18, 0x66, 0x75,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x5e, 0x0a, 0x1a, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x77,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x5f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x17, 0x6f,
	0x6e, 0x4e, 0x6f, 0x77, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x5b, 0x0a, 0x18, 0x70, 0x61, 0x73, 0x74, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x60, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x16, 0x70, 0x61, 0x73,
	0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x61, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70,
	0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x57, 0x0a,
	0x13, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x11, 0x70, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f,
	0x67, 0x75, 0x69, 0x64, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x47,
	0x75, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x0e, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x69, 0x73, 0x65,
	0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x66, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x69, 0x73, 0x65, 0x47, 0x75, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x0d, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x66, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a,
	0x08, 0x64, 0x65, 0x65, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64,
	0x65, 0x65, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d,
	0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x69, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0a, 0x69, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3d, 0x0a,
	0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x6a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x09,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x2c, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x6c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x41, 0x0a, 0x0d, 0x6d, 0x61, 0x72, 0x71, 0x75, 0x65, 0x65,
	0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x71,
	0x75, 0x65, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x4d, 0x0a, 0x13, 0x6d, 0x61, 0x72, 0x71,
	0x75, 0x65, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x12, 0x6d, 0x61, 0x72, 0x71, 0x75, 0x65, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x61, 0x72, 0x71, 0x75,
	0x65, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x6f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x11, 0x6d, 0x61, 0x72, 0x71, 0x75, 0x65, 0x65, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0d, 0x6d, 0x61, 0x72,
	0x71, 0x75, 0x65, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x70, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x0c, 0x6d, 0x61, 0x72, 0x71, 0x75, 0x65, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a,
	0x0e, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x71, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0d, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x73, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x72,
	0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a,
	0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x73, 0x18, 0x75, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x64, 0x67, 0x65,
	0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x61, 0x64, 0x67, 0x65, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x76, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x43, 0x0a, 0x0e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x65, 0x65, 0x70, 0x6c, 0x69, 0x6e,
	0x6b, 0x18, 0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x77, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x65, 0x70,
	0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x45, 0x0a, 0x0f, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x5f, 0x64,
	0x65, 0x65, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x62, 0x72, 0x6f,
	0x77, 0x73, 0x65, 0x44, 0x65, 0x65, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x4d, 0x0a, 0x0d, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x79, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x13, 0x6f, 0x76,
	0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x08, 0x61, 0x75, 0x74,
	0x6f, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x52, 0x08, 0x61,
	0x75, 0x74, 0x6f, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x10, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x77, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x5a, 0x0a, 0x0c,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5f, 0x0a, 0x11, 0x46, 0x6f, 0x63, 0x75,
	0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb1, 0x04, 0x0a, 0x06, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x5f, 0x47, 0x55, 0x49, 0x44,
	0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x55, 0x54, 0x54, 0x4f, 0x4e, 0x10, 0x02, 0x12,
	0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x56, 0x34, 0x10, 0x03,
	0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x5f, 0x47, 0x55, 0x49, 0x44, 0x45, 0x5f,
	0x56, 0x34, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x05,
	0x12, 0x11, 0x0a, 0x0d, 0x47, 0x52, 0x49, 0x44, 0x5f, 0x47, 0x55, 0x49, 0x44, 0x45, 0x5f, 0x56,
	0x34, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x52, 0x49, 0x44, 0x5f, 0x47, 0x55, 0x49, 0x44,
	0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x56, 0x34, 0x10, 0x07, 0x12, 0x0d,
	0x0a, 0x09, 0x53, 0x50, 0x4f, 0x54, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x10, 0x08, 0x12, 0x10, 0x0a,
	0x0c, 0x53, 0x50, 0x4f, 0x54, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x56, 0x34, 0x10, 0x09, 0x12,
	0x0b, 0x0a, 0x07, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08,
	0x56, 0x45, 0x52, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x0b, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x49,
	0x52, 0x43, 0x55, 0x4c, 0x41, 0x52, 0x10, 0x0c, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x58, 0x54, 0x52,
	0x41, 0x5f, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x10, 0x0d, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x52, 0x41,
	0x44, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4c, 0x4f, 0x4e, 0x47, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x0e, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x10, 0x0f, 0x12, 0x0a, 0x0a, 0x06,
	0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x10, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x4d, 0x41, 0x4c,
	0x4c, 0x10, 0x11, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x52, 0x49, 0x44, 0x5f, 0x52, 0x32, 0x30, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x12, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x52, 0x49,
	0x44, 0x5f, 0x52, 0x32, 0x30, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x10, 0x13, 0x12,
	0x16, 0x0a, 0x12, 0x47, 0x52, 0x49, 0x44, 0x5f, 0x47, 0x55, 0x49, 0x44, 0x45, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x14, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x52, 0x49, 0x44, 0x5f,
	0x47, 0x55, 0x49, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x10, 0x15, 0x12,
	0x08, 0x0a, 0x04, 0x54, 0x45, 0x58, 0x54, 0x10, 0x16, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x4e, 0x44,
	0x52, 0x4f, 0x49, 0x44, 0x5f, 0x4c, 0x41, 0x55, 0x4e, 0x43, 0x48, 0x45, 0x52, 0x10, 0x17, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x41, 0x4d, 0x53, 0x55, 0x4e, 0x47, 0x5f, 0x4c, 0x41, 0x55, 0x4e, 0x43,
	0x48, 0x45, 0x52, 0x10, 0x18, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x50, 0x50, 0x4c, 0x45, 0x5f, 0x4c,
	0x41, 0x55, 0x4e, 0x43, 0x48, 0x45, 0x52, 0x10, 0x19, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x41, 0x4d,
	0x45, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x1a, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x49, 0x4e, 0x49,
	0x5f, 0x47, 0x55, 0x49, 0x44, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x1b,
	0x12, 0x0a, 0x0a, 0x06, 0x42, 0x41, 0x4e, 0x4e, 0x45, 0x52, 0x10, 0x1c, 0x12, 0x1e, 0x0a, 0x1a,
	0x4d, 0x49, 0x4e, 0x49, 0x5f, 0x47, 0x55, 0x49, 0x44, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x10, 0x1d, 0x12, 0x0f, 0x0a, 0x0b,
	0x4c, 0x47, 0x5f, 0x4c, 0x41, 0x55, 0x4e, 0x43, 0x48, 0x45, 0x52, 0x10, 0x1e, 0x22, 0x5a, 0x0a,
	0x08, 0x41, 0x75, 0x74, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x63, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x50,
	0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x41, 0x75, 0x74, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x22, 0xaf, 0x02, 0x0a, 0x09, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d,
	0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49,
	0x63, 0x6f, 0x6e, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x07, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x4a, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x5a, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb5, 0x03, 0x0a, 0x12,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x31, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x45, 0x0a,
	0x0f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63,
	0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x54, 0x69, 0x6c, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3e, 0x0a, 0x07, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x52, 0x07, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x73, 0x12,
	0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x2c, 0x0a,
	0x12, 0x69, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x19, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x56,
	0x34, 0x10, 0x00, 0x22, 0xf9, 0x04, 0x0a, 0x14, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x56, 0x69, 0x65, 0x77, 0x12, 0x41, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x10, 0x62, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c,
	0x6f, 0x67, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x48, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x65, 0x77, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x6e,
	0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x10,
	0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63,
	0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0f,
	0x6e, 0x61, 0x6d, 0x65, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x48, 0x0a, 0x0c, 0x72, 0x69, 0x62, 0x62, 0x6f, 0x6e, 0x73, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d,
	0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x69, 0x62, 0x62, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x72, 0x69,
	0x62, 0x62, 0x6f, 0x6e, 0x73, 0x56, 0x69, 0x65, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22,
	0x3a, 0x0a, 0x0e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x0c,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x57, 0x69, 0x64, 0x67, 0x65, 0x74, 0x12, 0x46, 0x0a, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x54, 0x65, 0x78, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d,
	0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49,
	0x63, 0x6f, 0x6e, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0x50, 0x0a, 0x05, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x47, 0x0a, 0x05, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x22, 0xef, 0x02, 0x0a, 0x09, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x26, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30,
	0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x39,
	0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x64, 0x75, 0x72,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x43, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52,
	0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04,
	0x49, 0x43, 0x4f, 0x4e, 0x10, 0x04, 0x22, 0xdb, 0x02, 0x0a, 0x03, 0x42, 0x61, 0x72, 0x12, 0x34,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x73,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x14, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x70, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x22, 0x1f, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53,
	0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x59, 0x4e, 0x41, 0x4d,
	0x49, 0x43, 0x10, 0x01, 0x22, 0xc2, 0x05, 0x0a, 0x0c, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x3d, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x33, 0x0a, 0x05, 0x61, 0x64, 0x6f, 0x62, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x6f, 0x62, 0x65, 0x52, 0x05, 0x61,
	0x64, 0x6f, 0x62, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x56, 0x0a, 0x12, 0x6f, 0x74, 0x61, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77,
	0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x54,
	0x41, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10,
	0x6f, 0x74, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0xc6, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f,
	0x52, 0x59, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x44, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x53,
	0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x01, 0x12,
	0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x12,
	0x15, 0x0a, 0x11, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x57, 0x41, 0x54,
	0x43, 0x48, 0x45, 0x44, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x41,
	0x4c, 0x50, 0x48, 0x41, 0x42, 0x45, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x48, 0x41, 0x52, 0x44, 0x5f, 0x44, 0x52, 0x49, 0x56,
	0x45, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x50, 0x41, 0x43, 0x4b,
	0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x56, 0x49, 0x45, 0x57,
	0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x07, 0x22, 0x81, 0x1e, 0x0a, 0x06, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x30, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63,
	0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x49, 0x63, 0x6f, 0x6e, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x68, 0x72, 0x65, 0x66,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x68, 0x72, 0x65, 0x66, 0x12, 0x3d, 0x0a, 0x0b, 0x68, 0x74,
	0x74, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x68,
	0x74, 0x74, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x49, 0x0a, 0x0d, 0x70, 0x6c, 0x61,
	0x79, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61,
	0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6a, 0x73, 0x6f, 0x6e,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x33, 0x0a, 0x05, 0x61, 0x64, 0x6f, 0x62, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x6f, 0x62, 0x65, 0x52, 0x05,
	0x61, 0x64, 0x6f, 0x62, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x70, 0x61, 0x63, 0x6b,
	0x5f, 0x67, 0x75, 0x69, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75,
	0x62, 0x70, 0x61, 0x63, 0x6b, 0x47, 0x75, 0x69, 0x64, 0x73, 0x12, 0x50, 0x0a, 0x10, 0x70, 0x61,
	0x63, 0x6b, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77,
	0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61,
	0x63, 0x6b, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x70, 0x61,
	0x63, 0x6b, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x0a,
	0x68, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x76, 0x69, 0x65, 0x77, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09,
	0x68, 0x72, 0x65, 0x66, 0x49, 0x76, 0x69, 0x65, 0x77, 0x12, 0x3b, 0x0a, 0x0a, 0x69, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x69, 0x76, 0x69,
	0x65, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x70, 0x61, 0x63,
	0x6b, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75,
	0x62, 0x70, 0x61, 0x63, 0x6b, 0x47, 0x75, 0x69, 0x64, 0x12, 0x59, 0x0a, 0x16, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x73, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x14,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f,
	0x0a, 0x0c, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12,
	0x4c, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a,
	0x12, 0x6f, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4f, 0x54, 0x41, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x10, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5f, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77,
	0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x52, 0x13, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x50, 0x0a, 0x14, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77,
	0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0a, 0x74, 0x6f, 0x61, 0x73,
	0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x6f, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x74, 0x6f, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x65, 0x0a, 0x17, 0x70, 0x6c,
	0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x15, 0x70, 0x6c, 0x61, 0x79,
	0x62, 0x61, 0x63, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x12, 0x59, 0x0a, 0x13, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x72, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x72, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x4f, 0x0a, 0x0b,
	0x70, 0x72, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x50, 0x72, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4f, 0x0a,
	0x0f, 0x70, 0x72, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63,
	0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0d, 0x70, 0x72, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x3f,
	0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x75, 0x69, 0x64, 0x12,
	0x3b, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x0d,
	0x69, 0x73, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x69, 0x73, 0x4c, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x60, 0x0a, 0x12,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5d,
	0x0a, 0x0f, 0x50, 0x72, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdd, 0x0c,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f,
	0x49, 0x56, 0x49, 0x45, 0x57, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x52, 0x41, 0x4e, 0x43,
	0x48, 0x49, 0x53, 0x45, 0x5f, 0x49, 0x56, 0x49, 0x45, 0x57, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c,
	0x50, 0x4c, 0x41, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x16,
	0x0a, 0x12, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x47, 0x55, 0x49, 0x44, 0x45, 0x5f,
	0x56, 0x49, 0x45, 0x57, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45,
	0x5f, 0x52, 0x45, 0x53, 0x55, 0x4d, 0x45, 0x53, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x41,
	0x4e, 0x41, 0x47, 0x45, 0x5f, 0x46, 0x41, 0x56, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x53, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x49, 0x45, 0x57,
	0x5f, 0x4d, 0x4f, 0x52, 0x45, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x53, 0x53, 0x45, 0x54,
	0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x56, 0x49, 0x45, 0x57,
	0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x49, 0x53, 0x45, 0x5f,
	0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x56, 0x49, 0x45, 0x57, 0x10,
	0x08, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f,
	0x52, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x55, 0x42, 0x50,
	0x41, 0x43, 0x4b, 0x5f, 0x49, 0x56, 0x49, 0x45, 0x57, 0x10, 0x0a, 0x12, 0x1c, 0x0a, 0x18, 0x55,
	0x4e, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e,
	0x54, 0x5f, 0x49, 0x56, 0x49, 0x45, 0x57, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x4c,
	0x4f, 0x41, 0x44, 0x10, 0x0c, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d,
	0x5f, 0x52, 0x45, 0x43, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10, 0x0d,
	0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52,
	0x45, 0x53, 0x53, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x0e, 0x12, 0x12, 0x0a, 0x0e, 0x4d,
	0x41, 0x4e, 0x41, 0x47, 0x45, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x0f, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x55, 0x50, 0x10, 0x10, 0x12, 0x0c, 0x0a, 0x08,
	0x46, 0x41, 0x56, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x10, 0x11, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e,
	0x46, 0x41, 0x56, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x10, 0x12, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45,
	0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x48, 0x49, 0x53, 0x10, 0x13, 0x12, 0x0e, 0x0a, 0x0a, 0x52,
	0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x14, 0x12, 0x0e, 0x0a, 0x0a, 0x52,
	0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x15, 0x12, 0x18, 0x0a, 0x14, 0x52,
	0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x16, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x57,
	0x49, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x56, 0x49, 0x45, 0x57, 0x10, 0x17, 0x12, 0x14, 0x0a, 0x10,
	0x57, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x49, 0x56, 0x49, 0x45, 0x57,
	0x10, 0x18, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x41, 0x56, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x57,
	0x49, 0x54, 0x48, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x19, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x4e, 0x46, 0x41, 0x56, 0x4f, 0x52, 0x49, 0x54, 0x45,
	0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x1a, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x5f, 0x46,
	0x41, 0x56, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x53,
	0x5f, 0x50, 0x41, 0x47, 0x45, 0x10, 0x1b, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x45, 0x54, 0x5f, 0x53,
	0x43, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x1c, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x45, 0x54, 0x5f, 0x43,
	0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x1d, 0x12, 0x12,
	0x0a, 0x0e, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x34, 0x4b,
	0x10, 0x1e, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x4e,
	0x54, 0x5f, 0x48, 0x44, 0x10, 0x1f, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54,
	0x5f, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x44, 0x10, 0x20, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x4c,
	0x41, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x49, 0x4c, 0x45, 0x52, 0x10, 0x21, 0x12, 0x19, 0x0a, 0x15,
	0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x53,
	0x43, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x22, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x23, 0x12, 0x0f, 0x0a,
	0x0b, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x24, 0x12, 0x0f,
	0x0a, 0x0b, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x41, 0x42, 0x10, 0x25, 0x12,
	0x0a, 0x0a, 0x06, 0x45, 0x58, 0x50, 0x41, 0x4e, 0x44, 0x10, 0x26, 0x12, 0x12, 0x0a, 0x0e, 0x52,
	0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x10, 0x27, 0x12,
	0x14, 0x0a, 0x10, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x55, 0x4e, 0x50, 0x52, 0x4f, 0x54,
	0x45, 0x43, 0x54, 0x10, 0x28, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f,
	0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x29, 0x12, 0x15, 0x0a, 0x11, 0x52,
	0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x2a, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x43,
	0x4f, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x2b, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x2c,
	0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f,
	0x52, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x2d, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x54, 0x41, 0x5f,
	0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x48, 0x49, 0x53, 0x10, 0x2e, 0x12, 0x12, 0x0a,
	0x0e, 0x4f, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x10,
	0x2f, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f,
	0x4e, 0x45, 0x57, 0x10, 0x30, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x54, 0x41, 0x5f, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x31, 0x12,
	0x19, 0x0a, 0x15, 0x4f, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x52,
	0x45, 0x43, 0x4f, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x32, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x54,
	0x41, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x33, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x54, 0x41, 0x5f, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x34, 0x12,
	0x19, 0x0a, 0x15, 0x4f, 0x54, 0x41, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x45,
	0x43, 0x4f, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x35, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x54,
	0x41, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44,
	0x49, 0x4e, 0x47, 0x53, 0x10, 0x36, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x54, 0x41, 0x5f, 0x52, 0x45,
	0x43, 0x4f, 0x52, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x10, 0x37, 0x12, 0x18,
	0x0a, 0x14, 0x4f, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x55, 0x4e, 0x50,
	0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x10, 0x38, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x4c, 0x41, 0x59,
	0x45, 0x52, 0x5f, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x39, 0x12, 0x09, 0x0a, 0x05, 0x4e,
	0x4f, 0x5f, 0x4f, 0x50, 0x10, 0x3a, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x41,
	0x49, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x3b, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4c, 0x41, 0x59, 0x5f,
	0x44, 0x56, 0x52, 0x10, 0x3c, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4c, 0x41, 0x59, 0x42, 0x41, 0x43,
	0x4b, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e,
	0x10, 0x3d, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x41, 0x42, 0x5f, 0x46, 0x4f,
	0x43, 0x55, 0x53, 0x5f, 0x52, 0x49, 0x42, 0x42, 0x4f, 0x4e, 0x10, 0x3e, 0x12, 0x0f, 0x0a, 0x0b,
	0x57, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x10, 0x3f, 0x12, 0x17, 0x0a,
	0x13, 0x4d, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x53, 0x43,
	0x52, 0x45, 0x45, 0x4e, 0x10, 0x40, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45,
	0x4c, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x41, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x45, 0x52, 0x53,
	0x49, 0x53, 0x54, 0x5f, 0x54, 0x41, 0x42, 0x10, 0x42, 0x12, 0x19, 0x0a, 0x15, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x5f, 0x50,
	0x49, 0x4e, 0x10, 0x43, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x55, 0x42, 0x5f, 0x56, 0x49, 0x45, 0x57,
	0x10, 0x44, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x45, 0x54, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x53,
	0x43, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x45, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x45, 0x54, 0x5f, 0x48,
	0x41, 0x4c, 0x46, 0x5f, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x46, 0x12, 0x1d, 0x0a, 0x19,
	0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x53, 0x5f, 0x4d,
	0x49, 0x4e, 0x49, 0x5f, 0x47, 0x55, 0x49, 0x44, 0x45, 0x10, 0x47, 0x12, 0x10, 0x0a, 0x0c, 0x50,
	0x4c, 0x41, 0x59, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x48, 0x12, 0x1e, 0x0a,
	0x1a, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x55, 0x50, 0x5f, 0x4f, 0x52, 0x5f, 0x53, 0x49, 0x47, 0x4e,
	0x5f, 0x49, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x56, 0x10, 0x49, 0x22, 0x4c, 0x0a,
	0x0f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x91, 0x03, 0x0a, 0x0e,
	0x50, 0x61, 0x63, 0x6b, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4c,
	0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e,
	0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x63, 0x6b, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x63, 0x6b, 0x47, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6d, 0x73,
	0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6d, 0x73, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x65, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x27, 0x0a, 0x0f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x50, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x52, 0x41,
	0x4e, 0x47, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x01, 0x22,
	0xce, 0x0b, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x4e, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x75, 0x6e, 0x69, 0x6e,
	0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x73, 0x64, 0x76, 0x72,
	0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x73, 0x64,
	0x76, 0x72, 0x47, 0x75, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x61, 0x70, 0x5f, 0x62, 0x69, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x50, 0x42, 0x69, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x09, 0x61, 0x70,
	0x42, 0x69, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x75, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x65, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x65, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x2a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x6f, 0x6f,
	0x6b, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x65, 0x65, 0x6b, 0x5f, 0x70, 0x61, 0x73, 0x74, 0x5f,
	0x66, 0x75, 0x72, 0x74, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x25, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x6f,
	0x6f, 0x6b, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x65, 0x6b, 0x50, 0x61, 0x73, 0x74, 0x46, 0x75,
	0x72, 0x74, 0x68, 0x65, 0x73, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3e, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0b, 0x69, 0x73, 0x4c, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x46, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x68, 0x69, 0x66,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x69, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x68, 0x69, 0x66, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x4b, 0x0a, 0x13, 0x6c, 0x69, 0x76, 0x65,
	0x5f, 0x70, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x11, 0x6c, 0x69, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x3c, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x5f, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x45, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x72, 0x67, 0x5f, 0x73, 0x76, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x72, 0x67, 0x53, 0x76, 0x63, 0x49,
	0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x4a, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x3f, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x47, 0x75, 0x69, 0x64, 0x12, 0x64, 0x0a, 0x16,
	0x70, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x15, 0x70, 0x6c, 0x61,
	0x79, 0x62, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x66, 0x6f, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a,
	0x08, 0x72, 0x65, 0x63, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x72,
	0x65, 0x63, 0x47, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x67, 0x6f, 0x22, 0x23, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x54, 0x54, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x4f, 0x54, 0x41, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x53, 0x44, 0x56, 0x52, 0x10, 0x02,
	0x22, 0x7e, 0x0a, 0x15, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x75, 0x69, 0x64,
	0x22, 0xba, 0x01, 0x0a, 0x08, 0x41, 0x50, 0x42, 0x69, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2b, 0x0a, 0x11, 0x66, 0x75, 0x72, 0x74, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x66, 0x75, 0x72,
	0x74, 0x68, 0x65, 0x73, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9e, 0x17,
	0x0a, 0x05, 0x41, 0x64, 0x6f, 0x62, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x77, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x77, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x6f, 0x62, 0x65, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x72,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x47, 0x65,
	0x6e, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0b, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x73, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x6f, 0x62, 0x65, 0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x56, 0x0a, 0x10, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x73, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x6f, 0x62, 0x65, 0x2e, 0x42, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x0e, 0x62, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x56, 0x69, 0x65, 0x77, 0x12, 0x4c, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x29, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x6f, 0x62, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x79, 0x5f, 0x64, 0x76, 0x72, 0x5f, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6d, 0x79, 0x44, 0x76,
	0x72, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x75, 0x69, 0x64, 0x12, 0x52, 0x0a, 0x0e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x6f, 0x62,
	0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x69, 0x62, 0x62, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x69, 0x62, 0x62, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x64,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x47, 0x75, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x47, 0x75, 0x69, 0x64,
	0x12, 0x51, 0x0a, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63,
	0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x41, 0x64, 0x6f, 0x62, 0x65, 0x2e, 0x41, 0x64, 0x6f, 0x62, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x74, 0x69, 0x6c, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47, 0x75, 0x69, 0x64, 0x12, 0x3f,
	0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x37, 0x0a, 0x08, 0x68, 0x75, 0x62, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x07, 0x68, 0x75, 0x62, 0x47, 0x75, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x08, 0x68, 0x75, 0x62, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x6f, 0x62, 0x65, 0x2e, 0x48, 0x75, 0x62, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x07, 0x68, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x65, 0x70, 0x4c, 0x69, 0x6e, 0x6b,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x65, 0x65, 0x70, 0x4c, 0x69, 0x6e, 0x6b,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x70, 0x61, 0x63, 0x6b, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x70, 0x61, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72,
	0x69, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x29, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x70, 0x72, 0x69,
	0x63, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x70, 0x61,
	0x63, 0x6b, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x75, 0x62, 0x70, 0x61, 0x63, 0x6b, 0x47, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65,
	0x6e, 0x75, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x65, 0x6e, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x72, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x72, 0x74, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x61, 0x72, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x31, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x36, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x64, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64,
	0x22, 0x7e, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a,
	0x04, 0x53, 0x68, 0x6f, 0x77, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x10, 0x02, 0x12,
	0x0b, 0x0a, 0x07, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09,
	0x46, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x69, 0x73, 0x65, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x10, 0x06, 0x12, 0x11, 0x0a,
	0x0d, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x07,
	0x22, 0x53, 0x0a, 0x0a, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09,
	0x0a, 0x05, 0x41, 0x73, 0x73, 0x65, 0x74, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x10, 0x02, 0x12, 0x15,
	0x0a, 0x11, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x10, 0x03, 0x22, 0x3f, 0x0a, 0x0e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x56, 0x69, 0x65, 0x77, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x69, 0x6c, 0x65, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x72, 0x69, 0x64, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x42,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x56, 0x69, 0x65, 0x77, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x02, 0x22, 0x9c, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x69, 0x76, 0x65, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x4c, 0x6f, 0x6f, 0x6b, 0x42, 0x61, 0x63, 0x6b, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x53,
	0x56, 0x4f, 0x44, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x56, 0x4f, 0x44, 0x10, 0x04, 0x12,
	0x07, 0x0a, 0x03, 0x44, 0x56, 0x52, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x50, 0x56, 0x10,
	0x06, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x70, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x10, 0x07, 0x12,
	0x0b, 0x0a, 0x07, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a,
	0x55, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x64, 0x10, 0x09, 0x12, 0x17, 0x0a, 0x13,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x6c, 0x79, 0x5f, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x64, 0x10, 0x0a, 0x22, 0x90, 0x01, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x61, 0x69, 0x64, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x50, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x72,
	0x65, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x65, 0x61, 0x64,
	0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x72, 0x65, 0x65, 0x5f, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x07, 0x22, 0x2d, 0x0a, 0x10, 0x41, 0x64, 0x6f, 0x62,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x0a, 0x0a, 0x06,
	0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x72, 0x32, 0x30, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x10, 0x01, 0x22, 0x50, 0x0a, 0x07, 0x48, 0x75, 0x62, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x75, 0x62, 0x74, 0x79,
	0x70, 0x65, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x28, 0x10, 0x29, 0x52,
	0x0d, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x22, 0xb5,
	0x08, 0x0a, 0x04, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d,
	0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49,
	0x63, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x32,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x73, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x63, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2e, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x1f, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x10, 0x01, 0x22, 0xb8, 0x06, 0x0a, 0x03,
	0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x41, 0x56, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x5f,
	0x48, 0x45, 0x41, 0x52, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18,
	0x0a, 0x14, 0x46, 0x41, 0x56, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x52, 0x54,
	0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x41, 0x52, 0x45,
	0x4e, 0x54, 0x41, 0x4c, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0f, 0x0a,
	0x0b, 0x44, 0x56, 0x52, 0x5f, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x4f, 0x54, 0x10, 0x03, 0x12, 0x10,
	0x0a, 0x0c, 0x44, 0x56, 0x52, 0x5f, 0x47, 0x52, 0x41, 0x59, 0x5f, 0x44, 0x4f, 0x54, 0x10, 0x04,
	0x12, 0x13, 0x0a, 0x0f, 0x52, 0x4f, 0x54, 0x54, 0x45, 0x4e, 0x5f, 0x54, 0x4f, 0x4d, 0x41, 0x54,
	0x4f, 0x45, 0x53, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c,
	0x5f, 0x46, 0x41, 0x56, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x44, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d,
	0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12,
	0x12, 0x0a, 0x0e, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x56,
	0x5f, 0x59, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54,
	0x56, 0x5f, 0x47, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f,
	0x47, 0x10, 0x0b, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x56,
	0x5f, 0x50, 0x47, 0x10, 0x0c, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f,
	0x54, 0x56, 0x5f, 0x59, 0x37, 0x10, 0x0d, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x41, 0x54, 0x49, 0x4e,
	0x47, 0x5f, 0x50, 0x47, 0x10, 0x0e, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x50, 0x47, 0x5f, 0x31, 0x33, 0x10, 0x0f, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x41, 0x54, 0x49,
	0x4e, 0x47, 0x5f, 0x54, 0x56, 0x5f, 0x31, 0x34, 0x10, 0x10, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x41,
	0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x56, 0x5f, 0x4d, 0x41, 0x10, 0x11, 0x12, 0x0c, 0x0a, 0x08,
	0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x10, 0x12, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x41,
	0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4e, 0x43, 0x5f, 0x31, 0x37, 0x10, 0x13, 0x12, 0x15, 0x0a, 0x11,
	0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45, 0x5f, 0x57, 0x41, 0x54, 0x43, 0x48, 0x49, 0x4e,
	0x47, 0x10, 0x14, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x57, 0x41, 0x54, 0x43,
	0x48, 0x45, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x15, 0x12, 0x12, 0x0a,
	0x0e, 0x50, 0x49, 0x43, 0x4b, 0x45, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x59, 0x4f, 0x55, 0x10,
	0x16, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e,
	0x54, 0x10, 0x17, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4f, 0x50, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x4e,
	0x4f, 0x57, 0x10, 0x18, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x43, 0x45, 0x4e, 0x54, 0x4c, 0x59,
	0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x45, 0x44, 0x10, 0x19, 0x12, 0x07, 0x0a, 0x03, 0x4e,
	0x45, 0x57, 0x10, 0x1a, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e,
	0x44, 0x45, 0x44, 0x5f, 0x57, 0x41, 0x54, 0x43, 0x48, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x1b, 0x12,
	0x14, 0x0a, 0x10, 0x52, 0x45, 0x43, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x1c, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45,
	0x4e, 0x44, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x49, 0x4f, 0x55, 0x53, 0x10, 0x1d, 0x12,
	0x16, 0x0a, 0x12, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x50,
	0x49, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x1e, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x45, 0x41, 0x54, 0x55,
	0x52, 0x45, 0x44, 0x10, 0x1f, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45,
	0x4e, 0x44, 0x45, 0x44, 0x5f, 0x53, 0x49, 0x4d, 0x49, 0x4c, 0x41, 0x52, 0x10, 0x20, 0x12, 0x16,
	0x0a, 0x12, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x52, 0x45,
	0x43, 0x45, 0x4e, 0x54, 0x10, 0x21, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x54, 0x41, 0x10, 0x22, 0x12,
	0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x10, 0x23,
	0x12, 0x11, 0x0a, 0x0d, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x53, 0x43, 0x52, 0x45, 0x45,
	0x4e, 0x10, 0x24, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x4f, 0x50, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x50, 0x49, 0x43, 0x4b, 0x10, 0x25, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x55, 0x4c,
	0x4c, 0x45, 0x54, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x26, 0x12, 0x17, 0x0a, 0x13, 0x4d,
	0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x49, 0x4e,
	0x47, 0x53, 0x10, 0x27, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x52,
	0x45, 0x43, 0x4f, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x28, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45,
	0x50, 0x4c, 0x41, 0x59, 0x10, 0x29, 0x22, 0x87, 0x01, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x16, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x48, 0x55, 0x55, 0x5a, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x10, 0x00,
	0x22, 0x3f, 0x0a, 0x09, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x22, 0x99, 0x01, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x47, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x47, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0x2f, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6c,
	0x0a, 0x12, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x43, 0x0a, 0x07,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x22, 0xf1, 0x01, 0x0a, 0x0f, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08,
	0x72, 0x65, 0x71, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x69,
	0x73, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x69, 0x73, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x95, 0x01, 0x0a, 0x10, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x6e, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x75, 0x6e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x69, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d,
	0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54,
	0x69, 0x6c, 0x65, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x69, 0x6c, 0x65, 0x22, 0x85, 0x01,
	0x0a, 0x05, 0x54, 0x68, 0x75, 0x75, 0x7a, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x32, 0x0a,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x90, 0x07, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x47,
	0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x75, 0x69, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x75, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x47,
	0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4e, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65,
	0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65,
	0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x7a,
	0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x6d, 0x61, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x64, 0x6d, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x73, 0x64, 0x76, 0x72, 0x5f, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c,
	0x73, 0x64, 0x76, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d,
	0x63, 0x6d, 0x77, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x6d, 0x77, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x47,
	0x75, 0x69, 0x64, 0x12, 0x67, 0x0a, 0x11, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x3b, 0x0a, 0x0d, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xec, 0x02, 0x0a, 0x11, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41,
	0x0a, 0x09, 0x72, 0x65, 0x71, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x72, 0x65, 0x71, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x74, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x54,
	0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x76, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x65, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x4c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x75, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x47, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3c, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x73, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x53, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x09, 0x72,
	0x65, 0x71, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x72, 0x65, 0x71, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xfd,
	0x01, 0x0a, 0x0a, 0x42, 0x61, 0x64, 0x67, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x38, 0x0a,
	0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x61,
	0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x64,
	0x67, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x36, 0x0a, 0x09, 0x64, 0x75, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x21, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x44, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x22, 0xf7,
	0x04, 0x0a, 0x05, 0x42, 0x61, 0x64, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x62, 0x61, 0x64, 0x67,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x64, 0x67, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x62, 0x61, 0x64, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x42, 0x61, 0x64, 0x67, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x39, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x64, 0x67, 0x65, 0x2e, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x42, 0x61, 0x64, 0x67, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x22, 0x21, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x10, 0x01, 0x22, 0x95, 0x01, 0x0a,
	0x03, 0x4b, 0x65, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x15,
	0x0a, 0x11, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49,
	0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x4c,
	0x55, 0x45, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x52,
	0x41, 0x4e, 0x47, 0x45, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55,
	0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10,
	0x06, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x44, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x10, 0x07, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x5f, 0x53, 0x50, 0x4f, 0x52,
	0x54, 0x53, 0x10, 0x08, 0x22, 0x72, 0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x0d, 0x0a,
	0x09, 0x44, 0x41, 0x52, 0x4b, 0x5f, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x44, 0x41, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4c,
	0x49, 0x47, 0x48, 0x54, 0x5f, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4c,
	0x49, 0x47, 0x48, 0x54, 0x5f, 0x43, 0x4f, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x42,
	0x4c, 0x41, 0x43, 0x4b, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50,
	0x41, 0x52, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x49, 0x47, 0x48, 0x54,
	0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x06, 0x22, 0x87, 0x01, 0x0a, 0x12, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x67, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x33, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63,
	0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x86, 0x01, 0x0a, 0x11, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x43, 0x0a, 0x09, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x22, 0xdd, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0d, 0x6c, 0x73, 0x64, 0x76, 0x72, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x6c, 0x73,
	0x64, 0x76, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x72, 0x73,
	0x64, 0x76, 0x72, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x52, 0x0c, 0x72, 0x73, 0x64, 0x76, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x22, 0xc4, 0x01, 0x0a, 0x09, 0x44, 0x76, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39,
	0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x73, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x44, 0x76, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x18, 0x0a,
	0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x56, 0x52, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x22, 0xcb, 0x01, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47,
	0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f,
	0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52,
	0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x1a, 0x0a, 0x06, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x00, 0x22, 0x7b, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x73, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x14, 0x0a, 0x06,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x10, 0x00, 0x22, 0xc6, 0x03, 0x0a, 0x07, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x68,
	0x6f, 0x75, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x75, 0x73, 0x65, 0x64, 0x48, 0x6f, 0x75,
	0x72, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x22, 0x1e, 0x0a, 0x06, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x53, 0x44, 0x56, 0x52, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x52, 0x53, 0x44, 0x56, 0x52, 0x10, 0x01, 0x22, 0x6e, 0x0a, 0x14, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x67,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x47, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x68,
	0x6f, 0x75, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x75, 0x73, 0x65, 0x64,
	0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0xf6, 0x02, 0x0a, 0x10,
	0x4c, 0x73, 0x64, 0x76, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x39, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x73, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x73, 0x64, 0x76, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x2a, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x56, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x01, 0x22, 0x71, 0x0a, 0x0f, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x48, 0x0a,
	0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x99, 0x03, 0x0a, 0x10, 0x4f, 0x54, 0x41, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x0b,
	0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0a, 0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x47, 0x75, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x75, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x0e,
	0x66, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x69, 0x73, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0d, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x69, 0x73, 0x65, 0x47, 0x75, 0x69,
	0x64, 0x12, 0x44, 0x0a, 0x0f, 0x6c, 0x73, 0x64, 0x76, 0x72, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x6c, 0x73, 0x64, 0x76, 0x72, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65,
	0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x47,
	0x75, 0x69, 0x64, 0x22, 0x82, 0x06, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x30, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x04, 0x69,
	0x63, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63,
	0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x50, 0x0a, 0x0f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x11, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x54, 0x0a,
	0x14, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x13,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x1a, 0x5a, 0x0a, 0x0c,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd9, 0x03, 0x0a, 0x11, 0x4d, 0x6f, 0x72,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x50,
	0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x50, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x72, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77,
	0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f,
	0x72, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x5a, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x24,
	0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x76,
	0x65, 0x72, 0x6c, 0x61, 0x79, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x72, 0x10, 0x01, 0x22, 0x90, 0x01, 0x0a, 0x09, 0x54, 0x6f, 0x61, 0x73, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0xa5, 0x03, 0x0a, 0x15, 0x50, 0x6c, 0x61, 0x79,
	0x62, 0x61, 0x63, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x0f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77,
	0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x54, 0x0a,
	0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0x5a, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77,
	0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xbb, 0x01, 0x0a, 0x0b, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x48, 0x72, 0x65, 0x66, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x69, 0x73, 0x5f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x69, 0x73, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73,
	0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd1, 0x01,
	0x0a, 0x0f, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x48, 0x72, 0x65, 0x66, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x49, 0x0a, 0x09, 0x68, 0x72, 0x65, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77,
	0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x48, 0x72, 0x65, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x68, 0x72, 0x65, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x0d,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x68, 0x72, 0x65, 0x66, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x48, 0x72, 0x65, 0x66, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x48, 0x72, 0x65, 0x66, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x13, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x53, 0x10,
	0x00, 0x22, 0x8b, 0x02, 0x0a, 0x10, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12,
	0x40, 0x0a, 0x09, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x61, 0x6d,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x08, 0x61, 0x77, 0x61, 0x79, 0x54, 0x65, 0x61,
	0x6d, 0x12, 0x40, 0x0a, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77,
	0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x65,
	0x61, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x54,
	0x65, 0x61, 0x6d, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22,
	0x89, 0x02, 0x0a, 0x0b, 0x54, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x38,
	0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x2f, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x04, 0x73, 0x65, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x77, 0x69, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x77,
	0x69, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x22, 0xd9, 0x01, 0x0a, 0x0a,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x0a, 0x61, 0x77,
	0x61, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x52, 0x09, 0x61, 0x77, 0x61, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x40, 0x0a, 0x0a,
	0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x52, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x72, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x72, 0x65,
	0x66, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x35, 0x0a, 0x09, 0x54, 0x65, 0x61, 0x6d, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x95,
	0x01, 0x0a, 0x0f, 0x4c, 0x67, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x69, 0x62, 0x62,
	0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x6b, 0x69, 0x70, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x75, 0x62, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x75, 0x62, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d,
	0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c,
	0x67, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x54, 0x69, 0x6c, 0x65, 0x52, 0x08, 0x69, 0x74,
	0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x82, 0x02, 0x0a, 0x0d, 0x4c, 0x67, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x54, 0x69, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x64, 0x65, 0x65, 0x70,
	0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x65, 0x70,
	0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x33, 0x0a, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x38, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x34, 0x6b, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x34, 0x6b, 0x2a, 0x4e, 0x0a, 0x10, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x0e, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45,
	0x4c, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x4f, 0x46,
	0x46, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x45, 0x54, 0x41,
	0x49, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x49, 0x45, 0x53, 0x10, 0x02, 0x2a, 0x2c, 0x0a, 0x0b, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c,
	0x4c, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x56, 0x52, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x02, 0x2a, 0x74, 0x0a, 0x08, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x4f, 0x54, 0x54, 0x4f, 0x4d, 0x5f,
	0x4c, 0x45, 0x46, 0x54, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x4f, 0x54, 0x54, 0x4f, 0x4d,
	0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x4f, 0x50, 0x5f,
	0x4c, 0x45, 0x46, 0x54, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x4f, 0x50, 0x5f, 0x52, 0x49,
	0x47, 0x48, 0x54, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x4f, 0x54, 0x54, 0x4f, 0x4d, 0x5f,
	0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4c, 0x49, 0x45,
	0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x32,
	0x9a, 0x0b, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x49, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x73, 0x12, 0x20, 0x2e, 0x73, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x62, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1c, 0x2e,
	0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x62, 0x73, 0x12, 0x4c, 0x0a, 0x09, 0x47,
	0x65, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x1f, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x50, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1e, 0x2e, 0x73, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x4c, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x52, 0x69, 0x62, 0x62, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63,
	0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x50, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1e, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x52, 0x69, 0x62, 0x62, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x54, 0x69,
	0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x67, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x1a, 0x1c, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6c,
	0x65, 0x12, 0x48, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x47, 0x72, 0x69, 0x64, 0x12, 0x1f, 0x2e, 0x73,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1c, 0x2e,
	0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x69, 0x64, 0x12, 0x58, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x75, 0x69, 0x64, 0x65, 0x12, 0x1f,
	0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a,
	0x24, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x47, 0x75, 0x69, 0x64, 0x65, 0x12, 0x58, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x47, 0x75, 0x69, 0x64, 0x65, 0x52, 0x69, 0x62, 0x62, 0x6f, 0x6e, 0x12, 0x1f,
	0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a,
	0x1e, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x69, 0x62, 0x62, 0x6f, 0x6e, 0x12,
	0x54, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x75, 0x69,
	0x64, 0x65, 0x54, 0x69, 0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63,
	0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x50, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1c, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x54, 0x69, 0x6c, 0x65, 0x12, 0x79, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x47, 0x72, 0x61, 0x63,
	0x65, 0x6e, 0x6f, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x2e, 0x2e,
	0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x61, 0x63, 0x65, 0x6e, 0x6f, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x31, 0x2e,
	0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x61, 0x63, 0x65, 0x6e, 0x6f, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x62, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x44, 0x65, 0x65, 0x70, 0x6c,
	0x69, 0x6e, 0x6b, 0x12, 0x25, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x65,
	0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x28, 0x2e, 0x73, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x65, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x44,
	0x65, 0x65, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x29, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x44, 0x65, 0x65, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x1a, 0x2c, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x65,
	0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x72, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x44, 0x65, 0x65, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x29, 0x2e, 0x73,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x65, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x2c, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x44, 0x65, 0x65, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x0d, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52,
	0x65, 0x63, 0x47, 0x75, 0x69, 0x64, 0x12, 0x2c, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63,
	0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x63, 0x47, 0x75, 0x69, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77,
	0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x63, 0x47, 0x75, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x0e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x75, 0x6c,
	0x65, 0x47, 0x75, 0x69, 0x64, 0x12, 0x2d, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d,
	0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x75, 0x69, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77,
	0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x75, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x69, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x2e, 0x73,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x1a, 0x28, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x69,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x32, 0x64, 0x0a, 0x03,
	0x44, 0x72, 0x6d, 0x12, 0x5d, 0x0a, 0x08, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x72, 0x6d, 0x12,
	0x27, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x72,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x44, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0xa5, 0x02, 0x0a, 0x0c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x58, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x12, 0x27, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1f, 0x2e, 0x73, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x00, 0x12, 0x5b, 0x0a,
	0x0a, 0x41, 0x64, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x2e, 0x73, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1f, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0d, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x2e, 0x73, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1f, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x00, 0x32, 0x6c, 0x0a, 0x08, 0x42, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x60, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f,
	0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x27, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d,
	0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x95, 0x04, 0x0a, 0x0a, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x12, 0x66, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x12, 0x29, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x65, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a,
	0x25, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x65, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x2e, 0x73, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x25, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63,
	0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6a, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x12, 0x29, 0x2e, 0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x2c, 0x2e, 0x73, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x53, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x69, 0x62, 0x62, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x2e,
	0x73, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x69, 0x62,
	0x62, 0x6f, 0x6e, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x25, 0x2e, 0x73, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x63, 0x6d, 0x77, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x69, 0x62, 0x62, 0x6f, 0x6e, 0x73,
	0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_proto_presentation_proto_rawDescOnce sync.Once
	file_proto_presentation_proto_rawDescData = file_proto_presentation_proto_rawDesc
)

func file_proto_presentation_proto_rawDescGZIP() []byte {
	file_proto_presentation_proto_rawDescOnce.Do(func() {
		file_proto_presentation_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_presentation_proto_rawDescData)
	})
	return file_proto_presentation_proto_rawDescData
}

var file_proto_presentation_proto_enumTypes = make([]protoimpl.EnumInfo, 42)
var file_proto_presentation_proto_msgTypes = make([]protoimpl.MessageInfo, 124)
var file_proto_presentation_proto_goTypes = []interface{}{
	(DetailScreenType)(0),                // 0: sling.cmw.presentation.DetailScreenType
	(ContextType)(0),                     // 1: sling.cmw.presentation.ContextType
	(Position)(0),                        // 2: sling.cmw.presentation.Position
	(LookupRecGuidRequest_RecType)(0),    // 3: sling.cmw.presentation.LookupRecGuidRequest.RecType
	(LookupRuleGuidRequest_RuleType)(0),  // 4: sling.cmw.presentation.LookupRuleGuidRequest.RuleType
	(DeepLinkListQuery_TileType)(0),      // 5: sling.cmw.presentation.DeepLinkListQuery.TileType
	(DetailContent_DetailContentType)(0), // 6: sling.cmw.presentation.DetailContent.DetailContentType
	(DetailActions_DetailActionsType)(0), // 7: sling.cmw.presentation.DetailActions.DetailActionsType
	(Screen_Format)(0),                   // 8: sling.cmw.presentation.Screen.Format
	(Tab_Format)(0),                      // 9: sling.cmw.presentation.Tab.Format
	(Tab_State)(0),                       // 10: sling.cmw.presentation.Tab.State
	(Ribbon_Format)(0),                   // 11: sling.cmw.presentation.Ribbon.Format
	(RibbonOrLoadable_Type)(0),           // 12: sling.cmw.presentation.RibbonOrLoadable.Type
	(Tile_Format)(0),                     // 13: sling.cmw.presentation.Tile.Format
	(DetailViewResponse_Format)(0),       // 14: sling.cmw.presentation.DetailViewResponse.Format
	(Attribute_Type)(0),                  // 15: sling.cmw.presentation.Attribute.Type
	(Bar_Type)(0),                        // 16: sling.cmw.presentation.Bar.Type
	(ScreenAction_Type)(0),               // 17: sling.cmw.presentation.ScreenAction.Type
	(Action_Type)(0),                     // 18: sling.cmw.presentation.Action.Type
	(PackSwitchData_TargetPackColor)(0),  // 19: sling.cmw.presentation.PackSwitchData.TargetPackColor
	(PlaybackInfo_Type)(0),               // 20: sling.cmw.presentation.PlaybackInfo.Type
	(Adobe_AssetType)(0),                 // 21: sling.cmw.presentation.Adobe.AssetType
	(Adobe_ButtonType)(0),                // 22: sling.cmw.presentation.Adobe.ButtonType
	(Adobe_ButtonTypeView)(0),            // 23: sling.cmw.presentation.Adobe.ButtonTypeView
	(Adobe_ContentType)(0),               // 24: sling.cmw.presentation.Adobe.ContentType
	(Adobe_AccountStatus)(0),             // 25: sling.cmw.presentation.Adobe.AccountStatus
	(Adobe_AdobeFieldFormat)(0),          // 26: sling.cmw.presentation.Adobe.AdobeFieldFormat
	(Adobe_Hubtype)(0),                   // 27: sling.cmw.presentation.Adobe.Hubtype
	(Icon_Type)(0),                       // 28: sling.cmw.presentation.Icon.Type
	(Icon_Key)(0),                        // 29: sling.cmw.presentation.Icon.Key
	(Label_Type)(0),                      // 30: sling.cmw.presentation.Label.Type
	(BadgeLabel_Type)(0),                 // 31: sling.cmw.presentation.BadgeLabel.Type
	(Badge_Type)(0),                      // 32: sling.cmw.presentation.Badge.Type
	(Badge_Key)(0),                       // 33: sling.cmw.presentation.Badge.Key
	(Badge_Color)(0),                     // 34: sling.cmw.presentation.Badge.Color
	(DvrStatus_Format)(0),                // 35: sling.cmw.presentation.DvrStatus.Format
	(SubscriptionInfo_Format)(0),         // 36: sling.cmw.presentation.SubscriptionInfo.Format
	(DeviceInfo_Format)(0),               // 37: sling.cmw.presentation.DeviceInfo.Format
	(Storage_Format)(0),                  // 38: sling.cmw.presentation.Storage.Format
	(LsdvrVolumeState_Format)(0),         // 39: sling.cmw.presentation.LsdvrVolumeState.Format
	(MoreActionsScreen_Position)(0),      // 40: sling.cmw.presentation.MoreActionsScreen.Position
	(SpecialHrefList_Type)(0),            // 41: sling.cmw.presentation.SpecialHrefList.Type
	(*CheckDrmRequest)(nil),              // 42: sling.cmw.presentation.CheckDrmRequest
	(*CheckDrmResponse)(nil),             // 43: sling.cmw.presentation.CheckDrmResponse
	(*LookupRecGuidRequest)(nil),         // 44: sling.cmw.presentation.LookupRecGuidRequest
	(*LookupRecGuidResponse)(nil),        // 45: sling.cmw.presentation.LookupRecGuidResponse
	(*LookupRuleGuidRequest)(nil),        // 46: sling.cmw.presentation.LookupRuleGuidRequest
	(*LookupRuleGuidResponse)(nil),       // 47: sling.cmw.presentation.LookupRuleGuidResponse
	(*PgQuery)(nil),                      // 48: sling.cmw.presentation.PgQuery
	(*GracenoteChannelsQuery)(nil),       // 49: sling.cmw.presentation.GracenoteChannelsQuery
	(*GracenoteChannelsResponse)(nil),    // 50: sling.cmw.presentation.GracenoteChannelsResponse
	(*GracenoteChannel)(nil),             // 51: sling.cmw.presentation.GracenoteChannel
	(*TabQuery)(nil),                     // 52: sling.cmw.presentation.TabQuery
	(*DeepLinkQuery)(nil),                // 53: sling.cmw.presentation.DeepLinkQuery
	(*DeepLinkListQuery)(nil),            // 54: sling.cmw.presentation.DeepLinkListQuery
	(*DeeplinkElementQuery)(nil),         // 55: sling.cmw.presentation.DeeplinkElementQuery
	(*DeepLinkListResponse)(nil),         // 56: sling.cmw.presentation.DeepLinkListResponse
	(*DetailContentQuery)(nil),           // 57: sling.cmw.presentation.DetailContentQuery
	(*DetailContent)(nil),                // 58: sling.cmw.presentation.DetailContent
	(*DetailActionsQuery)(nil),           // 59: sling.cmw.presentation.DetailActionsQuery
	(*ChannelQuery)(nil),                 // 60: sling.cmw.presentation.ChannelQuery
	(*DetailActions)(nil),                // 61: sling.cmw.presentation.DetailActions
	(*DeepLinkResponse)(nil),             // 62: sling.cmw.presentation.DeepLinkResponse
	(*RecentSearch)(nil),                 // 63: sling.cmw.presentation.RecentSearch
	(*RecentSearches)(nil),               // 64: sling.cmw.presentation.RecentSearches
	(*Screen)(nil),                       // 65: sling.cmw.presentation.Screen
	(*AttributeList)(nil),                // 66: sling.cmw.presentation.AttributeList
	(*Tabs)(nil),                         // 67: sling.cmw.presentation.Tabs
	(*Tab)(nil),                          // 68: sling.cmw.presentation.Tab
	(*Banner)(nil),                       // 69: sling.cmw.presentation.Banner
	(*DetailRibbonsQuery)(nil),           // 70: sling.cmw.presentation.DetailRibbonsQuery
	(*Ribbon)(nil),                       // 71: sling.cmw.presentation.Ribbon
	(*PlainChannelList)(nil),             // 72: sling.cmw.presentation.PlainChannelList
	(*PlainChannelTile)(nil),             // 73: sling.cmw.presentation.PlainChannelTile
	(*DetailRibbons)(nil),                // 74: sling.cmw.presentation.DetailRibbons
	(*RibbonOrLoadable)(nil),             // 75: sling.cmw.presentation.RibbonOrLoadable
	(*LoadableRibbon)(nil),               // 76: sling.cmw.presentation.LoadableRibbon
	(*ChannelGuide)(nil),                 // 77: sling.cmw.presentation.ChannelGuide
	(*Channel)(nil),                      // 78: sling.cmw.presentation.Channel
	(*Grid)(nil),                         // 79: sling.cmw.presentation.Grid
	(*GridRow)(nil),                      // 80: sling.cmw.presentation.GridRow
	(*GridGuideAction)(nil),              // 81: sling.cmw.presentation.GridGuideAction
	(*GuideFilter)(nil),                  // 82: sling.cmw.presentation.GuideFilter
	(*Tile)(nil),                         // 83: sling.cmw.presentation.Tile
	(*AutoPlay)(nil),                     // 84: sling.cmw.presentation.AutoPlay
	(*Indicator)(nil),                    // 85: sling.cmw.presentation.Indicator
	(*DetailViewResponse)(nil),           // 86: sling.cmw.presentation.DetailViewResponse
	(*DetailScreenResponse)(nil),         // 87: sling.cmw.presentation.DetailScreenResponse
	(*NamedAttribute)(nil),               // 88: sling.cmw.presentation.NamedAttribute
	(*DetailWidget)(nil),                 // 89: sling.cmw.presentation.DetailWidget
	(*Error)(nil),                        // 90: sling.cmw.presentation.Error
	(*Image)(nil),                        // 91: sling.cmw.presentation.Image
	(*Attribute)(nil),                    // 92: sling.cmw.presentation.Attribute
	(*Bar)(nil),                          // 93: sling.cmw.presentation.Bar
	(*ScreenAction)(nil),                 // 94: sling.cmw.presentation.ScreenAction
	(*Action)(nil),                       // 95: sling.cmw.presentation.Action
	(*ActionTypeValue)(nil),              // 96: sling.cmw.presentation.ActionTypeValue
	(*PackSwitchData)(nil),               // 97: sling.cmw.presentation.PackSwitchData
	(*PlaybackInfo)(nil),                 // 98: sling.cmw.presentation.PlaybackInfo
	(*PlaybackInfoAnalytics)(nil),        // 99: sling.cmw.presentation.PlaybackInfoAnalytics
	(*APBindle)(nil),                     // 100: sling.cmw.presentation.APBindle
	(*Adobe)(nil),                        // 101: sling.cmw.presentation.Adobe
	(*Icon)(nil),                         // 102: sling.cmw.presentation.Icon
	(*Label)(nil),                        // 103: sling.cmw.presentation.Label
	(*Analytics)(nil),                    // 104: sling.cmw.presentation.Analytics
	(*Member)(nil),                       // 105: sling.cmw.presentation.Member
	(*GetMembersQuery)(nil),              // 106: sling.cmw.presentation.GetMembersQuery
	(*ModifyMembersQuery)(nil),           // 107: sling.cmw.presentation.ModifyMembersQuery
	(*Members)(nil),                      // 108: sling.cmw.presentation.Members
	(*BookmarkRequest)(nil),              // 109: sling.cmw.presentation.BookmarkRequest
	(*BookmarkResponse)(nil),             // 110: sling.cmw.presentation.BookmarkResponse
	(*Thuuz)(nil),                        // 111: sling.cmw.presentation.Thuuz
	(*RequestState)(nil),                 // 112: sling.cmw.presentation.RequestState
	(*DetailViewRequest)(nil),            // 113: sling.cmw.presentation.DetailViewRequest
	(*DetailScreenQuery)(nil),            // 114: sling.cmw.presentation.DetailScreenQuery
	(*BadgeLabel)(nil),                   // 115: sling.cmw.presentation.BadgeLabel
	(*Badge)(nil),                        // 116: sling.cmw.presentation.Badge
	(*ChannelLogoDetails)(nil),           // 117: sling.cmw.presentation.ChannelLogoDetails
	(*SourceTypeDetails)(nil),            // 118: sling.cmw.presentation.SourceTypeDetails
	(*EmptyInfo)(nil),                    // 119: sling.cmw.presentation.EmptyInfo
	(*RecordingStatus)(nil),              // 120: sling.cmw.presentation.RecordingStatus
	(*DvrStatus)(nil),                    // 121: sling.cmw.presentation.DvrStatus
	(*SubscriptionInfo)(nil),             // 122: sling.cmw.presentation.SubscriptionInfo
	(*DeviceInfo)(nil),                   // 123: sling.cmw.presentation.DeviceInfo
	(*Storage)(nil),                      // 124: sling.cmw.presentation.Storage
	(*ProfileStorageStatus)(nil),         // 125: sling.cmw.presentation.ProfileStorageStatus
	(*LsdvrVolumeState)(nil),             // 126: sling.cmw.presentation.LsdvrVolumeState
	(*FocusActionHint)(nil),              // 127: sling.cmw.presentation.FocusActionHint
	(*OTARecordingInfo)(nil),             // 128: sling.cmw.presentation.OTARecordingInfo
	(*RecordOptionsScreen)(nil),          // 129: sling.cmw.presentation.RecordOptionsScreen
	(*MoreActionsScreen)(nil),            // 130: sling.cmw.presentation.MoreActionsScreen
	(*ToastInfo)(nil),                    // 131: sling.cmw.presentation.ToastInfo
	(*PlaybackOptionsScreen)(nil),        // 132: sling.cmw.presentation.PlaybackOptionsScreen
	(*SpecialHref)(nil),                  // 133: sling.cmw.presentation.SpecialHref
	(*SpecialHrefList)(nil),              // 134: sling.cmw.presentation.SpecialHrefList
	(*SportsScoresData)(nil),             // 135: sling.cmw.presentation.SportsScoresData
	(*TeamDetails)(nil),                  // 136: sling.cmw.presentation.TeamDetails
	(*GameStatus)(nil),                   // 137: sling.cmw.presentation.GameStatus
	(*TeamScore)(nil),                    // 138: sling.cmw.presentation.TeamScore
	(*LgPreviewRibbon)(nil),              // 139: sling.cmw.presentation.LgPreviewRibbon
	(*LgPreviewTile)(nil),                // 140: sling.cmw.presentation.LgPreviewTile
	nil,                                  // 141: sling.cmw.presentation.PgQuery.QueryParamsEntry
	nil,                                  // 142: sling.cmw.presentation.TabQuery.QueryParamsEntry
	nil,                                  // 143: sling.cmw.presentation.DeepLinkListResponse.DeeplinksEntry
	nil,                                  // 144: sling.cmw.presentation.DetailActions.ActionsEntry
	nil,                                  // 145: sling.cmw.presentation.DeepLinkResponse.ActionsEntry
	nil,                                  // 146: sling.cmw.presentation.RecentSearch.ActionsEntry
	nil,                                  // 147: sling.cmw.presentation.Screen.ActionsEntry
	nil,                                  // 148: sling.cmw.presentation.Screen.QueryParamsEntry
	nil,                                  // 149: sling.cmw.presentation.Tab.ActionsEntry
	nil,                                  // 150: sling.cmw.presentation.Banner.ActionsEntry
	nil,                                  // 151: sling.cmw.presentation.Ribbon.QueryParamsEntry
	nil,                                  // 152: sling.cmw.presentation.ChannelGuide.ActionsEntry
	nil,                                  // 153: sling.cmw.presentation.Grid.SchedulesEntry
	nil,                                  // 154: sling.cmw.presentation.Grid.QueryParamsEntry
	nil,                                  // 155: sling.cmw.presentation.Tile.ActionsEntry
	nil,                                  // 156: sling.cmw.presentation.Tile.FocusActionsEntry
	nil,                                  // 157: sling.cmw.presentation.Tile.QueryParamsEntry
	nil,                                  // 158: sling.cmw.presentation.Indicator.ActionsEntry
	nil,                                  // 159: sling.cmw.presentation.Action.RecordActionsEntry
	nil,                                  // 160: sling.cmw.presentation.Action.PreActionsEntry
	nil,                                  // 161: sling.cmw.presentation.RequestState.FeaturesEntry
	nil,                                  // 162: sling.cmw.presentation.RequestState.ExperimentGroupsEntry
	nil,                                  // 163: sling.cmw.presentation.RecordOptionsScreen.ActionsEntry
	nil,                                  // 164: sling.cmw.presentation.MoreActionsScreen.ActionsEntry
	nil,                                  // 165: sling.cmw.presentation.PlaybackOptionsScreen.ActionsEntry
	(*timestamppb.Timestamp)(nil),        // 166: google.protobuf.Timestamp
	(*wrapperspb.StringValue)(nil),       // 167: google.protobuf.StringValue
	(*wrapperspb.Int32Value)(nil),        // 168: google.protobuf.Int32Value
	(*wrapperspb.BoolValue)(nil),         // 169: google.protobuf.BoolValue
	(*durationpb.Duration)(nil),          // 170: google.protobuf.Duration
	(*wrapperspb.FloatValue)(nil),        // 171: google.protobuf.FloatValue
	(*wrapperspb.Int64Value)(nil),        // 172: google.protobuf.Int64Value
}
var file_proto_presentation_proto_depIdxs = []int32{
	3,   // 0: sling.cmw.presentation.LookupRecGuidRequest.rec_type:type_name -> sling.cmw.presentation.LookupRecGuidRequest.RecType
	4,   // 1: sling.cmw.presentation.LookupRuleGuidRequest.rule_type:type_name -> sling.cmw.presentation.LookupRuleGuidRequest.RuleType
	112, // 2: sling.cmw.presentation.PgQuery.req_state:type_name -> sling.cmw.presentation.RequestState
	166, // 3: sling.cmw.presentation.PgQuery.time:type_name -> google.protobuf.Timestamp
	141, // 4: sling.cmw.presentation.PgQuery.query_params:type_name -> sling.cmw.presentation.PgQuery.QueryParamsEntry
	112, // 5: sling.cmw.presentation.GracenoteChannelsQuery.req_state:type_name -> sling.cmw.presentation.RequestState
	51,  // 6: sling.cmw.presentation.GracenoteChannelsResponse.gracenote_channels:type_name -> sling.cmw.presentation.GracenoteChannel
	112, // 7: sling.cmw.presentation.TabQuery.req_state:type_name -> sling.cmw.presentation.RequestState
	142, // 8: sling.cmw.presentation.TabQuery.query_params:type_name -> sling.cmw.presentation.TabQuery.QueryParamsEntry
	112, // 9: sling.cmw.presentation.DeepLinkQuery.req_state:type_name -> sling.cmw.presentation.RequestState
	167, // 10: sling.cmw.presentation.DeepLinkQuery.watch_party_host_key:type_name -> google.protobuf.StringValue
	112, // 11: sling.cmw.presentation.DeepLinkListQuery.req_state:type_name -> sling.cmw.presentation.RequestState
	55,  // 12: sling.cmw.presentation.DeepLinkListQuery.queries:type_name -> sling.cmw.presentation.DeeplinkElementQuery
	5,   // 13: sling.cmw.presentation.DeepLinkListQuery.tile_type:type_name -> sling.cmw.presentation.DeepLinkListQuery.TileType
	143, // 14: sling.cmw.presentation.DeepLinkListResponse.deeplinks:type_name -> sling.cmw.presentation.DeepLinkListResponse.DeeplinksEntry
	112, // 15: sling.cmw.presentation.DetailContentQuery.req_state:type_name -> sling.cmw.presentation.RequestState
	0,   // 16: sling.cmw.presentation.DetailContentQuery.type:type_name -> sling.cmw.presentation.DetailScreenType
	6,   // 17: sling.cmw.presentation.DetailContent.type:type_name -> sling.cmw.presentation.DetailContent.DetailContentType
	83,  // 18: sling.cmw.presentation.DetailContent.active_tile:type_name -> sling.cmw.presentation.Tile
	71,  // 19: sling.cmw.presentation.DetailContent.ribbon:type_name -> sling.cmw.presentation.Ribbon
	166, // 20: sling.cmw.presentation.DetailContent.expires_at:type_name -> google.protobuf.Timestamp
	112, // 21: sling.cmw.presentation.DetailActionsQuery.req_state:type_name -> sling.cmw.presentation.RequestState
	0,   // 22: sling.cmw.presentation.DetailActionsQuery.type:type_name -> sling.cmw.presentation.DetailScreenType
	112, // 23: sling.cmw.presentation.ChannelQuery.req_state:type_name -> sling.cmw.presentation.RequestState
	7,   // 24: sling.cmw.presentation.DetailActions.type:type_name -> sling.cmw.presentation.DetailActions.DetailActionsType
	144, // 25: sling.cmw.presentation.DetailActions.actions:type_name -> sling.cmw.presentation.DetailActions.ActionsEntry
	18,  // 26: sling.cmw.presentation.DetailActions.action_sequence:type_name -> sling.cmw.presentation.Action.Type
	145, // 27: sling.cmw.presentation.DeepLinkResponse.actions:type_name -> sling.cmw.presentation.DeepLinkResponse.ActionsEntry
	96,  // 28: sling.cmw.presentation.DeepLinkResponse.primary_action:type_name -> sling.cmw.presentation.ActionTypeValue
	91,  // 29: sling.cmw.presentation.DeepLinkResponse.image:type_name -> sling.cmw.presentation.Image
	90,  // 30: sling.cmw.presentation.DeepLinkResponse.errors:type_name -> sling.cmw.presentation.Error
	96,  // 31: sling.cmw.presentation.DeepLinkResponse.secondary_action:type_name -> sling.cmw.presentation.ActionTypeValue
	146, // 32: sling.cmw.presentation.RecentSearch.actions:type_name -> sling.cmw.presentation.RecentSearch.ActionsEntry
	96,  // 33: sling.cmw.presentation.RecentSearch.primary_action:type_name -> sling.cmw.presentation.ActionTypeValue
	63,  // 34: sling.cmw.presentation.RecentSearches.searches:type_name -> sling.cmw.presentation.RecentSearch
	71,  // 35: sling.cmw.presentation.Screen.ribbons:type_name -> sling.cmw.presentation.Ribbon
	8,   // 36: sling.cmw.presentation.Screen.format:type_name -> sling.cmw.presentation.Screen.Format
	90,  // 37: sling.cmw.presentation.Screen.errors:type_name -> sling.cmw.presentation.Error
	147, // 38: sling.cmw.presentation.Screen.actions:type_name -> sling.cmw.presentation.Screen.ActionsEntry
	64,  // 39: sling.cmw.presentation.Screen.recent_searches:type_name -> sling.cmw.presentation.RecentSearches
	69,  // 40: sling.cmw.presentation.Screen.banner:type_name -> sling.cmw.presentation.Banner
	78,  // 41: sling.cmw.presentation.Screen.channels:type_name -> sling.cmw.presentation.Channel
	79,  // 42: sling.cmw.presentation.Screen.grid:type_name -> sling.cmw.presentation.Grid
	81,  // 43: sling.cmw.presentation.Screen.grid_sort_actions:type_name -> sling.cmw.presentation.GridGuideAction
	81,  // 44: sling.cmw.presentation.Screen.grid_filter_actions:type_name -> sling.cmw.presentation.GridGuideAction
	168, // 45: sling.cmw.presentation.Screen.next_page:type_name -> google.protobuf.Int32Value
	168, // 46: sling.cmw.presentation.Screen.prev_page:type_name -> google.protobuf.Int32Value
	77,  // 47: sling.cmw.presentation.Screen.channel_guide:type_name -> sling.cmw.presentation.ChannelGuide
	81,  // 48: sling.cmw.presentation.Screen.channel_guide_sort_actions:type_name -> sling.cmw.presentation.GridGuideAction
	81,  // 49: sling.cmw.presentation.Screen.channel_guide_filter_actions:type_name -> sling.cmw.presentation.GridGuideAction
	91,  // 50: sling.cmw.presentation.Screen.background_image:type_name -> sling.cmw.presentation.Image
	120, // 51: sling.cmw.presentation.Screen.rec_status:type_name -> sling.cmw.presentation.RecordingStatus
	121, // 52: sling.cmw.presentation.Screen.dvr_status:type_name -> sling.cmw.presentation.DvrStatus
	122, // 53: sling.cmw.presentation.Screen.subscription_info:type_name -> sling.cmw.presentation.SubscriptionInfo
	123, // 54: sling.cmw.presentation.Screen.device_info:type_name -> sling.cmw.presentation.DeviceInfo
	126, // 55: sling.cmw.presentation.Screen.dvr_state_info:type_name -> sling.cmw.presentation.LsdvrVolumeState
	167, // 56: sling.cmw.presentation.Screen.heading:type_name -> google.protobuf.StringValue
	66,  // 57: sling.cmw.presentation.Screen.stacked_attribute_list:type_name -> sling.cmw.presentation.AttributeList
	81,  // 58: sling.cmw.presentation.Screen.r20_guide_actions:type_name -> sling.cmw.presentation.GridGuideAction
	82,  // 59: sling.cmw.presentation.Screen.guide_filters:type_name -> sling.cmw.presentation.GuideFilter
	148, // 60: sling.cmw.presentation.Screen.query_params:type_name -> sling.cmw.presentation.Screen.QueryParamsEntry
	166, // 61: sling.cmw.presentation.Screen.expires_at:type_name -> google.protobuf.Timestamp
	168, // 62: sling.cmw.presentation.Screen.horizontal_next_page:type_name -> google.protobuf.Int32Value
	168, // 63: sling.cmw.presentation.Screen.horizontal_prev_page:type_name -> google.protobuf.Int32Value
	168, // 64: sling.cmw.presentation.Screen.vertical_next_page:type_name -> google.protobuf.Int32Value
	168, // 65: sling.cmw.presentation.Screen.vertical_prev_page:type_name -> google.protobuf.Int32Value
	166, // 66: sling.cmw.presentation.Screen.start_time:type_name -> google.protobuf.Timestamp
	166, // 67: sling.cmw.presentation.Screen.end_time:type_name -> google.protobuf.Timestamp
	71,  // 68: sling.cmw.presentation.Screen.special_ribbons:type_name -> sling.cmw.presentation.Ribbon
	134, // 69: sling.cmw.presentation.Screen.special_hrefs:type_name -> sling.cmw.presentation.SpecialHrefList
	101, // 70: sling.cmw.presentation.Screen.adobe:type_name -> sling.cmw.presentation.Adobe
	92,  // 71: sling.cmw.presentation.AttributeList.attribute_list:type_name -> sling.cmw.presentation.Attribute
	68,  // 72: sling.cmw.presentation.Tabs.user_tabs:type_name -> sling.cmw.presentation.Tab
	96,  // 73: sling.cmw.presentation.Tab.primary_action:type_name -> sling.cmw.presentation.ActionTypeValue
	149, // 74: sling.cmw.presentation.Tab.actions:type_name -> sling.cmw.presentation.Tab.ActionsEntry
	9,   // 75: sling.cmw.presentation.Tab.format:type_name -> sling.cmw.presentation.Tab.Format
	10,  // 76: sling.cmw.presentation.Tab.state:type_name -> sling.cmw.presentation.Tab.State
	96,  // 77: sling.cmw.presentation.Tab.focus_action:type_name -> sling.cmw.presentation.ActionTypeValue
	96,  // 78: sling.cmw.presentation.Tab.persist_action:type_name -> sling.cmw.presentation.ActionTypeValue
	150, // 79: sling.cmw.presentation.Banner.actions:type_name -> sling.cmw.presentation.Banner.ActionsEntry
	18,  // 80: sling.cmw.presentation.Banner.action_sequence:type_name -> sling.cmw.presentation.Action.Type
	91,  // 81: sling.cmw.presentation.Banner.image:type_name -> sling.cmw.presentation.Image
	112, // 82: sling.cmw.presentation.DetailRibbonsQuery.req_state:type_name -> sling.cmw.presentation.RequestState
	0,   // 83: sling.cmw.presentation.DetailRibbonsQuery.type:type_name -> sling.cmw.presentation.DetailScreenType
	83,  // 84: sling.cmw.presentation.Ribbon.tiles:type_name -> sling.cmw.presentation.Tile
	166, // 85: sling.cmw.presentation.Ribbon.expires_at:type_name -> google.protobuf.Timestamp
	168, // 86: sling.cmw.presentation.Ribbon.next_page:type_name -> google.protobuf.Int32Value
	168, // 87: sling.cmw.presentation.Ribbon.prev_page:type_name -> google.protobuf.Int32Value
	11,  // 88: sling.cmw.presentation.Ribbon.format:type_name -> sling.cmw.presentation.Ribbon.Format
	90,  // 89: sling.cmw.presentation.Ribbon.errors:type_name -> sling.cmw.presentation.Error
	103, // 90: sling.cmw.presentation.Ribbon.label:type_name -> sling.cmw.presentation.Label
	95,  // 91: sling.cmw.presentation.Ribbon.seasons:type_name -> sling.cmw.presentation.Action
	119, // 92: sling.cmw.presentation.Ribbon.empty_info:type_name -> sling.cmw.presentation.EmptyInfo
	151, // 93: sling.cmw.presentation.Ribbon.query_params:type_name -> sling.cmw.presentation.Ribbon.QueryParamsEntry
	167, // 94: sling.cmw.presentation.Ribbon.stitch_id:type_name -> google.protobuf.StringValue
	73,  // 95: sling.cmw.presentation.PlainChannelList.tiles:type_name -> sling.cmw.presentation.PlainChannelTile
	75,  // 96: sling.cmw.presentation.DetailRibbons.ribbons:type_name -> sling.cmw.presentation.RibbonOrLoadable
	12,  // 97: sling.cmw.presentation.RibbonOrLoadable.type:type_name -> sling.cmw.presentation.RibbonOrLoadable.Type
	71,  // 98: sling.cmw.presentation.RibbonOrLoadable.ribbon:type_name -> sling.cmw.presentation.Ribbon
	76,  // 99: sling.cmw.presentation.RibbonOrLoadable.loadable_ribbon:type_name -> sling.cmw.presentation.LoadableRibbon
	91,  // 100: sling.cmw.presentation.ChannelGuide.image:type_name -> sling.cmw.presentation.Image
	71,  // 101: sling.cmw.presentation.ChannelGuide.ribbons:type_name -> sling.cmw.presentation.Ribbon
	152, // 102: sling.cmw.presentation.ChannelGuide.actions:type_name -> sling.cmw.presentation.ChannelGuide.ActionsEntry
	167, // 103: sling.cmw.presentation.ChannelGuide.primary_action:type_name -> google.protobuf.StringValue
	167, // 104: sling.cmw.presentation.ChannelGuide.secondary_action:type_name -> google.protobuf.StringValue
	102, // 105: sling.cmw.presentation.ChannelGuide.favorited_icon:type_name -> sling.cmw.presentation.Icon
	91,  // 106: sling.cmw.presentation.Channel.image:type_name -> sling.cmw.presentation.Image
	153, // 107: sling.cmw.presentation.Grid.schedules:type_name -> sling.cmw.presentation.Grid.SchedulesEntry
	93,  // 108: sling.cmw.presentation.Grid.bar:type_name -> sling.cmw.presentation.Bar
	166, // 109: sling.cmw.presentation.Grid.prev_time:type_name -> google.protobuf.Timestamp
	166, // 110: sling.cmw.presentation.Grid.next_time:type_name -> google.protobuf.Timestamp
	166, // 111: sling.cmw.presentation.Grid.expires_at:type_name -> google.protobuf.Timestamp
	166, // 112: sling.cmw.presentation.Grid.start_time:type_name -> google.protobuf.Timestamp
	166, // 113: sling.cmw.presentation.Grid.end_time:type_name -> google.protobuf.Timestamp
	154, // 114: sling.cmw.presentation.Grid.query_params:type_name -> sling.cmw.presentation.Grid.QueryParamsEntry
	83,  // 115: sling.cmw.presentation.GridRow.channel:type_name -> sling.cmw.presentation.Tile
	83,  // 116: sling.cmw.presentation.GridRow.schedule:type_name -> sling.cmw.presentation.Tile
	101, // 117: sling.cmw.presentation.GridGuideAction.adobe:type_name -> sling.cmw.presentation.Adobe
	167, // 118: sling.cmw.presentation.GridGuideAction.screen_id:type_name -> google.protobuf.StringValue
	81,  // 119: sling.cmw.presentation.GuideFilter.get_grid:type_name -> sling.cmw.presentation.GridGuideAction
	81,  // 120: sling.cmw.presentation.GuideFilter.persist_filter:type_name -> sling.cmw.presentation.GridGuideAction
	13,  // 121: sling.cmw.presentation.Tile.format:type_name -> sling.cmw.presentation.Tile.Format
	91,  // 122: sling.cmw.presentation.Tile.image:type_name -> sling.cmw.presentation.Image
	92,  // 123: sling.cmw.presentation.Tile.attributes:type_name -> sling.cmw.presentation.Attribute
	92,  // 124: sling.cmw.presentation.Tile.upcoming_content:type_name -> sling.cmw.presentation.Attribute
	167, // 125: sling.cmw.presentation.Tile.description:type_name -> google.protobuf.StringValue
	93,  // 126: sling.cmw.presentation.Tile.bar:type_name -> sling.cmw.presentation.Bar
	155, // 127: sling.cmw.presentation.Tile.actions:type_name -> sling.cmw.presentation.Tile.ActionsEntry
	96,  // 128: sling.cmw.presentation.Tile.primary_action:type_name -> sling.cmw.presentation.ActionTypeValue
	96,  // 129: sling.cmw.presentation.Tile.secondary_action:type_name -> sling.cmw.presentation.ActionTypeValue
	102, // 130: sling.cmw.presentation.Tile.parental_icon:type_name -> sling.cmw.presentation.Icon
	102, // 131: sling.cmw.presentation.Tile.favorited_icon:type_name -> sling.cmw.presentation.Icon
	102, // 132: sling.cmw.presentation.Tile.recording_icon:type_name -> sling.cmw.presentation.Icon
	104, // 133: sling.cmw.presentation.Tile.analytics:type_name -> sling.cmw.presentation.Analytics
	90,  // 134: sling.cmw.presentation.Tile.errors:type_name -> sling.cmw.presentation.Error
	91,  // 135: sling.cmw.presentation.Tile.background_image:type_name -> sling.cmw.presentation.Image
	169, // 136: sling.cmw.presentation.Tile.on_now:type_name -> google.protobuf.BoolValue
	169, // 137: sling.cmw.presentation.Tile.is_in_future:type_name -> google.protobuf.BoolValue
	169, // 138: sling.cmw.presentation.Tile.purchase_required:type_name -> google.protobuf.BoolValue
	169, // 139: sling.cmw.presentation.Tile.is_new:type_name -> google.protobuf.BoolValue
	91,  // 140: sling.cmw.presentation.Tile.secondary_image:type_name -> sling.cmw.presentation.Image
	169, // 141: sling.cmw.presentation.Tile.is_onboarding:type_name -> google.protobuf.BoolValue
	170, // 142: sling.cmw.presentation.Tile.grid_duration:type_name -> google.protobuf.Duration
	111, // 143: sling.cmw.presentation.Tile.thuuz:type_name -> sling.cmw.presentation.Thuuz
	166, // 144: sling.cmw.presentation.Tile.start_time:type_name -> google.protobuf.Timestamp
	91,  // 145: sling.cmw.presentation.Tile.channel_logo:type_name -> sling.cmw.presentation.Image
	116, // 146: sling.cmw.presentation.Tile.badges:type_name -> sling.cmw.presentation.Badge
	117, // 147: sling.cmw.presentation.Tile.channel_logo_details:type_name -> sling.cmw.presentation.ChannelLogoDetails
	167, // 148: sling.cmw.presentation.Tile.overlay_title:type_name -> google.protobuf.StringValue
	96,  // 149: sling.cmw.presentation.Tile.focus_action_sequence:type_name -> sling.cmw.presentation.ActionTypeValue
	156, // 150: sling.cmw.presentation.Tile.focus_actions:type_name -> sling.cmw.presentation.Tile.FocusActionsEntry
	102, // 151: sling.cmw.presentation.Tile.focus_play_icon:type_name -> sling.cmw.presentation.Icon
	92,  // 152: sling.cmw.presentation.Tile.focus_attributes:type_name -> sling.cmw.presentation.Attribute
	91,  // 153: sling.cmw.presentation.Tile.focus_image:type_name -> sling.cmw.presentation.Image
	167, // 154: sling.cmw.presentation.Tile.focus_overlay_title:type_name -> google.protobuf.StringValue
	167, // 155: sling.cmw.presentation.Tile.bg_color:type_name -> google.protobuf.StringValue
	96,  // 156: sling.cmw.presentation.Tile.focus_action:type_name -> sling.cmw.presentation.ActionTypeValue
	117, // 157: sling.cmw.presentation.Tile.focus_channel_logo_details:type_name -> sling.cmw.presentation.ChannelLogoDetails
	92,  // 158: sling.cmw.presentation.Tile.focus_overlay_attributes:type_name -> sling.cmw.presentation.Attribute
	127, // 159: sling.cmw.presentation.Tile.focus_action_hint:type_name -> sling.cmw.presentation.FocusActionHint
	92,  // 160: sling.cmw.presentation.Tile.focus_row_attributes:type_name -> sling.cmw.presentation.Attribute
	167, // 161: sling.cmw.presentation.Tile.focus_row_backround_color:type_name -> google.protobuf.StringValue
	167, // 162: sling.cmw.presentation.Tile.focus_row_description:type_name -> google.protobuf.StringValue
	92,  // 163: sling.cmw.presentation.Tile.focus_row_duration_attributes:type_name -> sling.cmw.presentation.Attribute
	166, // 164: sling.cmw.presentation.Tile.stop_time:type_name -> google.protobuf.Timestamp
	167, // 165: sling.cmw.presentation.Tile.stitch_id:type_name -> google.protobuf.StringValue
	169, // 166: sling.cmw.presentation.Tile.should_focus:type_name -> google.protobuf.BoolValue
	116, // 167: sling.cmw.presentation.Tile.future_badges:type_name -> sling.cmw.presentation.Badge
	92,  // 168: sling.cmw.presentation.Tile.future_focus_row_duration_attributes:type_name -> sling.cmw.presentation.Attribute
	127, // 169: sling.cmw.presentation.Tile.future_focus_action_hint:type_name -> sling.cmw.presentation.FocusActionHint
	96,  // 170: sling.cmw.presentation.Tile.future_primary_action:type_name -> sling.cmw.presentation.ActionTypeValue
	96,  // 171: sling.cmw.presentation.Tile.future_secondary_action:type_name -> sling.cmw.presentation.ActionTypeValue
	116, // 172: sling.cmw.presentation.Tile.on_now_badges:type_name -> sling.cmw.presentation.Badge
	92,  // 173: sling.cmw.presentation.Tile.on_now_focus_row_duration_attributes:type_name -> sling.cmw.presentation.Attribute
	127, // 174: sling.cmw.presentation.Tile.on_now_focus_action_hint:type_name -> sling.cmw.presentation.FocusActionHint
	96,  // 175: sling.cmw.presentation.Tile.on_now_primary_action:type_name -> sling.cmw.presentation.ActionTypeValue
	96,  // 176: sling.cmw.presentation.Tile.on_now_secondary_action:type_name -> sling.cmw.presentation.ActionTypeValue
	116, // 177: sling.cmw.presentation.Tile.past_badges:type_name -> sling.cmw.presentation.Badge
	92,  // 178: sling.cmw.presentation.Tile.past_focus_row_duration_attributes:type_name -> sling.cmw.presentation.Attribute
	127, // 179: sling.cmw.presentation.Tile.past_focus_action_hint:type_name -> sling.cmw.presentation.FocusActionHint
	96,  // 180: sling.cmw.presentation.Tile.past_primary_action:type_name -> sling.cmw.presentation.ActionTypeValue
	96,  // 181: sling.cmw.presentation.Tile.past_secondary_action:type_name -> sling.cmw.presentation.ActionTypeValue
	157, // 182: sling.cmw.presentation.Tile.query_params:type_name -> sling.cmw.presentation.Tile.QueryParamsEntry
	118, // 183: sling.cmw.presentation.Tile.source_type_details:type_name -> sling.cmw.presentation.SourceTypeDetails
	92,  // 184: sling.cmw.presentation.Tile.overlay_attributes:type_name -> sling.cmw.presentation.Attribute
	92,  // 185: sling.cmw.presentation.Tile.explanation_attributes:type_name -> sling.cmw.presentation.Attribute
	96,  // 186: sling.cmw.presentation.Tile.overlay_action_sequence:type_name -> sling.cmw.presentation.ActionTypeValue
	96,  // 187: sling.cmw.presentation.Tile.action_sequence:type_name -> sling.cmw.presentation.ActionTypeValue
	96,  // 188: sling.cmw.presentation.Tile.focus_overlay_action_sequence:type_name -> sling.cmw.presentation.ActionTypeValue
	167, // 189: sling.cmw.presentation.Tile.overlay_centre_title:type_name -> google.protobuf.StringValue
	92,  // 190: sling.cmw.presentation.Tile.overlay_explanation_attributes:type_name -> sling.cmw.presentation.Attribute
	102, // 191: sling.cmw.presentation.Tile.overlay_play_icon:type_name -> sling.cmw.presentation.Icon
	96,  // 192: sling.cmw.presentation.Tile.future_focus_overlay_action_sequence:type_name -> sling.cmw.presentation.ActionTypeValue
	96,  // 193: sling.cmw.presentation.Tile.on_now_focus_overlay_action_sequence:type_name -> sling.cmw.presentation.ActionTypeValue
	96,  // 194: sling.cmw.presentation.Tile.past_focus_overlay_action_sequence:type_name -> sling.cmw.presentation.ActionTypeValue
	92,  // 195: sling.cmw.presentation.Tile.future_focus_duration_attributes:type_name -> sling.cmw.presentation.Attribute
	92,  // 196: sling.cmw.presentation.Tile.on_now_focus_duration_attributes:type_name -> sling.cmw.presentation.Attribute
	92,  // 197: sling.cmw.presentation.Tile.past_focus_duration_attributes:type_name -> sling.cmw.presentation.Attribute
	85,  // 198: sling.cmw.presentation.Tile.focus_indicators:type_name -> sling.cmw.presentation.Indicator
	85,  // 199: sling.cmw.presentation.Tile.overlay_indicators:type_name -> sling.cmw.presentation.Indicator
	96,  // 200: sling.cmw.presentation.Tile.more_actions:type_name -> sling.cmw.presentation.ActionTypeValue
	92,  // 201: sling.cmw.presentation.Tile.future_duration_attributes:type_name -> sling.cmw.presentation.Attribute
	92,  // 202: sling.cmw.presentation.Tile.on_now_duration_attributes:type_name -> sling.cmw.presentation.Attribute
	92,  // 203: sling.cmw.presentation.Tile.past_duration_attributes:type_name -> sling.cmw.presentation.Attribute
	96,  // 204: sling.cmw.presentation.Tile.post_payment_action:type_name -> sling.cmw.presentation.ActionTypeValue
	167, // 205: sling.cmw.presentation.Tile.asset_guid:type_name -> google.protobuf.StringValue
	167, // 206: sling.cmw.presentation.Tile.franchise_guid:type_name -> google.protobuf.StringValue
	171, // 207: sling.cmw.presentation.Tile.watch_percent:type_name -> google.protobuf.FloatValue
	167, // 208: sling.cmw.presentation.Tile.deeplink:type_name -> google.protobuf.StringValue
	170, // 209: sling.cmw.presentation.Tile.duration:type_name -> google.protobuf.Duration
	167, // 210: sling.cmw.presentation.Tile.is_playable:type_name -> google.protobuf.StringValue
	167, // 211: sling.cmw.presentation.Tile.action_data:type_name -> google.protobuf.StringValue
	167, // 212: sling.cmw.presentation.Tile.image_url:type_name -> google.protobuf.StringValue
	166, // 213: sling.cmw.presentation.Tile.ttl:type_name -> google.protobuf.Timestamp
	167, // 214: sling.cmw.presentation.Tile.marquee_title:type_name -> google.protobuf.StringValue
	167, // 215: sling.cmw.presentation.Tile.marquee_description:type_name -> google.protobuf.StringValue
	92,  // 216: sling.cmw.presentation.Tile.marquee_attributes:type_name -> sling.cmw.presentation.Attribute
	91,  // 217: sling.cmw.presentation.Tile.marquee_image:type_name -> sling.cmw.presentation.Image
	168, // 218: sling.cmw.presentation.Tile.episode_number:type_name -> google.protobuf.Int32Value
	168, // 219: sling.cmw.presentation.Tile.season_number:type_name -> google.protobuf.Int32Value
	166, // 220: sling.cmw.presentation.Tile.resume_updated_at:type_name -> google.protobuf.Timestamp
	167, // 221: sling.cmw.presentation.Tile.resume_type:type_name -> google.protobuf.StringValue
	116, // 222: sling.cmw.presentation.Tile.source_badges:type_name -> sling.cmw.presentation.Badge
	167, // 223: sling.cmw.presentation.Tile.watch_deeplink:type_name -> google.protobuf.StringValue
	167, // 224: sling.cmw.presentation.Tile.browse_deeplink:type_name -> google.protobuf.StringValue
	135, // 225: sling.cmw.presentation.Tile.sports_scores:type_name -> sling.cmw.presentation.SportsScoresData
	167, // 226: sling.cmw.presentation.Tile.overlay_description:type_name -> google.protobuf.StringValue
	84,  // 227: sling.cmw.presentation.Tile.autoplay:type_name -> sling.cmw.presentation.AutoPlay
	170, // 228: sling.cmw.presentation.Tile.watched_duration:type_name -> google.protobuf.Duration
	102, // 229: sling.cmw.presentation.Indicator.icon:type_name -> sling.cmw.presentation.Icon
	158, // 230: sling.cmw.presentation.Indicator.actions:type_name -> sling.cmw.presentation.Indicator.ActionsEntry
	96,  // 231: sling.cmw.presentation.Indicator.click_action:type_name -> sling.cmw.presentation.ActionTypeValue
	14,  // 232: sling.cmw.presentation.DetailViewResponse.format:type_name -> sling.cmw.presentation.DetailViewResponse.Format
	83,  // 233: sling.cmw.presentation.DetailViewResponse.core_properties:type_name -> sling.cmw.presentation.Tile
	89,  // 234: sling.cmw.presentation.DetailViewResponse.widgets:type_name -> sling.cmw.presentation.DetailWidget
	61,  // 235: sling.cmw.presentation.DetailScreenResponse.actions_view:type_name -> sling.cmw.presentation.DetailActions
	92,  // 236: sling.cmw.presentation.DetailScreenResponse.attributes:type_name -> sling.cmw.presentation.Attribute
	91,  // 237: sling.cmw.presentation.DetailScreenResponse.background_image:type_name -> sling.cmw.presentation.Image
	91,  // 238: sling.cmw.presentation.DetailScreenResponse.channel_logo:type_name -> sling.cmw.presentation.Image
	58,  // 239: sling.cmw.presentation.DetailScreenResponse.content_view:type_name -> sling.cmw.presentation.DetailContent
	88,  // 240: sling.cmw.presentation.DetailScreenResponse.named_attributes:type_name -> sling.cmw.presentation.NamedAttribute
	74,  // 241: sling.cmw.presentation.DetailScreenResponse.ribbons_view:type_name -> sling.cmw.presentation.DetailRibbons
	96,  // 242: sling.cmw.presentation.DetailWidget.action_key:type_name -> sling.cmw.presentation.ActionTypeValue
	102, // 243: sling.cmw.presentation.DetailWidget.icon:type_name -> sling.cmw.presentation.Icon
	15,  // 244: sling.cmw.presentation.Attribute.type:type_name -> sling.cmw.presentation.Attribute.Type
	102, // 245: sling.cmw.presentation.Attribute.icon:type_name -> sling.cmw.presentation.Icon
	166, // 246: sling.cmw.presentation.Attribute.time_value:type_name -> google.protobuf.Timestamp
	170, // 247: sling.cmw.presentation.Attribute.dur_value:type_name -> google.protobuf.Duration
	16,  // 248: sling.cmw.presentation.Bar.type:type_name -> sling.cmw.presentation.Bar.Type
	166, // 249: sling.cmw.presentation.Bar.scheduled_start_time:type_name -> google.protobuf.Timestamp
	166, // 250: sling.cmw.presentation.Bar.scheduled_stop_time:type_name -> google.protobuf.Timestamp
	171, // 251: sling.cmw.presentation.Bar.stop_percent:type_name -> google.protobuf.FloatValue
	167, // 252: sling.cmw.presentation.ScreenAction.id:type_name -> google.protobuf.StringValue
	167, // 253: sling.cmw.presentation.ScreenAction.url:type_name -> google.protobuf.StringValue
	167, // 254: sling.cmw.presentation.ScreenAction.http_method:type_name -> google.protobuf.StringValue
	167, // 255: sling.cmw.presentation.ScreenAction.title:type_name -> google.protobuf.StringValue
	169, // 256: sling.cmw.presentation.ScreenAction.enabled:type_name -> google.protobuf.BoolValue
	101, // 257: sling.cmw.presentation.ScreenAction.adobe:type_name -> sling.cmw.presentation.Adobe
	167, // 258: sling.cmw.presentation.ScreenAction.label:type_name -> google.protobuf.StringValue
	128, // 259: sling.cmw.presentation.ScreenAction.ota_recording_info:type_name -> sling.cmw.presentation.OTARecordingInfo
	167, // 260: sling.cmw.presentation.Action.label:type_name -> google.protobuf.StringValue
	102, // 261: sling.cmw.presentation.Action.icon:type_name -> sling.cmw.presentation.Icon
	167, // 262: sling.cmw.presentation.Action.id:type_name -> google.protobuf.StringValue
	167, // 263: sling.cmw.presentation.Action.href:type_name -> google.protobuf.StringValue
	167, // 264: sling.cmw.presentation.Action.http_method:type_name -> google.protobuf.StringValue
	98,  // 265: sling.cmw.presentation.Action.playback_info:type_name -> sling.cmw.presentation.PlaybackInfo
	167, // 266: sling.cmw.presentation.Action.title:type_name -> google.protobuf.StringValue
	91,  // 267: sling.cmw.presentation.Action.image:type_name -> sling.cmw.presentation.Image
	101, // 268: sling.cmw.presentation.Action.adobe:type_name -> sling.cmw.presentation.Adobe
	97,  // 269: sling.cmw.presentation.Action.pack_switch_data:type_name -> sling.cmw.presentation.PackSwitchData
	167, // 270: sling.cmw.presentation.Action.href_iview:type_name -> google.protobuf.StringValue
	167, // 271: sling.cmw.presentation.Action.iview_type:type_name -> google.protobuf.StringValue
	18,  // 272: sling.cmw.presentation.Action.record_action_sequence:type_name -> sling.cmw.presentation.Action.Type
	159, // 273: sling.cmw.presentation.Action.record_actions:type_name -> sling.cmw.presentation.Action.RecordActionsEntry
	167, // 274: sling.cmw.presentation.Action.expand_route:type_name -> google.protobuf.StringValue
	18,  // 275: sling.cmw.presentation.Action.selected_action:type_name -> sling.cmw.presentation.Action.Type
	128, // 276: sling.cmw.presentation.Action.ota_recording_info:type_name -> sling.cmw.presentation.OTARecordingInfo
	129, // 277: sling.cmw.presentation.Action.record_options_screen:type_name -> sling.cmw.presentation.RecordOptionsScreen
	95,  // 278: sling.cmw.presentation.Action.player_screen_action:type_name -> sling.cmw.presentation.Action
	131, // 279: sling.cmw.presentation.Action.toast_info:type_name -> sling.cmw.presentation.ToastInfo
	132, // 280: sling.cmw.presentation.Action.playback_options_screen:type_name -> sling.cmw.presentation.PlaybackOptionsScreen
	130, // 281: sling.cmw.presentation.Action.more_actions_screen:type_name -> sling.cmw.presentation.MoreActionsScreen
	160, // 282: sling.cmw.presentation.Action.pre_actions:type_name -> sling.cmw.presentation.Action.PreActionsEntry
	96,  // 283: sling.cmw.presentation.Action.pre_action_keys:type_name -> sling.cmw.presentation.ActionTypeValue
	167, // 284: sling.cmw.presentation.Action.channel_guid:type_name -> google.protobuf.StringValue
	167, // 285: sling.cmw.presentation.Action.asset_type:type_name -> google.protobuf.StringValue
	169, // 286: sling.cmw.presentation.Action.is_live_event:type_name -> google.protobuf.BoolValue
	18,  // 287: sling.cmw.presentation.ActionTypeValue.value:type_name -> sling.cmw.presentation.Action.Type
	19,  // 288: sling.cmw.presentation.PackSwitchData.color:type_name -> sling.cmw.presentation.PackSwitchData.TargetPackColor
	91,  // 289: sling.cmw.presentation.PackSwitchData.content_image:type_name -> sling.cmw.presentation.Image
	20,  // 290: sling.cmw.presentation.PlaybackInfo.playback_type:type_name -> sling.cmw.presentation.PlaybackInfo.Type
	100, // 291: sling.cmw.presentation.PlaybackInfo.ap_bindles:type_name -> sling.cmw.presentation.APBindle
	166, // 292: sling.cmw.presentation.PlaybackInfo.start_time:type_name -> google.protobuf.Timestamp
	166, // 293: sling.cmw.presentation.PlaybackInfo.end_time:type_name -> google.protobuf.Timestamp
	169, // 294: sling.cmw.presentation.PlaybackInfo.is_live_event:type_name -> google.protobuf.BoolValue
	169, // 295: sling.cmw.presentation.PlaybackInfo.is_time_shiftable:type_name -> google.protobuf.BoolValue
	172, // 296: sling.cmw.presentation.PlaybackInfo.live_playback_delay:type_name -> google.protobuf.Int64Value
	166, // 297: sling.cmw.presentation.PlaybackInfo.rec_end_time:type_name -> google.protobuf.Timestamp
	166, // 298: sling.cmw.presentation.PlaybackInfo.rec_start_time:type_name -> google.protobuf.Timestamp
	167, // 299: sling.cmw.presentation.PlaybackInfo.prg_svc_id:type_name -> google.protobuf.StringValue
	167, // 300: sling.cmw.presentation.PlaybackInfo.content_type:type_name -> google.protobuf.StringValue
	167, // 301: sling.cmw.presentation.PlaybackInfo.partner_service_id:type_name -> google.protobuf.StringValue
	167, // 302: sling.cmw.presentation.PlaybackInfo.program_guid:type_name -> google.protobuf.StringValue
	99,  // 303: sling.cmw.presentation.PlaybackInfo.playbackinfo_analytics:type_name -> sling.cmw.presentation.PlaybackInfoAnalytics
	167, // 304: sling.cmw.presentation.PlaybackInfo.rec_guid:type_name -> google.protobuf.StringValue
	91,  // 305: sling.cmw.presentation.PlaybackInfo.channel_logo:type_name -> sling.cmw.presentation.Image
	168, // 306: sling.cmw.presentation.APBindle.position:type_name -> google.protobuf.Int32Value
	21,  // 307: sling.cmw.presentation.Adobe.asset_type:type_name -> sling.cmw.presentation.Adobe.AssetType
	22,  // 308: sling.cmw.presentation.Adobe.button_type:type_name -> sling.cmw.presentation.Adobe.ButtonType
	23,  // 309: sling.cmw.presentation.Adobe.button_type_view:type_name -> sling.cmw.presentation.Adobe.ButtonTypeView
	24,  // 310: sling.cmw.presentation.Adobe.content_type:type_name -> sling.cmw.presentation.Adobe.ContentType
	25,  // 311: sling.cmw.presentation.Adobe.account_status:type_name -> sling.cmw.presentation.Adobe.AccountStatus
	26,  // 312: sling.cmw.presentation.Adobe.field_format:type_name -> sling.cmw.presentation.Adobe.AdobeFieldFormat
	167, // 313: sling.cmw.presentation.Adobe.tile_source:type_name -> google.protobuf.StringValue
	167, // 314: sling.cmw.presentation.Adobe.package_name:type_name -> google.protobuf.StringValue
	167, // 315: sling.cmw.presentation.Adobe.hub_guid:type_name -> google.protobuf.StringValue
	27,  // 316: sling.cmw.presentation.Adobe.hub_type:type_name -> sling.cmw.presentation.Adobe.Hubtype
	167, // 317: sling.cmw.presentation.Adobe.packages:type_name -> google.protobuf.StringValue
	169, // 318: sling.cmw.presentation.Adobe.subscribed:type_name -> google.protobuf.BoolValue
	28,  // 319: sling.cmw.presentation.Icon.type:type_name -> sling.cmw.presentation.Icon.Type
	29,  // 320: sling.cmw.presentation.Icon.key:type_name -> sling.cmw.presentation.Icon.Key
	167, // 321: sling.cmw.presentation.Icon.url:type_name -> google.protobuf.StringValue
	167, // 322: sling.cmw.presentation.Icon.message:type_name -> google.protobuf.StringValue
	30,  // 323: sling.cmw.presentation.Label.type:type_name -> sling.cmw.presentation.Label.Type
	167, // 324: sling.cmw.presentation.Label.url:type_name -> google.protobuf.StringValue
	166, // 325: sling.cmw.presentation.Member.created_at:type_name -> google.protobuf.Timestamp
	105, // 326: sling.cmw.presentation.ModifyMembersQuery.members:type_name -> sling.cmw.presentation.Member
	105, // 327: sling.cmw.presentation.Members.members:type_name -> sling.cmw.presentation.Member
	112, // 328: sling.cmw.presentation.BookmarkRequest.req_state:type_name -> sling.cmw.presentation.RequestState
	1,   // 329: sling.cmw.presentation.BookmarkRequest.context:type_name -> sling.cmw.presentation.ContextType
	83,  // 330: sling.cmw.presentation.BookmarkResponse.nextTile:type_name -> sling.cmw.presentation.Tile
	167, // 331: sling.cmw.presentation.Thuuz.label:type_name -> google.protobuf.StringValue
	167, // 332: sling.cmw.presentation.Thuuz.color:type_name -> google.protobuf.StringValue
	161, // 333: sling.cmw.presentation.RequestState.features:type_name -> sling.cmw.presentation.RequestState.FeaturesEntry
	162, // 334: sling.cmw.presentation.RequestState.experiment_groups:type_name -> sling.cmw.presentation.RequestState.ExperimentGroupsEntry
	112, // 335: sling.cmw.presentation.DetailViewRequest.req_state:type_name -> sling.cmw.presentation.RequestState
	166, // 336: sling.cmw.presentation.DetailViewRequest.time:type_name -> google.protobuf.Timestamp
	1,   // 337: sling.cmw.presentation.DetailViewRequest.context:type_name -> sling.cmw.presentation.ContextType
	0,   // 338: sling.cmw.presentation.DetailScreenQuery.type:type_name -> sling.cmw.presentation.DetailScreenType
	112, // 339: sling.cmw.presentation.DetailScreenQuery.req_state:type_name -> sling.cmw.presentation.RequestState
	170, // 340: sling.cmw.presentation.BadgeLabel.date_value:type_name -> google.protobuf.Duration
	31,  // 341: sling.cmw.presentation.BadgeLabel.label:type_name -> sling.cmw.presentation.BadgeLabel.Type
	170, // 342: sling.cmw.presentation.BadgeLabel.dur_value:type_name -> google.protobuf.Duration
	32,  // 343: sling.cmw.presentation.Badge.badge_type:type_name -> sling.cmw.presentation.Badge.Type
	33,  // 344: sling.cmw.presentation.Badge.key:type_name -> sling.cmw.presentation.Badge.Key
	34,  // 345: sling.cmw.presentation.Badge.color:type_name -> sling.cmw.presentation.Badge.Color
	2,   // 346: sling.cmw.presentation.Badge.position:type_name -> sling.cmw.presentation.Position
	115, // 347: sling.cmw.presentation.Badge.label:type_name -> sling.cmw.presentation.BadgeLabel
	91,  // 348: sling.cmw.presentation.ChannelLogoDetails.image:type_name -> sling.cmw.presentation.Image
	2,   // 349: sling.cmw.presentation.ChannelLogoDetails.position:type_name -> sling.cmw.presentation.Position
	91,  // 350: sling.cmw.presentation.SourceTypeDetails.image:type_name -> sling.cmw.presentation.Image
	2,   // 351: sling.cmw.presentation.SourceTypeDetails.position:type_name -> sling.cmw.presentation.Position
	167, // 352: sling.cmw.presentation.RecordingStatus.instruction:type_name -> google.protobuf.StringValue
	124, // 353: sling.cmw.presentation.RecordingStatus.lsdvr_storage:type_name -> sling.cmw.presentation.Storage
	124, // 354: sling.cmw.presentation.RecordingStatus.rsdvr_storage:type_name -> sling.cmw.presentation.Storage
	124, // 355: sling.cmw.presentation.DvrStatus.storage:type_name -> sling.cmw.presentation.Storage
	35,  // 356: sling.cmw.presentation.DvrStatus.format:type_name -> sling.cmw.presentation.DvrStatus.Format
	36,  // 357: sling.cmw.presentation.SubscriptionInfo.format:type_name -> sling.cmw.presentation.SubscriptionInfo.Format
	37,  // 358: sling.cmw.presentation.DeviceInfo.format:type_name -> sling.cmw.presentation.DeviceInfo.Format
	38,  // 359: sling.cmw.presentation.Storage.format:type_name -> sling.cmw.presentation.Storage.Format
	171, // 360: sling.cmw.presentation.Storage.total_hours:type_name -> google.protobuf.FloatValue
	171, // 361: sling.cmw.presentation.Storage.used_hours:type_name -> google.protobuf.FloatValue
	167, // 362: sling.cmw.presentation.Storage.instruction:type_name -> google.protobuf.StringValue
	125, // 363: sling.cmw.presentation.Storage.profile_statuses:type_name -> sling.cmw.presentation.ProfileStorageStatus
	124, // 364: sling.cmw.presentation.LsdvrVolumeState.storage:type_name -> sling.cmw.presentation.Storage
	39,  // 365: sling.cmw.presentation.LsdvrVolumeState.format:type_name -> sling.cmw.presentation.LsdvrVolumeState.Format
	167, // 366: sling.cmw.presentation.LsdvrVolumeState.instruction:type_name -> google.protobuf.StringValue
	167, // 367: sling.cmw.presentation.LsdvrVolumeState.description:type_name -> google.protobuf.StringValue
	167, // 368: sling.cmw.presentation.LsdvrVolumeState.title:type_name -> google.protobuf.StringValue
	96,  // 369: sling.cmw.presentation.FocusActionHint.action_type:type_name -> sling.cmw.presentation.ActionTypeValue
	167, // 370: sling.cmw.presentation.OTARecordingInfo.airing_guid:type_name -> google.protobuf.StringValue
	167, // 371: sling.cmw.presentation.OTARecordingInfo.channel_guid:type_name -> google.protobuf.StringValue
	167, // 372: sling.cmw.presentation.OTARecordingInfo.franchise_guid:type_name -> google.protobuf.StringValue
	167, // 373: sling.cmw.presentation.OTARecordingInfo.lsdvr_volume_id:type_name -> google.protobuf.StringValue
	167, // 374: sling.cmw.presentation.OTARecordingInfo.recording_id:type_name -> google.protobuf.StringValue
	167, // 375: sling.cmw.presentation.OTARecordingInfo.rule_guid:type_name -> google.protobuf.StringValue
	102, // 376: sling.cmw.presentation.RecordOptionsScreen.icon:type_name -> sling.cmw.presentation.Icon
	96,  // 377: sling.cmw.presentation.RecordOptionsScreen.action_sequence:type_name -> sling.cmw.presentation.ActionTypeValue
	163, // 378: sling.cmw.presentation.RecordOptionsScreen.actions:type_name -> sling.cmw.presentation.RecordOptionsScreen.ActionsEntry
	96,  // 379: sling.cmw.presentation.RecordOptionsScreen.selected_action:type_name -> sling.cmw.presentation.ActionTypeValue
	92,  // 380: sling.cmw.presentation.RecordOptionsScreen.primary_attributes:type_name -> sling.cmw.presentation.Attribute
	92,  // 381: sling.cmw.presentation.RecordOptionsScreen.secondary_attributes:type_name -> sling.cmw.presentation.Attribute
	167, // 382: sling.cmw.presentation.RecordOptionsScreen.description:type_name -> google.protobuf.StringValue
	91,  // 383: sling.cmw.presentation.RecordOptionsScreen.image:type_name -> sling.cmw.presentation.Image
	167, // 384: sling.cmw.presentation.RecordOptionsScreen.title:type_name -> google.protobuf.StringValue
	167, // 385: sling.cmw.presentation.MoreActionsScreen.subtitle:type_name -> google.protobuf.StringValue
	96,  // 386: sling.cmw.presentation.MoreActionsScreen.action_sequence:type_name -> sling.cmw.presentation.ActionTypeValue
	164, // 387: sling.cmw.presentation.MoreActionsScreen.actions:type_name -> sling.cmw.presentation.MoreActionsScreen.ActionsEntry
	40,  // 388: sling.cmw.presentation.MoreActionsScreen.position:type_name -> sling.cmw.presentation.MoreActionsScreen.Position
	167, // 389: sling.cmw.presentation.ToastInfo.subtitle:type_name -> google.protobuf.StringValue
	91,  // 390: sling.cmw.presentation.ToastInfo.image:type_name -> sling.cmw.presentation.Image
	167, // 391: sling.cmw.presentation.PlaybackOptionsScreen.title:type_name -> google.protobuf.StringValue
	167, // 392: sling.cmw.presentation.PlaybackOptionsScreen.description:type_name -> google.protobuf.StringValue
	96,  // 393: sling.cmw.presentation.PlaybackOptionsScreen.action_sequence:type_name -> sling.cmw.presentation.ActionTypeValue
	165, // 394: sling.cmw.presentation.PlaybackOptionsScreen.actions:type_name -> sling.cmw.presentation.PlaybackOptionsScreen.ActionsEntry
	169, // 395: sling.cmw.presentation.SpecialHref.is_selected:type_name -> google.protobuf.BoolValue
	95,  // 396: sling.cmw.presentation.SpecialHref.persist_action:type_name -> sling.cmw.presentation.Action
	41,  // 397: sling.cmw.presentation.SpecialHrefList.href_type:type_name -> sling.cmw.presentation.SpecialHrefList.Type
	133, // 398: sling.cmw.presentation.SpecialHrefList.special_hrefs:type_name -> sling.cmw.presentation.SpecialHref
	136, // 399: sling.cmw.presentation.SportsScoresData.away_team:type_name -> sling.cmw.presentation.TeamDetails
	136, // 400: sling.cmw.presentation.SportsScoresData.home_team:type_name -> sling.cmw.presentation.TeamDetails
	137, // 401: sling.cmw.presentation.SportsScoresData.status:type_name -> sling.cmw.presentation.GameStatus
	91,  // 402: sling.cmw.presentation.TeamDetails.logo_url:type_name -> sling.cmw.presentation.Image
	172, // 403: sling.cmw.presentation.TeamDetails.seed:type_name -> google.protobuf.Int64Value
	138, // 404: sling.cmw.presentation.GameStatus.away_score:type_name -> sling.cmw.presentation.TeamScore
	138, // 405: sling.cmw.presentation.GameStatus.home_score:type_name -> sling.cmw.presentation.TeamScore
	140, // 406: sling.cmw.presentation.LgPreviewRibbon.item_list:type_name -> sling.cmw.presentation.LgPreviewTile
	167, // 407: sling.cmw.presentation.LgPreviewTile.deeplinkId:type_name -> google.protobuf.StringValue
	91,  // 408: sling.cmw.presentation.LgPreviewTile.image:type_name -> sling.cmw.presentation.Image
	91,  // 409: sling.cmw.presentation.LgPreviewTile.image_4k:type_name -> sling.cmw.presentation.Image
	62,  // 410: sling.cmw.presentation.DeepLinkListResponse.DeeplinksEntry.value:type_name -> sling.cmw.presentation.DeepLinkResponse
	95,  // 411: sling.cmw.presentation.DetailActions.ActionsEntry.value:type_name -> sling.cmw.presentation.Action
	95,  // 412: sling.cmw.presentation.DeepLinkResponse.ActionsEntry.value:type_name -> sling.cmw.presentation.Action
	95,  // 413: sling.cmw.presentation.RecentSearch.ActionsEntry.value:type_name -> sling.cmw.presentation.Action
	94,  // 414: sling.cmw.presentation.Screen.ActionsEntry.value:type_name -> sling.cmw.presentation.ScreenAction
	95,  // 415: sling.cmw.presentation.Tab.ActionsEntry.value:type_name -> sling.cmw.presentation.Action
	95,  // 416: sling.cmw.presentation.Banner.ActionsEntry.value:type_name -> sling.cmw.presentation.Action
	95,  // 417: sling.cmw.presentation.ChannelGuide.ActionsEntry.value:type_name -> sling.cmw.presentation.Action
	80,  // 418: sling.cmw.presentation.Grid.SchedulesEntry.value:type_name -> sling.cmw.presentation.GridRow
	95,  // 419: sling.cmw.presentation.Tile.ActionsEntry.value:type_name -> sling.cmw.presentation.Action
	95,  // 420: sling.cmw.presentation.Tile.FocusActionsEntry.value:type_name -> sling.cmw.presentation.Action
	95,  // 421: sling.cmw.presentation.Indicator.ActionsEntry.value:type_name -> sling.cmw.presentation.Action
	95,  // 422: sling.cmw.presentation.Action.RecordActionsEntry.value:type_name -> sling.cmw.presentation.Action
	95,  // 423: sling.cmw.presentation.Action.PreActionsEntry.value:type_name -> sling.cmw.presentation.Action
	95,  // 424: sling.cmw.presentation.RecordOptionsScreen.ActionsEntry.value:type_name -> sling.cmw.presentation.Action
	95,  // 425: sling.cmw.presentation.MoreActionsScreen.ActionsEntry.value:type_name -> sling.cmw.presentation.Action
	95,  // 426: sling.cmw.presentation.PlaybackOptionsScreen.ActionsEntry.value:type_name -> sling.cmw.presentation.Action
	52,  // 427: sling.cmw.presentation.Presentation.GetTabs:input_type -> sling.cmw.presentation.TabQuery
	48,  // 428: sling.cmw.presentation.Presentation.GetScreen:input_type -> sling.cmw.presentation.PgQuery
	48,  // 429: sling.cmw.presentation.Presentation.GetRibbon:input_type -> sling.cmw.presentation.PgQuery
	48,  // 430: sling.cmw.presentation.Presentation.GetTile:input_type -> sling.cmw.presentation.PgQuery
	48,  // 431: sling.cmw.presentation.Presentation.GetGrid:input_type -> sling.cmw.presentation.PgQuery
	48,  // 432: sling.cmw.presentation.Presentation.GetChannelGuide:input_type -> sling.cmw.presentation.PgQuery
	48,  // 433: sling.cmw.presentation.Presentation.GetChannelGuideRibbon:input_type -> sling.cmw.presentation.PgQuery
	48,  // 434: sling.cmw.presentation.Presentation.GetChannelGuideTile:input_type -> sling.cmw.presentation.PgQuery
	49,  // 435: sling.cmw.presentation.Presentation.GetGracenoteChannels:input_type -> sling.cmw.presentation.GracenoteChannelsQuery
	53,  // 436: sling.cmw.presentation.Presentation.ResolveDeeplink:input_type -> sling.cmw.presentation.DeepLinkQuery
	54,  // 437: sling.cmw.presentation.Presentation.ResolveDeeplinks:input_type -> sling.cmw.presentation.DeepLinkListQuery
	54,  // 438: sling.cmw.presentation.Presentation.ResolveProgramDeeplinks:input_type -> sling.cmw.presentation.DeepLinkListQuery
	44,  // 439: sling.cmw.presentation.Presentation.LookupRecGuid:input_type -> sling.cmw.presentation.LookupRecGuidRequest
	46,  // 440: sling.cmw.presentation.Presentation.LookupRuleGuid:input_type -> sling.cmw.presentation.LookupRuleGuidRequest
	60,  // 441: sling.cmw.presentation.Presentation.GetPlainChannelsList:input_type -> sling.cmw.presentation.ChannelQuery
	42,  // 442: sling.cmw.presentation.Drm.CheckDrm:input_type -> sling.cmw.presentation.CheckDrmRequest
	106, // 443: sling.cmw.presentation.FeatureGroup.GetMembers:input_type -> sling.cmw.presentation.GetMembersQuery
	107, // 444: sling.cmw.presentation.FeatureGroup.AddMembers:input_type -> sling.cmw.presentation.ModifyMembersQuery
	107, // 445: sling.cmw.presentation.FeatureGroup.RemoveMembers:input_type -> sling.cmw.presentation.ModifyMembersQuery
	109, // 446: sling.cmw.presentation.Bookmark.GetBookmark:input_type -> sling.cmw.presentation.BookmarkRequest
	113, // 447: sling.cmw.presentation.DetailView.GetDetailView:input_type -> sling.cmw.presentation.DetailViewRequest
	57,  // 448: sling.cmw.presentation.DetailView.GetDetailContent:input_type -> sling.cmw.presentation.DetailContentQuery
	59,  // 449: sling.cmw.presentation.DetailView.GetDetailActions:input_type -> sling.cmw.presentation.DetailActionsQuery
	114, // 450: sling.cmw.presentation.DetailView.GetDetailScreen:input_type -> sling.cmw.presentation.DetailScreenQuery
	70,  // 451: sling.cmw.presentation.DetailView.GetDetailRibbons:input_type -> sling.cmw.presentation.DetailRibbonsQuery
	67,  // 452: sling.cmw.presentation.Presentation.GetTabs:output_type -> sling.cmw.presentation.Tabs
	65,  // 453: sling.cmw.presentation.Presentation.GetScreen:output_type -> sling.cmw.presentation.Screen
	71,  // 454: sling.cmw.presentation.Presentation.GetRibbon:output_type -> sling.cmw.presentation.Ribbon
	83,  // 455: sling.cmw.presentation.Presentation.GetTile:output_type -> sling.cmw.presentation.Tile
	79,  // 456: sling.cmw.presentation.Presentation.GetGrid:output_type -> sling.cmw.presentation.Grid
	77,  // 457: sling.cmw.presentation.Presentation.GetChannelGuide:output_type -> sling.cmw.presentation.ChannelGuide
	71,  // 458: sling.cmw.presentation.Presentation.GetChannelGuideRibbon:output_type -> sling.cmw.presentation.Ribbon
	83,  // 459: sling.cmw.presentation.Presentation.GetChannelGuideTile:output_type -> sling.cmw.presentation.Tile
	50,  // 460: sling.cmw.presentation.Presentation.GetGracenoteChannels:output_type -> sling.cmw.presentation.GracenoteChannelsResponse
	62,  // 461: sling.cmw.presentation.Presentation.ResolveDeeplink:output_type -> sling.cmw.presentation.DeepLinkResponse
	56,  // 462: sling.cmw.presentation.Presentation.ResolveDeeplinks:output_type -> sling.cmw.presentation.DeepLinkListResponse
	56,  // 463: sling.cmw.presentation.Presentation.ResolveProgramDeeplinks:output_type -> sling.cmw.presentation.DeepLinkListResponse
	45,  // 464: sling.cmw.presentation.Presentation.LookupRecGuid:output_type -> sling.cmw.presentation.LookupRecGuidResponse
	47,  // 465: sling.cmw.presentation.Presentation.LookupRuleGuid:output_type -> sling.cmw.presentation.LookupRuleGuidResponse
	72,  // 466: sling.cmw.presentation.Presentation.GetPlainChannelsList:output_type -> sling.cmw.presentation.PlainChannelList
	43,  // 467: sling.cmw.presentation.Drm.CheckDrm:output_type -> sling.cmw.presentation.CheckDrmResponse
	108, // 468: sling.cmw.presentation.FeatureGroup.GetMembers:output_type -> sling.cmw.presentation.Members
	108, // 469: sling.cmw.presentation.FeatureGroup.AddMembers:output_type -> sling.cmw.presentation.Members
	108, // 470: sling.cmw.presentation.FeatureGroup.RemoveMembers:output_type -> sling.cmw.presentation.Members
	110, // 471: sling.cmw.presentation.Bookmark.GetBookmark:output_type -> sling.cmw.presentation.BookmarkResponse
	86,  // 472: sling.cmw.presentation.DetailView.GetDetailView:output_type -> sling.cmw.presentation.DetailViewResponse
	58,  // 473: sling.cmw.presentation.DetailView.GetDetailContent:output_type -> sling.cmw.presentation.DetailContent
	61,  // 474: sling.cmw.presentation.DetailView.GetDetailActions:output_type -> sling.cmw.presentation.DetailActions
	87,  // 475: sling.cmw.presentation.DetailView.GetDetailScreen:output_type -> sling.cmw.presentation.DetailScreenResponse
	74,  // 476: sling.cmw.presentation.DetailView.GetDetailRibbons:output_type -> sling.cmw.presentation.DetailRibbons
	452, // [452:477] is the sub-list for method output_type
	427, // [427:452] is the sub-list for method input_type
	427, // [427:427] is the sub-list for extension type_name
	427, // [427:427] is the sub-list for extension extendee
	0,   // [0:427] is the sub-list for field type_name
}

func init() { file_proto_presentation_proto_init() }
func file_proto_presentation_proto_init() {
	if File_proto_presentation_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_presentation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckDrmRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckDrmResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookupRecGuidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookupRecGuidResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookupRuleGuidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookupRuleGuidResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PgQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GracenoteChannelsQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GracenoteChannelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GracenoteChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TabQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeepLinkQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeepLinkListQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeeplinkElementQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeepLinkListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailContentQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailActionsQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailActions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeepLinkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecentSearch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecentSearches); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Screen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tabs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tab); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Banner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailRibbonsQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ribbon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlainChannelList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlainChannelTile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailRibbons); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RibbonOrLoadable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadableRibbon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelGuide); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Channel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Grid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GridRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GridGuideAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuideFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoPlay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Indicator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailViewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailScreenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamedAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailWidget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScreenAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionTypeValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackSwitchData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaybackInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaybackInfoAnalytics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APBindle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Adobe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Icon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Label); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Analytics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMembersQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyMembersQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Members); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookmarkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookmarkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Thuuz); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailViewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailScreenQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BadgeLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Badge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelLogoDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceTypeDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordingStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DvrStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Storage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileStorageStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LsdvrVolumeState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FocusActionHint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OTARecordingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordOptionsScreen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoreActionsScreen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToastInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaybackOptionsScreen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecialHref); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecialHrefList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SportsScoresData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LgPreviewRibbon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_presentation_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LgPreviewTile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_presentation_proto_rawDesc,
			NumEnums:      42,
			NumMessages:   124,
			NumExtensions: 0,
			NumServices:   5,
		},
		GoTypes:           file_proto_presentation_proto_goTypes,
		DependencyIndexes: file_proto_presentation_proto_depIdxs,
		EnumInfos:         file_proto_presentation_proto_enumTypes,
		MessageInfos:      file_proto_presentation_proto_msgTypes,
	}.Build()
	File_proto_presentation_proto = out.File
	file_proto_presentation_proto_rawDesc = nil
	file_proto_presentation_proto_goTypes = nil
	file_proto_presentation_proto_depIdxs = nil
}
